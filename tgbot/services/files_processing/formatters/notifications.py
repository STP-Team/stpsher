"""–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π.

–ú–æ–¥—É–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä—ã –¥–ª—è:
- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≥—Ä–∞—Ñ–∏–∫–∞
- –†–∞—Å–ø–∏—Å–∞–Ω–∏–π –æ–±—É—á–µ–Ω–∏–π
- –ì—Ä–∞—Ñ–∏–∫ –¥–µ–∂—É—Ä–Ω—ã—Ö (—ç–∫—Å–ø–æ—Ä—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –ø–∞—Ä—Å–µ—Ä–∞)
- –ì—Ä–∞—Ñ–∏–∫ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π (—ç–∫—Å–ø–æ—Ä—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –ø–∞—Ä—Å–µ—Ä–∞)
"""

import re
from datetime import datetime
from typing import Dict, List

from tgbot.misc.helpers import short_name


class ScheduleChangeFormatter:
    """–§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –≥—Ä–∞—Ñ–∏–∫–µ."""

    @staticmethod
    def format_compact_day(day_str: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–Ω—è –≤ –≤–∏–¥ —Ç–∏–ø–∞ '1.08 –ü–¢'.

        Args:
            day_str: –°—Ç—Ä–æ–∫–∞ –¥–Ω—è

        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–Ω—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        """
        # –ú–∞–ø–ø–∏–Ω–≥ –º–µ—Å—è—Ü–∞ –∫ —á–∏—Å–ª—É
        month_map = {
            "–Ø–ù–í–ê–†–¨": "01",
            "–§–ï–í–†–ê–õ–¨": "02",
            "–ú–ê–†–¢": "03",
            "–ê–ü–†–ï–õ–¨": "04",
            "–ú–ê–ô": "05",
            "–ò–Æ–ù–¨": "06",
            "–ò–Æ–õ–¨": "07",
            "–ê–í–ì–£–°–¢": "08",
            "–°–ï–ù–¢–Ø–ë–†–¨": "09",
            "–û–ö–¢–Ø–ë–†–¨": "10",
            "–ù–û–Ø–ë–†–¨": "11",
            "–î–ï–ö–ê–ë–†–¨": "12",
        }

        # –ú–∞–ø–ø–∏–Ω–≥ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
        weekday_map = {
            "–ü–Ω": "–ü–ù",
            "–í—Ç": "–í–¢",
            "–°—Ä": "–°–†",
            "–ß—Ç": "–ß–¢",
            "–ü—Ç": "–ü–¢",
            "–°–±": "–°–ë",
            "–í—Å": "–í–°",
        }

        # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫–∏ –¥–Ω–µ–π —Ç–∏–ø–∞ "–ê–í–ì–£–°–¢ 24 (–í—Å)" –∏–ª–∏ "–ò–Æ–õ–¨ 3 (–ß—Ç)"
        match = re.search(r"(\w+)\s+(\d+)\s*\((\w+)\)", day_str)
        if match:
            month_name, day_num, weekday = match.groups()
            month_num = month_map.get(month_name, "01")
            formatted_weekday = weekday_map.get(weekday, weekday.upper())
            return f"{day_num}.{month_num} {formatted_weekday}"

        # –§–æ–ª–ª–±–µ–∫ –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏
        return day_str

    @staticmethod
    def format_schedule_value(value: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–∏–ø –¥–Ω—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.

        Args:
            value: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–∞ –¥–µ–Ω—å.

        Returns:
            –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–∞ –¥–µ–Ω—å
        """
        if not value.strip() or value == "–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ":
            return "–í—ã—Ö–æ–¥–Ω–æ–π"

        match value:
            case "–õ–ù–¢–°":
                return "ü§í –ë–æ–ª—å–Ω–∏—á–Ω—ã–π"
            case "–û–¢–ü–£–°–ö":
                return "‚õ±Ô∏è –û—Ç–ø—É—Å–∫"
            case "–æ—Ç–ø—É—Å–∫ –±—Å":
                return "‚õ±Ô∏è –ë–°"
            case "–ù":
                return "üïµÔ∏è‚Äç‚ôÇÔ∏è –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ"
            case "–í":
                return "üéñÔ∏è –í–æ–µ–Ω–∫–æ–º–∞—Ç"
            case _:
                return value

    @staticmethod
    def format_change_notification(
        fullname: str, changes: List[Dict], current_time
    ) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –≥—Ä–∞—Ñ–∏–∫–µ.

        Args:
            fullname: –§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            changes: –°–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            current_time: –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è

        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
        """
        message = (
            f"üîî <b>–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –≥—Ä–∞—Ñ–∏–∫–µ</b> ‚Ä¢ {current_time.strftime('%d.%m.%Y')}\n\n"
        )

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ –¥–∞—Ç–µ (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
        def parse_date_from_day(day_str):
            """–î–æ—Å—Ç–∞–µ–º –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ –¥–Ω—è."""
            # –î–æ—Å—Ç–∞–µ–º –∏–Ω–¥–µ–∫—Å –º–µ—Å—è—Ü–∞ –∏ –¥–µ–Ω—å –∏–∑ —Å—Ç—Ä–æ–∫ —Ç–∏–ø–∞ "–ê–í–ì–£–°–¢ 24 (–í—Å)"
            month_map = {
                "–Ø–ù–í–ê–†–¨": 1,
                "–§–ï–í–†–ê–õ–¨": 2,
                "–ú–ê–†–¢": 3,
                "–ê–ü–†–ï–õ–¨": 4,
                "–ú–ê–ô": 5,
                "–ò–Æ–ù–¨": 6,
                "–ò–Æ–õ–¨": 7,
                "–ê–í–ì–£–°–¢": 8,
                "–°–ï–ù–¢–Ø–ë–†–¨": 9,
                "–û–ö–¢–Ø–ë–†–¨": 10,
                "–ù–û–Ø–ë–†–¨": 11,
                "–î–ï–ö–ê–ë–†–¨": 12,
            }

            match = re.search(r"(\w+)\s+(\d+)", day_str)
            if match:
                month_name, day_num = match.groups()
                month_num = month_map.get(month_name, 1)
                return month_num, int(day_num)
            return 1, 1  # –î–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –µ—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ —Å–ø–∞—Ä—Å–∏—Ç—å

        sorted_changes = sorted(changes, key=lambda x: parse_date_from_day(x["day"]))

        for change in sorted_changes:
            day = change["day"]
            old_val = ScheduleChangeFormatter.format_schedule_value(change["old_value"])
            new_val = ScheduleChangeFormatter.format_schedule_value(change["new_value"])

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–µ–Ω—å –≤ –≤–∏–¥: "1.08 –ü–¢"
            formatted_day = ScheduleChangeFormatter.format_compact_day(day)

            message += f"{formatted_day} {old_val} ‚Üí {new_val}\n"

        return message


class StudiesFormatter:
    """–§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –æ–±—É—á–µ–Ω–∏–π."""

    @staticmethod
    def format_studies_schedule(sessions: List, title: str = "üìö –û–±—É—á–µ–Ω–∏—è") -> str:
        """Format study sessions for display.

        Args:
            sessions: –°–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π –æ–±—É—á–µ–Ω–∏–π
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫

        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ–±—É—á–µ–Ω–∏–π
        """
        if not sessions:
            return f"<b>{title}</b>\n\n‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±—É—á–µ–Ω–∏–π"

        lines = [f"<b>{title}</b>\n"]

        # Group sessions by date
        sessions_by_date = {}
        for session in sessions:
            date_key = session.date.strftime("%d.%m.%Y")
            if date_key not in sessions_by_date:
                sessions_by_date[date_key] = []
            sessions_by_date[date_key].append(session)

        # Sort dates
        sorted_dates = sorted(
            sessions_by_date.keys(), key=lambda x: datetime.strptime(x, "%d.%m.%Y")
        )

        for date_str in sorted_dates:
            date_sessions = sessions_by_date[date_str]
            lines.append(f"üìÖ <b>{date_str}</b>\n")

            for session in date_sessions:
                lines.append(f"‚è∞ <b>{session.time}</b> ({session.duration})")
                lines.append(f"üìñ {session.title}")

                if session.experience_level:
                    lines.append(f"üë• {session.experience_level}")

                if session.trainer:
                    lines.append(f"üéì –¢—Ä–µ–Ω–µ—Ä: {session.trainer}")

                # Show participant count
                if session.participants:
                    present_count = sum(
                        1
                        for _, _, _, attendance, _ in session.participants
                        if attendance == "+"
                    )
                    total_count = len(session.participants)
                    lines.append(f"üë§ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {present_count}/{total_count}")

                lines.append("")

        # Remove last empty line
        if lines and lines[-1] == "":
            lines.pop()

        return "\n".join(lines)

    @staticmethod
    def format_user_studies_schedule(
        sessions: List, user_fullname: str, names_match_func
    ) -> str:
        """Format study sessions for specific user.

        Args:
            sessions: –°–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π –æ–±—É—á–µ–Ω–∏–π
            user_fullname: –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            names_match_func: –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏–º–µ–Ω

        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±—É—á–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        if not sessions:
            return "<b>üìö –¢–≤–æ–∏ –æ–±—É—á–µ–Ω–∏—è</b>\n\n‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±—É—á–µ–Ω–∏–π"

        lines = ["<b>üìö –¢–≤–æ–∏ –æ–±—É—á–µ–Ω–∏—è</b>\n"]

        # Sort by date
        sorted_sessions = sorted(sessions, key=lambda x: x.date)

        for session in sorted_sessions:
            lines.append(f"üìÖ <b>{session.date.strftime('%d.%m.%Y')}</b>")
            lines.append(f"‚è∞ {session.time} ({session.duration})")
            lines.append(f"üìñ {session.title}")

            if session.experience_level:
                lines.append(f"üë• {session.experience_level}")

            if session.trainer:
                lines.append(f"üéì –¢—Ä–µ–Ω–µ—Ä: {session.trainer}")

            # Show user's attendance status
            for area, name, rg, attendance, reason in session.participants:
                if names_match_func(user_fullname, name):
                    status_icon = (
                        "‚úÖ"
                        if attendance == "+"
                        else "‚ùå"
                        if attendance == "-"
                        else "‚ùì"
                    )
                    lines.append(f"{status_icon} –°—Ç–∞—Ç—É—Å: {attendance}")
                    if reason:
                        lines.append(f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}")
                    break

            lines.append("")

        # Remove last empty line
        if lines and lines[-1] == "":
            lines.pop()

        return "\n".join(lines)

    @staticmethod
    def format_studies_detailed(sessions: List) -> str:
        """Format study sessions with detailed participant information.

        Args:
            sessions: –°–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π –æ–±—É—á–µ–Ω–∏–π

        Returns:
            –î–µ—Ç–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±—É—á–µ–Ω–∏–π
        """
        if not sessions:
            return "<b>üìö –î–µ—Ç–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±—É—á–µ–Ω–∏–π</b>\n\n‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±—É—á–µ–Ω–∏–π"

        lines = ["<b>üìö –î–µ—Ç–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±—É—á–µ–Ω–∏–π</b>\n"]

        for session in sorted(sessions, key=lambda x: x.date):
            lines.append(f"üìÖ <b>{session.date.strftime('%d.%m.%Y')}</b>")
            lines.append(f"‚è∞ {session.time} ({session.duration})")
            lines.append(f"üìñ {session.title}")

            if session.experience_level:
                lines.append(f"üë• {session.experience_level}")

            if session.trainer:
                lines.append(f"üéì –¢—Ä–µ–Ω–µ—Ä: {session.trainer}")

            lines.append("")
            lines.append("<b>üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏:</b>")

            if session.participants:
                for area, name, rg, attendance, reason in session.participants:
                    status_icon = (
                        "‚úÖ"
                        if attendance == "+"
                        else "‚ùå"
                        if attendance == "-"
                        else "‚ùì"
                    )
                    participant_line = f"{status_icon} {short_name(name)} ({area})"
                    if rg:
                        participant_line += f" - –†–ì: {rg}"
                    if reason:
                        participant_line += f" - {reason}"
                    lines.append(participant_line)
            else:
                lines.append("‚Ä¢ –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—É—Å—Ç")

            lines.append("")

        # Remove last empty line
        if lines and lines[-1] == "":
            lines.pop()

        return "\n".join(lines)
