"""–°–µ—Ä–≤–∏—Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω.

–ú–æ–¥—É–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è–º–∏,
–≤–∫–ª—é—á–∞—è –≥—Ä–∞—Ñ–∏–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, –¥–µ–∂—É—Ä–Ω—ã—Ö, —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π –∏ –≥—Ä—É–ø–ø–æ–≤—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏.
"""

import datetime
import logging
from typing import Optional, Tuple

from aiogram import Bot
from aiogram.types import CallbackQuery, InlineKeyboardMarkup
from stp_database import Employee, MainRequestsRepo

from tgbot.keyboards.auth import auth_kb

from ..core.analyzers import ScheduleAnalyzer
from ..core.exceptions import (
    ScheduleError,
    ScheduleFileNotFoundError,
    UserNotFoundError,
)
from ..formatters.schedule import ScheduleFormatter, get_current_date
from ..parsers.schedule import (
    DutyScheduleParser,
    GroupScheduleParser,
    HeadScheduleParser,
    ScheduleParser,
)

logger = logging.getLogger(__name__)


class ScheduleHandlerService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è–º–∏."""

    def __init__(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π —Å–æ –≤—Å–µ–º–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –ø–∞—Ä—Å–µ—Ä–∞–º–∏."""
        self.schedule_parser = ScheduleParser()
        self.duty_parser = DutyScheduleParser()
        self.head_parser = HeadScheduleParser()
        self.group_parser = GroupScheduleParser()
        self.formatter = ScheduleFormatter()
        self.analyzer = ScheduleAnalyzer()

    @staticmethod
    async def check_user_auth(callback: CallbackQuery, user: Employee) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Args:
            callback: Callback query –æ—Ç Telegram
            user: –≠–∫–∑–µ–º–ø–ª—è—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–æ–¥–µ–ª—å—é Employee

        Returns:
            –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        if not user:
            await callback.message.answer(
                """üëã –ü—Ä–∏–≤–µ—Ç

–Ø - –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –°–¢–ü

–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏""",
                reply_markup=auth_kb(),
            )
            return False
        return True

    @staticmethod
    async def handle_schedule_error(
        callback: CallbackQuery,
        error: Exception,
        fallback_markup: Optional[InlineKeyboardMarkup] = None,
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.

        Args:
            callback: Callback query –æ—Ç Telegram
            error: –û—à–∏–±–∫–∞ –æ—Ç Python
            fallback_markup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ

        Returns:
            None
        """
        if isinstance(error, UserNotFoundError):
            error_msg = "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏"
        elif isinstance(error, ScheduleFileNotFoundError):
            error_msg = "‚ùå –§–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω"
        elif isinstance(error, ScheduleError):
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {error}"
        else:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:\n<code>{error}</code>"

        logger.error(f"Schedule error: {error}", exc_info=True)

        try:
            await callback.message.edit_text(
                text=error_msg,
                reply_markup=fallback_markup,
            )
        except Exception as edit_error:
            logger.error(f"Failed to edit message: {edit_error}")
            await callback.answer(error_msg, show_alert=True)

    async def get_user_schedule_response(
        self,
        user: Employee,
        month: str,
        compact: bool = True,
        stp_repo: MainRequestsRepo = None,
        bot: Bot = None,
    ) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Args:
            user: –û–±—ä–µ–∫—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            month: –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞
            compact: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            stp_repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–æ–∫

        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
        """
        try:
            if stp_repo:
                # –ì—Ä–∞—Ñ–∏–∫ —Å –¥–µ–∂—É—Ä–Ω—ã–º–∏
                return (
                    await self.schedule_parser.get_user_schedule_formatted_with_duties(
                        fullname=user.fullname,
                        month=month,
                        division=user.division,
                        compact=compact,
                        stp_repo=stp_repo,
                        bot=bot,
                    )
                )
            else:
                # –û–±—ã—á–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
                return self.schedule_parser.get_user_schedule_formatted(
                    fullname=user.fullname,
                    month=month,
                    division=user.division,
                    compact=compact,
                )

        except Exception as e:
            logger.error(f"Schedule error (optimized): {e}", exc_info=True)
            return f"‚ùå <b>–û—à–∏–±–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞:</b>\n<code>{e}</code>"

    async def get_duties_response(
        self, division: str, date: Optional[datetime.datetime] = None, stp_repo=None
    ) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–µ–∂—É—Ä–Ω—ã—Ö.

        Args:
            division: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            date: –î–∞—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∞—è)
            stp_repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –¥–µ–∂—É—Ä—Å—Ç–≤–∞–º–∏
        """
        if date is None:
            date = get_current_date()

        duties = await self.duty_parser.get_duties_for_date(date, division, stp_repo)

        # Check if today's date is selected to highlight current duties
        today = get_current_date()
        highlight_current = (date.date() == today.date()) and stp_repo

        # Get formatted duties files_processing with optional current duty highlighting
        return await self.duty_parser.format_schedule(
            duties, date, highlight_current, division, stp_repo
        )

    async def get_heads_response(
        self, division: str, date: Optional[datetime.datetime] = None, stp_repo=None
    ) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π –≥—Ä—É–ø–ø.

        Args:
            division: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            date: –î–∞—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∞—è)
            stp_repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º–∏
        """
        if date is None:
            date = get_current_date()

        heads = await self.head_parser.get_heads_for_date(date, division, stp_repo)

        return self.head_parser.format_schedule(heads, date)

    async def get_group_schedule_response(
        self,
        user: Employee,
        date: Optional[datetime.datetime] = None,
        page: int = 1,
        stp_repo=None,
        is_head: bool = False,
    ) -> Tuple[str, int, bool, bool]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≥—Ä—É–ø–ø–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è.

        Args:
            user: –û–±—ä–µ–∫—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            date: –î–∞—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∞—è)
            page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            stp_repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            is_head: –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º

        Returns:
            –ö–æ—Ä—Ç–µ–∂ (—Ç–µ–∫—Å—Ç, –≤—Å–µ–≥–æ_—Å—Ç—Ä–∞–Ω–∏—Ü, –µ—Å—Ç—å_–ø—Ä–µ–¥—ã–¥—É—â–∞—è, –µ—Å—Ç—å_—Å–ª–µ–¥—É—é—â–∞—è)
        """
        if date is None:
            date = get_current_date()

        try:
            if is_head:
                # –î–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –≥—Ä—É–ø–ø—É
                group_members = await self.group_parser.get_group_members(
                    user.fullname, date, user.division, stp_repo
                )
                return self.group_parser.format_group_schedule_for_head(
                    date, group_members, page
                )
            else:
                # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–ª–µ–≥ –ø–æ –≥—Ä—É–ø–ø–µ
                group_members = await self.group_parser.get_group_members_for_user(
                    user.fullname, date, user.division, stp_repo
                )
                return self.group_parser.format_group_schedule_for_user(
                    date, group_members, page
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã", 1, False, False


# –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
schedule_service = ScheduleHandlerService()
