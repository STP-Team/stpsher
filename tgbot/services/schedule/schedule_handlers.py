import datetime
import logging
from typing import Optional

import pytz
from aiogram.types import CallbackQuery
from stp_database import Employee

from tgbot.keyboards.auth import auth_kb
from tgbot.misc.dicts import russian_months
from tgbot.services.schedule.exceptions import (
    ScheduleError,
    ScheduleFileNotFoundError,
    UserNotFoundError,
)
from tgbot.services.schedule.formatters import ScheduleFormatter
from tgbot.services.schedule.parsers import (
    DutyScheduleParser,
    GroupScheduleParser,
    HeadScheduleParser,
    ScheduleParser,
)

logger = logging.getLogger(__name__)


class ScheduleHandlerService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º"""

    def __init__(self):
        self.schedule_parser = ScheduleParser()
        self.duty_parser = DutyScheduleParser()
        self.head_parser = HeadScheduleParser()
        self.group_parser = GroupScheduleParser()
        self.formatter = ScheduleFormatter()
        self.yekaterinburg_tz = pytz.timezone("Asia/Yekaterinburg")

    @staticmethod
    async def check_user_auth(callback: CallbackQuery, user: Employee) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not user:
            await callback.message.answer(
                """üëã –ü—Ä–∏–≤–µ—Ç

–Ø - –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –°–¢–ü

–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏""",
                reply_markup=auth_kb(),
            )
            return False
        return True

    @staticmethod
    async def handle_schedule_error(
        callback: CallbackQuery, error: Exception, fallback_markup=None
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        if isinstance(error, UserNotFoundError):
            error_msg = "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏"
        elif isinstance(error, ScheduleFileNotFoundError):
            error_msg = "‚ùå –§–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω"
        elif isinstance(error, ScheduleError):
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {error}"
        else:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:\n<code>{error}</code>"

        logger.error(f"Schedule error: {error}", exc_info=True)

        try:
            await callback.message.edit_text(
                text=error_msg,
                reply_markup=fallback_markup,
            )
        except Exception as edit_error:
            logger.error(f"Failed to edit message: {edit_error}")
            await callback.answer(error_msg, show_alert=True)

    @staticmethod
    def get_current_month() -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü"""
        return russian_months[datetime.datetime.now().month]

    @staticmethod
    def get_current_date():
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –ø–æ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥—É"""
        yekaterinburg_tz = pytz.timezone("Asia/Yekaterinburg")
        return datetime.datetime.now(yekaterinburg_tz)

    def parse_date_from_callback(self, date_str: str) -> datetime.datetime:
        """–ü–∞—Ä—Å–∏—Ç –¥–∞—Ç—É –∏–∑ callback data"""
        target_date = datetime.datetime.strptime(date_str, "%Y-%m-%d")
        return self.yekaterinburg_tz.localize(target_date)

    async def get_user_schedule_response(
        self, user: Employee, month: str, compact: bool = True, stp_repo=None
    ) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–µ–∂—É—Ä—Å—Ç–≤–∞—Ö"""
        if stp_repo:
            # Fetch duty information when stp_repo is available (for heads/MIP viewing others)
            return await self.schedule_parser.get_user_schedule_formatted_with_duties(
                fullname=user.fullname,
                month=month,
                division=user.division,
                compact=compact,
                stp_repo=stp_repo,
            )
        else:
            # Use regular schedule when no stp_repo (for users viewing their own schedule)
            return self.schedule_parser.get_user_schedule_formatted(
                fullname=user.fullname,
                month=month,
                division=user.division,
                compact=compact,
            )

    async def get_duties_response(
        self, division: str, date: Optional[datetime.datetime] = None, stp_repo=None
    ) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–µ–∂—É—Ä–Ω—ã—Ö"""
        if date is None:
            date = schedule_service.get_current_date()

        duties = await self.duty_parser.get_duties_for_date(date, division, stp_repo)

        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–µ–∂—É—Ä–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (—É–≤–æ–ª–µ–Ω–Ω—ã—Ö)
        if stp_repo:
            active_duties = []
            for duty in duties:
                try:
                    user = await stp_repo.employee.get_users(fullname=duty.name)
                    if user:
                        active_duties.append(duty)
                    else:
                        logger.debug(
                            f"[–ì—Ä–∞—Ñ–∏–∫ –¥–µ–∂—É—Ä—Å—Ç–≤] –°–æ—Ç—Ä—É–¥–Ω–∏–∫ {duty.name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
                        )
                except Exception as e:
                    logger.debug(
                        f"[–ì—Ä–∞—Ñ–∏–∫ –¥–µ–∂—É—Ä—Å—Ç–≤] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {duty.name} –≤ –ë–î: {e}"
                    )
                    # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å - –≤–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –¥–µ–∂—É—Ä–Ω—ã—Ö –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è false negative
                    active_duties.append(duty)
            duties = active_duties

        # Check if today's date is selected to highlight current duties
        today = schedule_service.get_current_date()
        highlight_current = (date.date() == today) and stp_repo

        # Get formatted duties schedule with optional current duty highlighting
        return await self.duty_parser.format_schedule(
            duties, date, highlight_current, division, stp_repo
        )

    async def get_heads_response(
        self, division: str, date: Optional[datetime.datetime] = None, stp_repo=None
    ) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π –≥—Ä—É–ø–ø"""
        if date is None:
            date = schedule_service.get_current_date()

        heads = await self.head_parser.get_heads_for_date(date, division, stp_repo)

        return self.head_parser.format_schedule(heads, date)

    async def get_group_schedule_response(
        self,
        user: Employee,
        date: Optional[datetime.datetime] = None,
        page: int = 1,
        stp_repo=None,
        is_head: bool = False,
    ) -> tuple[str, int, bool, bool]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≥—Ä—É–ø–ø–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è

        :param user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        :param date: –î–∞—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–µ–≥–æ–¥–Ω—è)
        :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        :param stp_repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ë–î
        :param is_head: –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º
        :return: (—Ç–µ–∫—Å—Ç, –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü, –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∞—è, –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∞—è)
        """
        if date is None:
            date = schedule_service.get_current_date()

        try:
            if is_head:
                # –î–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –≥—Ä—É–ø–ø—É
                group_members = await self.group_parser.get_group_members_for_head(
                    user.fullname, date, user.division, stp_repo
                )
                return self.group_parser.format_group_schedule_for_head(
                    date, group_members, page
                )
            else:
                # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–ª–µ–≥ –ø–æ –≥—Ä—É–ø–ø–µ
                group_members = await self.group_parser.get_group_members_for_user(
                    user.fullname, date, user.division, stp_repo
                )
                return self.group_parser.format_group_schedule_for_user(
                    date, group_members, page
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã", 1, False, False


# –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
schedule_service = ScheduleHandlerService()
