import logging
from datetime import datetime

from aiogram import Bot
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.deep_linking import create_start_link
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from stp_database import Exchange, MainRequestsRepo

from tgbot.misc.helpers import format_fullname, tz
from tgbot.services.schedulers.base import BaseScheduler

logger = logging.getLogger(__name__)


class ExchangesScheduler(BaseScheduler):
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –±–∏—Ä–∂–∏ –ø–æ–¥–º–µ–Ω."""

    def __init__(self):
        super().__init__("–ë–∏—Ä–∂–∞ –ø–æ–¥–º–µ–Ω")

    def setup_jobs(
        self, scheduler: AsyncIOScheduler, session_pool, bot: Bot, kpi_session_pool=None
    ):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á –±–∏—Ä–∂–∏."""
        self.logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–¥–∞—á –±–∏—Ä–∂–∏...")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        scheduler.add_job(
            func=self._check_expired_offers,
            args=[session_pool, bot],
            trigger="interval",
            id="achievements_check_daily_achievements",
            name="–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π",
            minutes=1,
            coalesce=True,
            misfire_grace_time=300,
            replace_existing=True,
        )

    async def _check_expired_offers(self, session_pool, bot: Bot):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–¥–µ–ª–æ–∫"""
        await check_expired_offers(session_pool, bot)


async def check_expired_offers(session_pool, bot: Bot):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–∫—Ä—ã—Ç–∏–µ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–¥–µ–ª–æ–∫.

    Args:
        session_pool: –ü—É–ª —Å–µ—Å—Å–∏–π –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    """
    async with session_pool() as stp_session:
        stp_repo = MainRequestsRepo(stp_session)

        active_exchanges = await stp_repo.exchange.get_active_exchanges(
            include_private=True, limit=200
        )

        for exchange in active_exchanges:
            shift_date = exchange.shift_date
            shift_time = datetime.strptime(exchange.shift_start_time, "%H:%M").time()
            shift_datetime_local = datetime.combine(shift_date.date(), shift_time)
            shift_datetime_local = tz.localize(shift_datetime_local)
            current_local_time = datetime.now(tz)

            if current_local_time >= shift_datetime_local:
                await stp_repo.exchange.expire_exchange(exchange.id)
                await notify_expire_offer(bot, stp_repo, exchange)


async def notify_expire_offer(bot: Bot, stp_repo: MainRequestsRepo, exchange: Exchange):
    shift_date = exchange.shift_date.strftime("%d.%m.%Y")
    shift_time = f"{exchange.shift_start_time}-{exchange.shift_end_time}"

    seller = await stp_repo.employee.get_users(user_id=exchange.seller_id)
    seller_name = format_fullname(
        seller.fullname,
        short=True,
        gender_emoji=True,
        username=seller.username,
        user_id=seller.user_id,
    )

    if exchange.payment_type == "immediate":
        payment_info = "–°—Ä–∞–∑—É –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ"
    elif exchange.payment_date:
        payment_info = f"–î–æ {exchange.payment_date.strftime('%d.%m.%Y')}"
    else:
        payment_info = "–ü–æ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"

    deeplink = await create_start_link(
        bot=bot, payload=f"exchange_{exchange.id}", encode=True
    )

    await bot.send_message(
        chat_id=exchange.seller_id,
        text=f"""‚è≥ <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å—Ç–µ–∫–ª–æ</b>

–£ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—É–ø–∏–ª–æ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞

<blockquote>üìÖ <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:</b> {shift_date} {shift_time} –ü–†–ú
üí∞ <b>–¶–µ–Ω–∞:</b> {exchange.price} —Ä.

üë§ <b>–ü—Ä–æ–¥–∞–≤–µ—Ü:</b> {seller_name}
üí≥ <b>–û–ø–ª–∞—Ç–∞:</b> {payment_info}</blockquote>

<i>–¢—ã –º–æ–∂–µ—à—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</i>""",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É", url=deeplink)]
            ]
        ),
    )
