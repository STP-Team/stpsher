import logging
from datetime import datetime

from aiogram import Bot
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.deep_linking import create_start_link
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from stp_database import Exchange, MainRequestsRepo

from tgbot.dialogs.getters.common.exchanges.exchanges import (
    get_exchange_text,
)
from tgbot.misc.helpers import format_fullname, tz
from tgbot.services.schedulers.base import BaseScheduler

logger = logging.getLogger(__name__)


class ExchangesScheduler(BaseScheduler):
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –±–∏—Ä–∂–∏ –ø–æ–¥–º–µ–Ω."""

    def __init__(self):
        super().__init__("–ë–∏—Ä–∂–∞ –ø–æ–¥–º–µ–Ω")

    def setup_jobs(
        self, scheduler: AsyncIOScheduler, session_pool, bot: Bot, kpi_session_pool=None
    ):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á –±–∏—Ä–∂–∏."""
        self.logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–¥–∞—á –±–∏—Ä–∂–∏...")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        scheduler.add_job(
            func=self._check_expired_offers,
            args=[session_pool, bot],
            trigger="interval",
            id="exchanges_check_expired_offers",
            name="–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π",
            minutes=1,
            coalesce=True,
            misfire_grace_time=300,
            replace_existing=True,
        )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ–¥–ø–∏—Å–æ–∫
        scheduler.add_job(
            func=self._check_subscription_matches,
            args=[session_pool, bot],
            trigger="interval",
            id="exchanges_check_subscription_matches",
            name="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ–¥–ø–∏—Å–æ–∫",
            minutes=2,
            coalesce=True,
            misfire_grace_time=300,
            replace_existing=True,
        )

    async def _check_expired_offers(self, session_pool, bot: Bot):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–¥–µ–ª–æ–∫"""
        await check_expired_offers(session_pool, bot)

    async def _check_subscription_matches(self, session_pool, bot: Bot):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ–¥–ø–∏—Å–æ–∫ —Å –Ω–æ–≤—ã–º–∏ –æ–±–º–µ–Ω–∞–º–∏"""
        await check_subscription_matches(session_pool, bot)


async def check_expired_offers(session_pool, bot: Bot):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–∫—Ä—ã—Ç–∏–µ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–¥–µ–ª–æ–∫.

    Args:
        session_pool: –ü—É–ª —Å–µ—Å—Å–∏–π –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    """
    async with session_pool() as stp_session:
        stp_repo = MainRequestsRepo(stp_session)

        active_exchanges = await stp_repo.exchange.get_active_exchanges(
            include_private=True, limit=200
        )

        current_local_time = datetime.now(tz)

        for exchange in active_exchanges:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            if exchange.type == "sell":
                # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂–∏ –∑–∞–≤–µ—Ä—à–∞—é—Ç—Å—è –∫–æ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤—Ä–µ–º—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                expiration_datetime = exchange.start_time
            elif exchange.type == "buy":
                # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ –∑–∞–≤–µ—Ä—à–∞—é—Ç—Å—è –∫–æ–≥–¥–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –≤—Ä–µ–º—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                expiration_datetime = exchange.end_time
            else:
                continue

            # –ï—Å–ª–∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –Ω–µ –∑–∞–¥–∞–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            if expiration_datetime is None:
                continue

            # –ü—Ä–∏–≤–æ–¥–∏–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–µ –µ—Å–ª–∏ –æ–Ω–æ timezone-naive
            if expiration_datetime.tzinfo is None:
                expiration_datetime = tz.localize(expiration_datetime)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            if current_local_time >= expiration_datetime:
                await stp_repo.exchange.expire_exchange(exchange.id)
                await notify_expire_offer(bot, stp_repo, exchange)


async def notify_expire_offer(bot: Bot, stp_repo: MainRequestsRepo, exchange: Exchange):
    if exchange.type == "sell":
        owner = await stp_repo.employee.get_users(user_id=exchange.seller_id)
    else:
        owner = await stp_repo.employee.get_users(user_id=exchange.buyer_id)

    owner_name = format_fullname(
        owner.fullname,
        short=True,
        gender_emoji=True,
        username=owner.username,
        user_id=owner.user_id,
    )

    if exchange.payment_type == "immediate":
        payment_info = "–°—Ä–∞–∑—É –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ"
    elif exchange.payment_date:
        payment_info = f"–î–æ {exchange.payment_date.strftime('%d.%m.%Y')}"
    else:
        payment_info = "–ü–æ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"

    exchange_info = await get_exchange_text(exchange, user_id=owner.user_id)
    deeplink = await create_start_link(
        bot=bot, payload=f"exchange_{exchange.id}", encode=True
    )

    await bot.send_message(
        chat_id=exchange.seller_id,
        text=f"""‚è≥ <b>–°–¥–µ–ª–∫–∞ –∏—Å—Ç–µ–∫–ª–∞</b>

–£ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—É–ø–∏–ª–æ –≤—Ä–µ–º—è {"–Ω–∞—á–∞–ª–∞" if exchange.type == "sell" else "–∫–æ–Ω—Ü–∞"}

{exchange_info}

<i>–¢—ã –º–æ–∂–µ—à—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</i>""",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É", url=deeplink)]
            ]
        ),
    )


async def check_subscription_matches(session_pool, bot: Bot):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –æ–±–º–µ–Ω–æ–≤ –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏.

    Args:
        session_pool: –ü—É–ª —Å–µ—Å—Å–∏–π –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    """
    async with session_pool() as stp_session:
        stp_repo = MainRequestsRepo(stp_session)

        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –æ–±–º–µ–Ω—ã (—Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç)
            current_time = datetime.now(tz)
            recent_exchanges = await stp_repo.exchange.get_active_exchanges(
                include_private=False, limit=50
            )

            # –§–∏–ª—å—Ç—Ä—É–µ–º –æ–±–º–µ–Ω—ã, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç
            new_exchanges = []
            for exchange in recent_exchanges:
                if exchange.created_at:
                    # –ü—Ä–∏–≤–æ–¥–∏–º created_at –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–µ –µ—Å–ª–∏ –æ–Ω–æ timezone-naive
                    created_at = exchange.created_at
                    if created_at.tzinfo is None:
                        created_at = tz.localize(created_at)

                    if (current_time - created_at).total_seconds() <= 300:
                        new_exchanges.append(exchange)

            if not new_exchanges:
                return

            for exchange in new_exchanges:
                # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —ç—Ç–æ–º—É –æ–±–º–µ–Ω—É
                matching_subscriptions = (
                    await stp_repo.exchange.find_matching_subscriptions(exchange)
                )

                for subscription in matching_subscriptions:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–ø–æ–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É)
                    await notify_subscription_match(
                        bot, stp_repo, subscription, exchange
                    )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ–¥–ø–∏—Å–æ–∫: {e}")


async def notify_subscription_match(
    bot: Bot, stp_repo: MainRequestsRepo, subscription, exchange: Exchange
):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        stp_repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        subscription: –ü–æ–¥–ø–∏—Å–∫–∞
        exchange: –û–±–º–µ–Ω
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await stp_repo.employee.get_users(user_id=subscription.subscriber_id)
        if not user:
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        exchange_info = await get_exchange_text(exchange, user_id=user.user_id)

        # –°–æ–∑–¥–∞–µ–º deeplink
        deeplink = await create_start_link(
            bot=bot, payload=f"exchange_{exchange.id}", encode=True
        )

        message_text = f"""üîî <b>–ù–æ–≤—ã–π –æ–±–º–µ–Ω</b>

–ù–∞–π–¥–µ–Ω –æ–±–º–µ–Ω, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–µ "{subscription.name}":

{exchange_info}

üí∞ <b>–¶–µ–Ω–∞:</b> {exchange.price} —Ä.
üí≥ <b>–û–ø–ª–∞—Ç–∞:</b> {"–°—Ä–∞–∑—É" if exchange.payment_type == "immediate" else "–ü–æ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"}"""

        reply_markup = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –æ–±–º–µ–Ω", url=deeplink)]]
        )

        await bot.send_message(
            chat_id=subscription.subscriber_id,
            text=message_text,
            reply_markup=reply_markup,
            disable_notification=False,
        )

        logger.info(
            f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ {subscription.id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {subscription.subscriber_id}"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏: {e}")
