import logging
from datetime import datetime, timedelta

from aiogram import Bot
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.deep_linking import create_start_link
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from stp_database import Exchange, MainRequestsRepo

from tgbot.dialogs.getters.common.exchanges.exchanges import (
    get_exchange_text,
)
from tgbot.misc.helpers import tz
from tgbot.services.schedulers.base import BaseScheduler

logger = logging.getLogger(__name__)


def can_reschedule_exchange(exchange: Exchange) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Å–¥–µ–ª–∫—É.

    Args:
        exchange: –≠–∫–∑–µ–º–ø–ª—è—Ä —Å–¥–µ–ª–∫–∏

    Returns:
        bool: True –µ—Å–ª–∏ —Å–¥–µ–ª–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    """
    if not exchange.end_time:
        return False

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –∑–æ–Ω–µ
    current_local_time = datetime.now(tz)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–¥–µ–ª–∫–∞ —Å–µ–≥–æ–¥–Ω—è
    today = current_local_time.date()

    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ end_time timezone-aware –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    end_time = exchange.end_time
    if end_time.tzinfo is None:
        end_time = tz.localize(end_time)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω–µ—Ü —Å–¥–µ–ª–∫–∏ —Å–µ–≥–æ–¥–Ω—è
    if end_time.date() != today:
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω–µ—Ü —Å–¥–µ–ª–∫–∏ –µ—â–µ –Ω–µ –ø—Ä–æ—à–µ–ª
    if end_time <= current_local_time:
        return False

    # –í—ã—á–∏—Å–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø–æ–ª—É—á–∞—Å–æ–≤–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
    current_time = current_local_time.time()
    if current_time.minute < 30:
        next_slot_start = current_local_time.replace(minute=30, second=0, microsecond=0)
    else:
        next_slot_start = current_local_time.replace(
            minute=0, second=0, microsecond=0
        ) + timedelta(hours=1)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ª–æ—Ç–∞ –¥–æ –∫–æ–Ω—Ü–∞ —Å–¥–µ–ª–∫–∏ –º–∏–Ω–∏–º—É–º 30 –º–∏–Ω—É—Ç
    time_remaining = end_time - next_slot_start
    return time_remaining >= timedelta(minutes=30)


class ExchangesScheduler(BaseScheduler):
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –±–∏—Ä–∂–∏ –ø–æ–¥–º–µ–Ω."""

    def __init__(self):
        super().__init__("–ë–∏—Ä–∂–∞ –ø–æ–¥–º–µ–Ω")

    def setup_jobs(
        self, scheduler: AsyncIOScheduler, session_pool, bot: Bot, kpi_session_pool=None
    ):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á –±–∏—Ä–∂–∏."""
        self.logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–¥–∞—á –±–∏—Ä–∂–∏...")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        scheduler.add_job(
            func=self._check_expired_offers,
            args=[session_pool, bot],
            trigger="interval",
            id="exchanges_check_expired_offers",
            name="–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π",
            minutes=1,
            coalesce=True,
            misfire_grace_time=300,
            replace_existing=True,
        )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫
        scheduler.add_job(
            func=self._check_subscription_matches,
            args=[session_pool, bot],
            trigger="interval",
            id="exchanges_check_subscription_matches",
            name="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ–¥–ø–∏—Å–æ–∫",
            minutes=2,
            coalesce=True,
            misfire_grace_time=300,
            replace_existing=True,
        )

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ 1 —á–∞—Å –¥–æ –Ω–∞—á–∞–ª–∞ –æ–±–º–µ–Ω–∞
        scheduler.add_job(
            func=self._check_upcoming_exchanges_1hour,
            args=[session_pool, bot],
            trigger="interval",
            id="exchanges_notify_1hour",
            name="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ 1 —á–∞—Å –¥–æ –æ–±–º–µ–Ω–∞",
            minutes=10,
            coalesce=True,
            misfire_grace_time=300,
            replace_existing=True,
        )

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ 1 –¥–µ–Ω—å –¥–æ –Ω–∞—á–∞–ª–∞ –æ–±–º–µ–Ω–∞
        scheduler.add_job(
            func=self._check_upcoming_exchanges_1day,
            args=[session_pool, bot],
            trigger="interval",
            id="exchanges_notify_1day",
            name="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ 1 –¥–µ–Ω—å –¥–æ –æ–±–º–µ–Ω–∞",
            hours=1,
            coalesce=True,
            misfire_grace_time=600,
            replace_existing=True,
        )

    async def _check_expired_offers(self, session_pool, bot: Bot) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–¥–µ–ª–æ–∫.

        Args:
            session_pool: –°–µ—Å—Å–∏—è —Å –ë–î
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        """
        await check_expired_offers(session_pool, bot)

    async def _check_subscription_matches(self, session_pool, bot: Bot) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ–¥–ø–∏—Å–æ–∫ —Å –Ω–æ–≤—ã–º–∏ –æ–±–º–µ–Ω–∞–º–∏.

        Args:
            session_pool: –°–µ—Å—Å–∏—è —Å –ë–î
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        """
        await check_subscription_matches(session_pool, bot)

    async def _check_upcoming_exchanges_1hour(self, session_pool, bot: Bot) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–º–µ–Ω–æ–≤, –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —á–µ—Ä–µ–∑ 1 —á–∞—Å.

        Args:
            session_pool: –°–µ—Å—Å–∏—è —Å –ë–î
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        """
        await check_upcoming_exchanges(session_pool, bot, hours_before=1)

    async def _check_upcoming_exchanges_1day(self, session_pool, bot: Bot) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–º–µ–Ω–æ–≤, –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —á–µ—Ä–µ–∑ 1 –¥–µ–Ω—å.

        Args:
            session_pool: –°–µ—Å—Å–∏—è —Å –ë–î
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        """
        await check_upcoming_exchanges(session_pool, bot, hours_before=24)


async def check_expired_offers(session_pool, bot: Bot):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–∫—Ä—ã—Ç–∏–µ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–¥–µ–ª–æ–∫.

    Args:
        session_pool: –ü—É–ª —Å–µ—Å—Å–∏–π –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    """
    async with session_pool() as stp_session:
        stp_repo = MainRequestsRepo(stp_session)

        active_exchanges = await stp_repo.exchange.get_active_exchanges(
            include_private=True, limit=200
        )

        current_local_time = datetime.now(tz)

        for exchange in active_exchanges:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            if exchange.type == "sell":
                # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂–∏ –∑–∞–≤–µ—Ä—à–∞—é—Ç—Å—è –∫–æ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤—Ä–µ–º—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                expiration_datetime = exchange.start_time
            elif exchange.type == "buy":
                # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ –∑–∞–≤–µ—Ä—à–∞—é—Ç—Å—è –∫–æ–≥–¥–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –≤—Ä–µ–º—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                expiration_datetime = exchange.end_time
            else:
                continue

            # –ï—Å–ª–∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –Ω–µ –∑–∞–¥–∞–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            if expiration_datetime is None:
                continue

            # –ü—Ä–∏–≤–æ–¥–∏–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–µ –µ—Å–ª–∏ –æ–Ω–æ timezone-naive
            if expiration_datetime.tzinfo is None:
                expiration_datetime = tz.localize(expiration_datetime)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            if current_local_time >= expiration_datetime:
                await stp_repo.exchange.expire_exchange(exchange.id)
                await notify_expire_offer(bot, stp_repo, exchange)


async def notify_expire_offer(
    bot: Bot, stp_repo: MainRequestsRepo, exchange: Exchange
) -> None:
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ–∫—à–µ–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–¥–µ–ª–∫–µ.

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        stp_repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π STP
        exchange: –≠–∫–∑–µ–º–ø–ª—è—Ä —Å–¥–µ–ª–∫–∏ —Å –º–æ–¥–µ–ª—å—é Exchange
    """
    if exchange.type == "sell":
        owner = await stp_repo.employee.get_users(user_id=exchange.seller_id)
    else:
        owner = await stp_repo.employee.get_users(user_id=exchange.buyer_id)

    exchange_info = await get_exchange_text(stp_repo, exchange, user_id=owner.user_id)
    deeplink = await create_start_link(
        bot=bot, payload=f"exchange_{exchange.id}", encode=True
    )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    inline_keyboard = [[InlineKeyboardButton(text="üé≠ –û—Ç–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É", url=deeplink)]]

    # –î–ª—è –ø—Ä–æ–¥–∞–∂ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–Ω–æ—Å–∞ (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
    if exchange.type == "sell" and can_reschedule_exchange(exchange):
        inline_keyboard.append([
            InlineKeyboardButton(
                text="‚è∞ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏",
                callback_data=f"reschedule_{exchange.id}",
            )
        ])

    await bot.send_message(
        chat_id=exchange.seller_id,
        text=f"""‚è≥ <b>–°–¥–µ–ª–∫–∞ –∏—Å—Ç–µ–∫–ª–∞</b>

–£ —Å–¥–µ–ª–∫–∏ –Ω–∞—Å—Ç—É–ø–∏–ª–æ –≤—Ä–µ–º—è {"–Ω–∞—á–∞–ª–∞" if exchange.type == "sell" else "–∫–æ–Ω—Ü–∞"}

{exchange_info}

<i>–¢—ã –º–æ–∂–µ—à—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–µ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</i>""",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=inline_keyboard),
    )


async def check_subscription_matches(session_pool, bot: Bot):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –æ–±–º–µ–Ω–æ–≤ –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏.

    Args:
        session_pool: –ü—É–ª —Å–µ—Å—Å–∏–π –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    """
    async with session_pool() as stp_session:
        stp_repo = MainRequestsRepo(stp_session)

        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –æ–±–º–µ–Ω—ã (—Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç)
            current_time = datetime.now(tz)
            recent_exchanges = await stp_repo.exchange.get_active_exchanges(
                include_private=False, limit=50
            )

            # –§–∏–ª—å—Ç—Ä—É–µ–º –æ–±–º–µ–Ω—ã, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç
            new_exchanges = []
            for exchange in recent_exchanges:
                if exchange.created_at:
                    # –ü—Ä–∏–≤–æ–¥–∏–º created_at –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–µ –µ—Å–ª–∏ –æ–Ω–æ timezone-naive
                    created_at = exchange.created_at
                    if created_at.tzinfo is None:
                        created_at = tz.localize(created_at)

                    if (current_time - created_at).total_seconds() <= 300:
                        new_exchanges.append(exchange)

            if not new_exchanges:
                return

            for exchange in new_exchanges:
                # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —ç—Ç–æ–º—É –æ–±–º–µ–Ω—É
                matching_subscriptions = (
                    await stp_repo.exchange.find_matching_subscriptions(exchange)
                )

                for subscription in matching_subscriptions:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–ø–æ–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É)
                    await notify_subscription_match(
                        bot, stp_repo, subscription, exchange
                    )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ–¥–ø–∏—Å–æ–∫: {e}")


async def notify_subscription_match(
    bot: Bot, stp_repo: MainRequestsRepo, subscription, exchange: Exchange
):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        stp_repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        subscription: –ü–æ–¥–ø–∏—Å–∫–∞
        exchange: –û–±–º–µ–Ω
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await stp_repo.employee.get_users(user_id=subscription.subscriber_id)
        if not user:
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        exchange_info = await get_exchange_text(
            stp_repo, exchange, user_id=user.user_id
        )

        # –°–æ–∑–¥–∞–µ–º deeplink
        exchange_deeplink = await create_start_link(
            bot=bot, payload=f"exchange_{exchange.id}", encode=True
        )
        subscription_deeplink = await create_start_link(
            bot=bot, payload=f"subscription_{subscription.id}", encode=True
        )

        message_text = f"""üîî <b>–ù–æ–≤–∞—è —Å–¥–µ–ª–∫–∞</b>

–ù–∞–π–¥–µ–Ω–∞ —Å–¥–µ–ª–∫–∞, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –ø–æ–¥–ø–∏—Å–∫–µ <b>{subscription.name}</b>:

{exchange_info}"""

        reply_markup = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üé≠ –û—Ç–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É", url=exchange_deeplink)],
                [
                    InlineKeyboardButton(
                        text="üîî –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", url=subscription_deeplink
                    )
                ],
            ]
        )

        await bot.send_message(
            chat_id=subscription.subscriber_id,
            text=message_text,
            reply_markup=reply_markup,
            disable_notification=False,
        )

        logger.info(
            f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ {subscription.id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {subscription.subscriber_id}"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏: {e}")


async def check_upcoming_exchanges(session_pool, bot: Bot, hours_before: int):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏—Ö—Å—è –æ–±–º–µ–Ω–∞—Ö.

    Args:
        session_pool: –ü—É–ª —Å–µ—Å—Å–∏–π –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        hours_before: –ó–∞ —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –¥–æ –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    """
    async with session_pool() as stp_session:
        stp_repo = MainRequestsRepo(stp_session)

        try:
            current_local_time = datetime.now(tz)
            target_time = current_local_time + timedelta(hours=hours_before)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ (¬±5 –º–∏–Ω—É—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
            time_window = timedelta(minutes=5)
            target_start = target_time - time_window
            target_end = target_time + time_window

            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥–∞–Ω–Ω—ã–µ –æ–±–º–µ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∏—Å—å
            upcoming_exchanges = await stp_repo.exchange.get_upcoming_sold_exchanges(
                start_after=target_start, start_before=target_end, limit=500
            )

            for exchange in upcoming_exchanges:
                # –ü—Ä–∏–≤–æ–¥–∏–º –≤—Ä–µ–º—è –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–µ
                start_time = exchange.start_time
                if start_time.tzinfo is None:
                    start_time = tz.localize(start_time)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–±–µ–∏–º —Å—Ç–æ—Ä–æ–Ω–∞–º
                await notify_upcoming_exchange(bot, stp_repo, exchange, hours_before)

        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏—Ö—Å—è –æ–±–º–µ–Ω–æ–≤ ({hours_before}—á): {e}"
            )


async def notify_upcoming_exchange(
    bot: Bot, stp_repo: MainRequestsRepo, exchange: Exchange, hours_before: int
) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–µ–º—Å—è –æ–±–º–µ–Ω–µ.

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        stp_repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π STP
        exchange: –≠–∫–∑–µ–º–ø–ª—è—Ä —Å–¥–µ–ª–∫–∏
        hours_before: –ó–∞ —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    """
    try:
        # –°–æ–∑–¥–∞–µ–º deeplink –æ–¥–∏–Ω —Ä–∞–∑
        deeplink = await create_start_link(
            bot=bot, payload=f"exchange_{exchange.id}", encode=True
        )

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏
        if hours_before == 1:
            time_text = "—á–µ—Ä–µ–∑ 1 —á–∞—Å"
            emoji = "‚è∞"
        elif hours_before == 24:
            time_text = "–∑–∞–≤—Ç—Ä–∞"
            emoji = "üìÖ"
        else:
            time_text = f"—á–µ—Ä–µ–∑ {hours_before} —á–∞—Å–æ–≤"
            emoji = "‚è∞"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        inline_keyboard = [
            [InlineKeyboardButton(text="üé≠ –û—Ç–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É", url=deeplink)]
        ]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=inline_keyboard)

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü—É
        if exchange.seller_id:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–º–µ–Ω–µ —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –ø—Ä–æ–¥–∞–≤—Ü–∞
            seller_exchange_info = await get_exchange_text(
                stp_repo, exchange, user_id=exchange.seller_id
            )

            seller_message = f"""{emoji} <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–º–µ–Ω–µ</b>

–ü—Ä–æ–¥–∞–Ω–Ω—ã–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ —Å–º–µ–Ω—ã –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è {time_text}

{seller_exchange_info}"""

            await bot.send_message(
                chat_id=exchange.seller_id,
                text=seller_message,
                reply_markup=reply_markup,
                disable_notification=False,
            )

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
        if exchange.buyer_id:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–º–µ–Ω–µ —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
            buyer_exchange_info = await get_exchange_text(
                stp_repo, exchange, user_id=exchange.buyer_id
            )

            buyer_message = f"""{emoji} <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–º–µ–Ω–µ</b>

–°–º–µ–Ω–∞, –∫–æ—Ç–æ—Ä—É—é —Ç—ã –∫—É–ø–∏–ª, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è {time_text}

{buyer_exchange_info}"""

            await bot.send_message(
                chat_id=exchange.buyer_id,
                text=buyer_message,
                reply_markup=reply_markup,
                disable_notification=False,
            )

        logger.info(
            f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–µ–º—Å—è –æ–±–º–µ–Ω–µ {exchange.id} "
            f"(–∑–∞ {hours_before}—á)"
        )

    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–µ–º—Å—è –æ–±–º–µ–Ω–µ {exchange.id}: {e}"
        )
