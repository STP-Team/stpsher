import logging
from datetime import datetime

from aiogram import Bot
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.deep_linking import create_start_link
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from stp_database import Exchange, MainRequestsRepo

from tgbot.misc.helpers import format_fullname, tz
from tgbot.services.schedulers.base import BaseScheduler

logger = logging.getLogger(__name__)


class ExchangesScheduler(BaseScheduler):
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –±–∏—Ä–∂–∏ –ø–æ–¥–º–µ–Ω."""

    def __init__(self):
        super().__init__("–ë–∏—Ä–∂–∞ –ø–æ–¥–º–µ–Ω")

    def setup_jobs(
        self, scheduler: AsyncIOScheduler, session_pool, bot: Bot, kpi_session_pool=None
    ):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á –±–∏—Ä–∂–∏."""
        self.logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–¥–∞—á –±–∏—Ä–∂–∏...")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        scheduler.add_job(
            func=self._check_expired_offers,
            args=[session_pool, bot],
            trigger="interval",
            id="achievements_check_daily_achievements",
            name="–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π",
            minutes=1,
            coalesce=True,
            misfire_grace_time=300,
            replace_existing=True,
        )

    async def _check_expired_offers(self, session_pool, bot: Bot):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–¥–µ–ª–æ–∫"""
        await check_expired_offers(session_pool, bot)


async def check_expired_offers(session_pool, bot: Bot):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–∫—Ä—ã—Ç–∏–µ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–¥–µ–ª–æ–∫.

    Args:
        session_pool: –ü—É–ª —Å–µ—Å—Å–∏–π –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    """
    async with session_pool() as stp_session:
        stp_repo = MainRequestsRepo(stp_session)

        active_exchanges = await stp_repo.exchange.get_active_exchanges(
            include_private=True, limit=200
        )

        current_local_time = datetime.now(tz)

        for exchange in active_exchanges:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            if exchange.type == "sell":
                # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂–∏ –∑–∞–≤–µ—Ä—à–∞—é—Ç—Å—è –∫–æ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤—Ä–µ–º—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                expiration_datetime = exchange.start_time
            elif exchange.type == "buy":
                # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ –∑–∞–≤–µ—Ä—à–∞—é—Ç—Å—è –∫–æ–≥–¥–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –≤—Ä–µ–º—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                expiration_datetime = exchange.end_time
            else:
                continue

            # –ï—Å–ª–∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –Ω–µ –∑–∞–¥–∞–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            if expiration_datetime is None:
                continue

            # –ü—Ä–∏–≤–æ–¥–∏–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–µ –µ—Å–ª–∏ –æ–Ω–æ timezone-naive
            if expiration_datetime.tzinfo is None:
                expiration_datetime = tz.localize(expiration_datetime)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            if current_local_time >= expiration_datetime:
                await stp_repo.exchange.expire_exchange(exchange.id)
                await notify_expire_offer(bot, stp_repo, exchange)


async def notify_expire_offer(bot: Bot, stp_repo: MainRequestsRepo, exchange: Exchange):
    # –ü—Ä–∏–≤–æ–¥–∏–º –≤—Ä–µ–º—è –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–µ –µ—Å–ª–∏ –æ–Ω–æ timezone-naive
    start_time = exchange.start_time
    if start_time.tzinfo is None:
        start_time = tz.localize(start_time)

    shift_date = start_time.strftime("%d.%m.%Y")
    start_time_str = start_time.strftime("%H:%M")

    if exchange.end_time:
        end_time = exchange.end_time
        if end_time.tzinfo is None:
            end_time = tz.localize(end_time)
        end_time_str = end_time.strftime("%H:%M")
    else:
        end_time_str = "??:??"

    shift_time = f"{start_time_str}-{end_time_str}"

    seller = await stp_repo.employee.get_users(user_id=exchange.seller_id)
    seller_name = format_fullname(
        seller.fullname,
        short=True,
        gender_emoji=True,
        username=seller.username,
        user_id=seller.user_id,
    )

    if exchange.payment_type == "immediate":
        payment_info = "–°—Ä–∞–∑—É –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ"
    elif exchange.payment_date:
        payment_info = f"–î–æ {exchange.payment_date.strftime('%d.%m.%Y')}"
    else:
        payment_info = "–ü–æ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"

    price_per_hour = 0
    if exchange.start_time and exchange.end_time:
        try:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ TIMESTAMP –ø–æ–ª–µ–π
            duration = exchange.end_time - exchange.start_time
            shift_hours = duration.total_seconds() / 3600  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —á–∞—Å—ã

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É –∑–∞ —á–∞—Å
            if shift_hours > 0 and exchange.price:
                price_per_hour = round(exchange.price / shift_hours, 2)
        except (ValueError, AttributeError):
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å, –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            shift_hours = 0
            price_per_hour = 0

    deeplink = await create_start_link(
        bot=bot, payload=f"exchange_{exchange.id}", encode=True
    )

    await bot.send_message(
        chat_id=exchange.seller_id,
        text=f"""‚è≥ <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏—Å—Ç–µ–∫–ª–æ</b>

–£ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—É–ø–∏–ª–æ –≤—Ä–µ–º—è {"–Ω–∞—á–∞–ª–∞" if exchange.type == "sell" else "–∫–æ–Ω—Ü–∞"}

<blockquote>üìÖ <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:</b> <code>{shift_time} {shift_date} –ü–†–ú</code>
üí∞ <b>–¶–µ–Ω–∞:</b> <code>{exchange.price} —Ä. ({price_per_hour} —Ä./—á–∞—Å)</code>

üë§ <b>–ü—Ä–æ–¥–∞–≤–µ—Ü:</b> {seller_name}
üí≥ <b>–û–ø–ª–∞—Ç–∞:</b> {payment_info}</blockquote>

<i>–¢—ã –º–æ–∂–µ—à—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</i>""",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É", url=deeplink)]
            ]
        ),
    )
