import logging
from datetime import datetime, timedelta
from typing import Tuple

from aiogram import Bot
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.deep_linking import create_start_link
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from stp_database import Exchange, MainRequestsRepo

from tgbot.dialogs.getters.common.exchanges.exchanges import (
    get_exchange_text,
)
from tgbot.misc.helpers import tz
from tgbot.services.broadcaster import send_message
from tgbot.services.schedulers.base import BaseScheduler

logger = logging.getLogger(__name__)

# Scheduler Configuration Constants
SCHEDULER_CONFIG = {
    "expired_offers": {
        "interval_minutes": 1,
        "misfire_grace_time": 300,
        "id": "exchanges_check_expired_offers",
        "name": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π",
    },
    "subscription_matches": {
        "interval_minutes": 2,
        "misfire_grace_time": 300,
        "id": "exchanges_check_subscription_matches",
        "name": "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ–¥–ø–∏—Å–æ–∫",
    },
    "upcoming_1hour": {
        "interval_minutes": 10,
        "misfire_grace_time": 300,
        "id": "exchanges_notify_1hour",
        "name": "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ 1 —á–∞—Å –¥–æ –æ–±–º–µ–Ω–∞",
    },
    "upcoming_1day": {
        "interval_hours": 1,
        "misfire_grace_time": 600,
        "id": "exchanges_notify_1day",
        "name": "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ 1 –¥–µ–Ω—å –¥–æ –æ–±–º–µ–Ω–∞",
    },
    "payment_notifications": {
        "interval_hours": 6,
        "misfire_grace_time": 600,
        "id": "exchanges_payment_date_notifications",
        "name": "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–∞—Ç–∞—Ö –æ–ø–ª–∞—Ç—ã",
    },
    "immediate_reminders": {
        "interval_hours": 12,
        "misfire_grace_time": 600,
        "id": "exchanges_immediate_payment_reminders",
        "name": "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± immediate –æ–ø–ª–∞—Ç–µ",
    },
    "daily_payment_reminder": {
        "trigger": "cron",
        "hour": 12,
        "minute": 0,
        "misfire_grace_time": 1800,  # 30 minutes
        "id": "exchanges_daily_payment_reminder",
        "name": "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ –≤ 12:00",
    },
}

# Notification Messages Templates
MESSAGES = {
    "expired_offer": """‚è≥ <b>–°–¥–µ–ª–∫–∞ –∏—Å—Ç–µ–∫–ª–∞</b>

–£ —Å–¥–µ–ª–∫–∏ –Ω–∞—Å—Ç—É–ø–∏–ª–æ –≤—Ä–µ–º—è {time_type}

{exchange_info}

<i>–¢—ã –º–æ–∂–µ—à—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–µ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</i>""",
    "subscription_match": """üîî <b>–ù–æ–≤–∞—è —Å–¥–µ–ª–∫–∞</b>

–ù–∞–π–¥–µ–Ω–∞ —Å–¥–µ–ª–∫–∞, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –ø–æ–¥–ø–∏—Å–∫–µ <b>{subscription_name}</b>:

{exchange_info}""",
    "upcoming_seller": """{emoji} <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–º–µ–Ω–µ</b>

–ü—Ä–æ–¥–∞–Ω–Ω—ã–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ —Å–º–µ–Ω—ã –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è {time_text}

{exchange_info}""",
    "upcoming_buyer": """{emoji} <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–º–µ–Ω–µ</b>

–°–º–µ–Ω–∞, –∫–æ—Ç–æ—Ä—É—é —Ç—ã –∫—É–ø–∏–ª, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è {time_text}

{exchange_info}""",
    "payment_date_buyer": """üí∞ <b>–í—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã</b>

–ù–∞—Å—Ç—É–ø–∏–ª–∞ –¥–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã –¥–ª—è –∫—É–ø–ª–µ–Ω–Ω–æ–π —Å–º–µ–Ω—ã

{exchange_info}

<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–∏–∑–≤–µ–¥–∏ –æ–ø–ª–∞—Ç—É –∏ –æ—Ç–º–µ—Ç—å —ç—Ç–æ –≤ —Å–¥–µ–ª–∫–µ</i>""",
    "payment_date_seller": """üìÖ <b>–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã –Ω–∞—Å—Ç—É–ø–∏–ª–∞</b>

–î–ª—è –ø—Ä–æ–¥–∞–Ω–Ω–æ–π —Å–º–µ–Ω—ã –Ω–∞—Å—Ç—É–ø–∏–ª–∞ –¥–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã

{exchange_info}

<i>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É</i>""",
    "immediate_reminder": """‚ö° <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ</b>

–¢—ã –µ—â–µ –Ω–µ –æ—Ç–º–µ—Ç–∏–ª –æ–ø–ª–∞—Ç—É –¥–ª—è –∫—É–ø–ª–µ–Ω–Ω–æ–π —Å–º–µ–Ω—ã —Å –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –æ–ø–ª–∞—Ç–æ–π

{exchange_info}

<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–∏–∑–≤–µ–¥–∏ –æ–ø–ª–∞—Ç—É –∏ –æ—Ç–º–µ—Ç—å —ç—Ç–æ –≤ —Å–¥–µ–ª–∫–µ</i>""",
    "daily_payment_reminder": """üïê <b>–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ</b>

–£ —Ç–µ–±—è –µ—Å—Ç—å –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –æ–±–º–µ–Ω—ã:

{exchanges_info}

<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–∏–∑–≤–µ–¥–∏ –æ–ø–ª–∞—Ç—É –∏ –æ—Ç–º–µ—Ç—å —ç—Ç–æ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Å–¥–µ–ª–∫–∞—Ö</i>""",
}

# Button Text Constants
BUTTONS = {
    "open_exchange": "üé≠ –û—Ç–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É",
    "reschedule_auto": "‚è∞ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏",
    "mark_payment": "üí∞ –û—Ç–º–µ—Ç–∏—Ç—å –æ–ø–ª–∞—Ç—É",
    "configure_subscription": "üîî –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
}

# Time-related Constants
TIME_CONSTANTS = {
    "subscription_check_window_seconds": 300,  # 5 minutes
    "upcoming_notification_window_minutes": 5,
    "minimum_reschedule_minutes": 30,
}


# Helper Functions
async def create_exchange_deeplink(bot: Bot, exchange_id: int) -> str:
    """–°–æ–∑–¥–∞–µ—Ç deeplink –¥–ª—è –æ–±–º–µ–Ω–∞.

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        exchange_id: ID –æ–±–º–µ–Ω–∞

    Returns:
        Deeplink –¥–ª—è –æ–±–º–µ–Ω–∞
    """
    return await create_start_link(
        bot=bot, payload=f"exchange_{exchange_id}", encode=True
    )


async def create_subscription_deeplink(bot: Bot, subscription_id: int) -> str:
    """–°–æ–∑–¥–∞–µ—Ç deeplink –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏.

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        subscription_id: ID –ø–æ–¥–ø–∏—Å–∫–∏

    Returns:
        Deeplink –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
    """
    return await create_start_link(
        bot=bot, payload=f"subscription_{subscription_id}", encode=True
    )


def create_basic_keyboard(
    deeplink: str, button_text: str = None
) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π.

    Args:
        deeplink: –°—Å—ã–ª–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏
        button_text: –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "–û—Ç–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É")

    Returns:
        –û–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    if button_text is None:
        button_text = BUTTONS["open_exchange"]

    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=button_text, url=deeplink)]]
    )


def create_payment_keyboard(deeplink: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ–ø–ª–∞—Ç—ã.

    Args:
        deeplink: –°—Å—ã–ª–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏

    Returns:
        –û–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    return create_basic_keyboard(deeplink, BUTTONS["mark_payment"])


def create_subscription_keyboard(
    exchange_deeplink: str, subscription_deeplink: str
) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–¥–ø–∏—Å–∫–∏.

    Args:
        exchange_deeplink: –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±–º–µ–Ω
        subscription_deeplink: –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É

    Returns:
        –û–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=BUTTONS["open_exchange"], url=exchange_deeplink
                )
            ],
            [
                InlineKeyboardButton(
                    text=BUTTONS["configure_subscription"], url=subscription_deeplink
                )
            ],
        ]
    )


def create_expire_keyboard(deeplink: str, exchange: Exchange) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∏—Å—Ç–µ–∫—à–∏—Ö —Å–¥–µ–ª–æ–∫.

    Args:
        deeplink: –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±–º–µ–Ω
        exchange: –û–±—ä–µ–∫—Ç –æ–±–º–µ–Ω–∞

    Returns:
        –û–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    inline_keyboard = [
        [InlineKeyboardButton(text=BUTTONS["open_exchange"], url=deeplink)]
    ]

    # –î–ª—è –ø—Ä–æ–¥–∞–∂ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–Ω–æ—Å–∞ (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
    if exchange.type == "sell" and can_reschedule_exchange(exchange):
        inline_keyboard.append([
            InlineKeyboardButton(
                text=BUTTONS["reschedule_auto"],
                callback_data=f"reschedule_{exchange.id}",
            )
        ])

    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)


def get_time_text_and_emoji(hours_before: int) -> Tuple[str, str]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ –∏ —ç–º–æ–¥–∑–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.

    Args:
        hours_before: –ó–∞ —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –¥–æ —Å–æ–±—ã—Ç–∏—è

    Returns:
        –ö–æ—Ä—Ç–µ–∂ (–≤—Ä–µ–º—è_—Ç–µ–∫—Å—Ç, —ç–º–æ–¥–∑–∏)
    """
    if hours_before == 1:
        return "—á–µ—Ä–µ–∑ 1 —á–∞—Å", "‚è∞"
    elif hours_before == 24:
        return "–∑–∞–≤—Ç—Ä–∞", "üìÖ"
    else:
        return f"—á–µ—Ä–µ–∑ {hours_before} —á–∞—Å–æ–≤", "‚è∞"


def normalize_timezone(dt: datetime) -> datetime:
    """–ü—Ä–∏–≤–æ–¥–∏—Ç datetime –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–µ.

    Args:
        dt: –û–±—ä–µ–∫—Ç datetime

    Returns:
        datetime –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–µ
    """
    if dt.tzinfo is None:
        return tz.localize(dt)
    return dt


def can_reschedule_exchange(exchange: Exchange) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Å–¥–µ–ª–∫—É.

    Args:
        exchange: –≠–∫–∑–µ–º–ø–ª—è—Ä —Å–¥–µ–ª–∫–∏

    Returns:
        bool: True –µ—Å–ª–∏ —Å–¥–µ–ª–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    """
    if not exchange.end_time:
        return False

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –∑–æ–Ω–µ
    current_local_time = datetime.now(tz)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–¥–µ–ª–∫–∞ —Å–µ–≥–æ–¥–Ω—è
    today = current_local_time.date()

    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ end_time timezone-aware –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    end_time = normalize_timezone(exchange.end_time)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω–µ—Ü —Å–¥–µ–ª–∫–∏ —Å–µ–≥–æ–¥–Ω—è
    if end_time.date() != today:
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω–µ—Ü —Å–¥–µ–ª–∫–∏ –µ—â–µ –Ω–µ –ø—Ä–æ—à–µ–ª
    if end_time <= current_local_time:
        return False

    # –í—ã—á–∏—Å–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø–æ–ª—É—á–∞—Å–æ–≤–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
    current_time = current_local_time.time()
    if current_time.minute < 30:
        next_slot_start = current_local_time.replace(minute=30, second=0, microsecond=0)
    else:
        next_slot_start = current_local_time.replace(
            minute=0, second=0, microsecond=0
        ) + timedelta(hours=1)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ª–æ—Ç–∞ –¥–æ –∫–æ–Ω—Ü–∞ —Å–¥–µ–ª–∫–∏ –º–∏–Ω–∏–º—É–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    time_remaining = end_time - next_slot_start
    return time_remaining >= timedelta(
        minutes=TIME_CONSTANTS["minimum_reschedule_minutes"]
    )


class ExchangesScheduler(BaseScheduler):
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –±–∏—Ä–∂–∏ –ø–æ–¥–º–µ–Ω."""

    def __init__(self):
        super().__init__("–ë–∏—Ä–∂–∞ –ø–æ–¥–º–µ–Ω")

    def setup_jobs(
        self, scheduler: AsyncIOScheduler, session_pool, bot: Bot, kpi_session_pool=None
    ):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á –±–∏—Ä–∂–∏."""
        self.logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–¥–∞—á –±–∏—Ä–∂–∏...")

        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á —Å –∏—Ö —Ñ—É–Ω–∫—Ü–∏—è–º–∏
        job_configs = [
            ("expired_offers", self._check_expired_offers),
            ("subscription_matches", self._check_subscription_matches),
            ("upcoming_1hour", self._check_upcoming_exchanges_1hour),
            ("upcoming_1day", self._check_upcoming_exchanges_1day),
            ("payment_notifications", self._check_payment_date_notifications),
            ("immediate_reminders", self._check_immediate_payment_reminders),
            ("daily_payment_reminder", self._check_daily_payment_reminders),
        ]

        for config_key, func in job_configs:
            config = SCHEDULER_CONFIG[config_key]
            job_kwargs = {
                "func": func,
                "args": [session_pool, bot],
                "id": config["id"],
                "name": config["name"],
                "coalesce": True,
                "misfire_grace_time": config["misfire_grace_time"],
                "replace_existing": True,
            }

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            if config.get("trigger") == "cron":
                job_kwargs["trigger"] = "cron"
                job_kwargs["hour"] = config["hour"]
                job_kwargs["minute"] = config["minute"]
                job_kwargs["timezone"] = tz  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É
            else:
                job_kwargs["trigger"] = "interval"
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                if "interval_minutes" in config:
                    job_kwargs["minutes"] = config["interval_minutes"]
                elif "interval_hours" in config:
                    job_kwargs["hours"] = config["interval_hours"]

            scheduler.add_job(**job_kwargs)

    async def _check_expired_offers(self, session_pool, bot: Bot) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–¥–µ–ª–æ–∫.

        Args:
            session_pool: –°–µ—Å—Å–∏—è —Å –ë–î
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        """
        await check_expired_offers(session_pool, bot)

    async def _check_subscription_matches(self, session_pool, bot: Bot) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ–¥–ø–∏—Å–æ–∫ —Å –Ω–æ–≤—ã–º–∏ –æ–±–º–µ–Ω–∞–º–∏.

        Args:
            session_pool: –°–µ—Å—Å–∏—è —Å –ë–î
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        """
        await check_subscription_matches(session_pool, bot)

    async def _check_upcoming_exchanges_1hour(self, session_pool, bot: Bot) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–º–µ–Ω–æ–≤, –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —á–µ—Ä–µ–∑ 1 —á–∞—Å.

        Args:
            session_pool: –°–µ—Å—Å–∏—è —Å –ë–î
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        """
        await check_upcoming_exchanges(session_pool, bot, hours_before=1)

    async def _check_upcoming_exchanges_1day(self, session_pool, bot: Bot) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–º–µ–Ω–æ–≤, –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —á–µ—Ä–µ–∑ 1 –¥–µ–Ω—å.

        Args:
            session_pool: –°–µ—Å—Å–∏—è —Å –ë–î
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        """
        await check_upcoming_exchanges(session_pool, bot, hours_before=24)

    async def _check_payment_date_notifications(self, session_pool, bot: Bot) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—É–ø–∏–≤—à–∏—Ö –¥–∞—Ç –æ–ø–ª–∞—Ç—ã.

        Args:
            session_pool: –°–µ—Å—Å–∏—è —Å –ë–î
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        """
        await check_payment_date_notifications(session_pool, bot)

    async def _check_immediate_payment_reminders(self, session_pool, bot: Bot) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–± immediate –æ–ø–ª–∞—Ç–µ.

        Args:
            session_pool: –°–µ—Å—Å–∏—è —Å –ë–î
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        """
        await check_immediate_payment_reminders(session_pool, bot)

    async def _check_daily_payment_reminders(self, session_pool, bot: Bot) -> None:
        """–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –æ–±–º–µ–Ω–æ–≤ –≤ 12:00.

        Args:
            session_pool: –°–µ—Å—Å–∏—è —Å –ë–î
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        """
        await check_daily_payment_reminders(session_pool, bot)


async def check_expired_offers(session_pool, bot: Bot) -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–∫—Ä—ã—Ç–∏–µ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–¥–µ–ª–æ–∫.

    Args:
        session_pool: –ü—É–ª —Å–µ—Å—Å–∏–π –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    """
    try:
        async with session_pool() as stp_session:
            stp_repo = MainRequestsRepo(stp_session)

            active_exchanges = await stp_repo.exchange.get_active_exchanges(
                include_private=True, limit=200
            )

            if not active_exchanges:
                return

            current_local_time = datetime.now(tz)
            expired_count = 0

            for exchange in active_exchanges:
                try:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                    if exchange.type == "sell":
                        expiration_datetime = exchange.start_time
                    elif exchange.type == "buy":
                        expiration_datetime = exchange.end_time
                    else:
                        continue

                    # –ï—Å–ª–∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –Ω–µ –∑–∞–¥–∞–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    if expiration_datetime is None:
                        continue

                    # –ü—Ä–∏–≤–æ–¥–∏–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–µ
                    expiration_datetime = normalize_timezone(expiration_datetime)

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                    if current_local_time >= expiration_datetime:
                        await stp_repo.exchange.expire_exchange(exchange.id)
                        await notify_expire_offer(bot, stp_repo, exchange)
                        expired_count += 1

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–µ–π —Å–¥–µ–ª–∫–∏ {exchange.id}: {e}")

            if expired_count > 0:
                logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {expired_count} –∏—Å—Ç–µ–∫—à–∏—Ö —Å–¥–µ–ª–æ–∫")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {e}")


async def notify_expire_offer(
    bot: Bot, stp_repo: MainRequestsRepo, exchange: Exchange
) -> None:
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ–∫—à–µ–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–¥–µ–ª–∫–µ.

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        stp_repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π STP
        exchange: –≠–∫–∑–µ–º–ø–ª—è—Ä —Å–¥–µ–ª–∫–∏ —Å –º–æ–¥–µ–ª—å—é Exchange
    """
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Å–¥–µ–ª–∫–∏
        owner_id = exchange.seller_id if exchange.type == "sell" else exchange.buyer_id
        if not owner_id:
            logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω –≤–ª–∞–¥–µ–ª–µ—Ü –¥–ª—è —Å–¥–µ–ª–∫–∏ {exchange.id}")
            return

        owner = await stp_repo.employee.get_users(user_id=owner_id)
        if not owner:
            logger.warning(
                f"–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {owner_id} –¥–ª—è —Å–¥–µ–ª–∫–∏ {exchange.id}"
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–º–µ–Ω–µ –∏ —Å–æ–∑–¥–∞–µ–º deeplink
        exchange_info = await get_exchange_text(
            stp_repo, exchange, user_id=owner.user_id
        )
        deeplink = await create_exchange_deeplink(bot, exchange.id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        time_type = "–Ω–∞—á–∞–ª–∞" if exchange.type == "sell" else "–∫–æ–Ω—Ü–∞"
        message_text = MESSAGES["expired_offer"].format(
            time_type=time_type, exchange_info=exchange_info
        )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        reply_markup = create_expire_keyboard(deeplink, exchange)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        success = await send_message(
            bot=bot, user_id=owner_id, text=message_text, reply_markup=reply_markup
        )

        if success:
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ–∫—à–µ–π —Å–¥–µ–ª–∫–µ {exchange.id}")

    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏—Å—Ç–µ–∫—à–µ–π —Å–¥–µ–ª–∫–µ {exchange.id}: {e}"
        )


async def check_subscription_matches(session_pool, bot: Bot) -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –æ–±–º–µ–Ω–æ–≤ –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏.

    Args:
        session_pool: –ü—É–ª —Å–µ—Å—Å–∏–π –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    """
    try:
        async with session_pool() as stp_session:
            stp_repo = MainRequestsRepo(stp_session)

            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –æ–±–º–µ–Ω—ã (—Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç)
            current_time = datetime.now(tz)
            cutoff_time = current_time - timedelta(
                seconds=TIME_CONSTANTS["subscription_check_window_seconds"]
            )

            # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –ø–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–±–º–µ–Ω—ã, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ cutoff_time
            recent_exchanges = await stp_repo.exchange.get_recent_exchanges(
                created_after=cutoff_time, include_private=False, limit=50
            )

            if not recent_exchanges:
                return

            matches_found = 0

            for exchange in recent_exchanges:
                try:
                    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —ç—Ç–æ–º—É –æ–±–º–µ–Ω—É
                    matching_subscriptions = (
                        await stp_repo.exchange.find_matching_subscriptions(exchange)
                    )

                    for subscription in matching_subscriptions:
                        await notify_subscription_match(
                            bot, stp_repo, subscription, exchange
                        )
                        matches_found += 1

                except Exception as e:
                    logger.error(
                        f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –¥–ª—è –æ–±–º–µ–Ω–∞ {exchange.id}: {e}"
                    )

            if matches_found > 0:
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {matches_found} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ–¥–ø–∏—Å–æ–∫")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ–¥–ø–∏—Å–æ–∫: {e}")


async def notify_subscription_match(
    bot: Bot, stp_repo: MainRequestsRepo, subscription, exchange: Exchange
) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        stp_repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        subscription: –ü–æ–¥–ø–∏—Å–∫–∞
        exchange: –û–±–º–µ–Ω
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await stp_repo.employee.get_users(user_id=subscription.subscriber_id)
        if not user:
            logger.warning(
                f"–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {subscription.subscriber_id} –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ {subscription.id}"
            )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–º–µ–Ω–µ
        exchange_info = await get_exchange_text(
            stp_repo, exchange, user_id=user.user_id
        )

        # –°–æ–∑–¥–∞–µ–º deeplinks
        exchange_deeplink = await create_exchange_deeplink(bot, exchange.id)
        subscription_deeplink = await create_subscription_deeplink(bot, subscription.id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = MESSAGES["subscription_match"].format(
            subscription_name=subscription.name, exchange_info=exchange_info
        )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        reply_markup = create_subscription_keyboard(
            exchange_deeplink, subscription_deeplink
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        success = await send_message(
            bot=bot,
            user_id=subscription.subscriber_id,
            text=message_text,
            reply_markup=reply_markup,
        )

        if success:
            logger.info(
                f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ {subscription.id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {subscription.subscriber_id}"
            )

    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ {subscription.id}: {e}"
        )


async def check_upcoming_exchanges(session_pool, bot: Bot, hours_before: int) -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏—Ö—Å—è –æ–±–º–µ–Ω–∞—Ö.

    Args:
        session_pool: –ü—É–ª —Å–µ—Å—Å–∏–π –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        hours_before: –ó–∞ —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –¥–æ –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    """
    try:
        async with session_pool() as stp_session:
            stp_repo = MainRequestsRepo(stp_session)

            current_local_time = datetime.now(tz)
            target_time = current_local_time + timedelta(hours=hours_before)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            time_window = timedelta(
                minutes=TIME_CONSTANTS["upcoming_notification_window_minutes"]
            )
            target_start = target_time - time_window
            target_end = target_time + time_window

            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥–∞–Ω–Ω—ã–µ –æ–±–º–µ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∏—Å—å
            upcoming_exchanges = await stp_repo.exchange.get_upcoming_sold_exchanges(
                start_after=target_start, start_before=target_end, limit=500
            )

            if not upcoming_exchanges:
                return

            notifications_sent = 0

            for exchange in upcoming_exchanges:
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–±–µ–∏–º —Å—Ç–æ—Ä–æ–Ω–∞–º
                    await notify_upcoming_exchange(
                        bot, stp_repo, exchange, hours_before
                    )
                    notifications_sent += 1

                except Exception as e:
                    logger.error(
                        f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –æ–±–º–µ–Ω–∞ {exchange.id}: {e}"
                    )

            if notifications_sent > 0:
                logger.info(
                    f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏—Ö—Å—è –æ–±–º–µ–Ω–∞—Ö ({hours_before}—á): {notifications_sent}"
                )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏—Ö—Å—è –æ–±–º–µ–Ω–æ–≤ ({hours_before}—á): {e}")


async def notify_upcoming_exchange(
    bot: Bot, stp_repo: MainRequestsRepo, exchange: Exchange, hours_before: int
) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–µ–º—Å—è –æ–±–º–µ–Ω–µ.

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        stp_repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π STP
        exchange: –≠–∫–∑–µ–º–ø–ª—è—Ä —Å–¥–µ–ª–∫–∏
        hours_before: –ó–∞ —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    """
    try:
        # –°–æ–∑–¥–∞–µ–º deeplink –∏ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –≤—Ä–µ–º–µ–Ω–∏
        deeplink = await create_exchange_deeplink(bot, exchange.id)
        time_text, emoji = get_time_text_and_emoji(hours_before)
        reply_markup = create_basic_keyboard(deeplink)

        notifications_sent = 0

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü—É
        if exchange.seller_id:
            seller_exchange_info = await get_exchange_text(
                stp_repo, exchange, user_id=exchange.seller_id
            )

            seller_message = MESSAGES["upcoming_seller"].format(
                emoji=emoji, time_text=time_text, exchange_info=seller_exchange_info
            )

            success = await send_message(
                bot=bot,
                user_id=exchange.seller_id,
                text=seller_message,
                reply_markup=reply_markup,
            )
            if success:
                notifications_sent += 1

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
        if exchange.buyer_id:
            buyer_exchange_info = await get_exchange_text(
                stp_repo, exchange, user_id=exchange.buyer_id
            )

            buyer_message = MESSAGES["upcoming_buyer"].format(
                emoji=emoji, time_text=time_text, exchange_info=buyer_exchange_info
            )

            success = await send_message(
                bot=bot,
                user_id=exchange.buyer_id,
                text=buyer_message,
                reply_markup=reply_markup,
            )
            if success:
                notifications_sent += 1

        if notifications_sent > 0:
            logger.info(
                f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {notifications_sent} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–µ–º—Å—è –æ–±–º–µ–Ω–µ {exchange.id} "
                f"(–∑–∞ {hours_before}—á)"
            )

    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–µ–º—Å—è –æ–±–º–µ–Ω–µ {exchange.id}: {e}"
        )


async def check_payment_date_notifications(session_pool, bot: Bot) -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–∞—Å—Ç—É–ø–∏–≤—à–∏—Ö –¥–∞—Ç–∞—Ö –æ–ø–ª–∞—Ç—ã.

    Args:
        session_pool: –ü—É–ª —Å–µ—Å—Å–∏–π –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    """
    try:
        async with session_pool() as stp_session:
            stp_repo = MainRequestsRepo(stp_session)

            current_local_time = datetime.now(tz)
            today = current_local_time.date()

            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥–∞–Ω–Ω—ã–µ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –æ–±–º–µ–Ω—ã —Å –Ω–∞—Å—Ç—É–ø–∏–≤—à–µ–π –¥–∞—Ç–æ–π –æ–ø–ª–∞—Ç—ã
            exchanges_to_notify = await stp_repo.exchange.get_exchanges_by_payment_date(
                payment_date=today, status="sold", is_paid=False
            )

            if not exchanges_to_notify:
                return

            notifications_sent = 0

            for exchange in exchanges_to_notify:
                try:
                    await notify_payment_date_reached(bot, stp_repo, exchange)
                    notifications_sent += 1
                except Exception as e:
                    logger.error(
                        f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ –¥–ª—è –æ–±–º–µ–Ω–∞ {exchange.id}: {e}"
                    )

            if notifications_sent > 0:
                logger.info(
                    f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {notifications_sent} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–∞—Å—Ç—É–ø–∏–≤—à–∏—Ö –¥–∞—Ç–∞—Ö –æ–ø–ª–∞—Ç—ã"
                )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –¥–∞—Ç–∞—Ö –æ–ø–ª–∞—Ç—ã: {e}")


async def check_immediate_payment_reminders(session_pool, bot: Bot) -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–± immediate –æ–ø–ª–∞—Ç–µ.

    Args:
        session_pool: –ü—É–ª —Å–µ—Å—Å–∏–π –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    """
    try:
        async with session_pool() as stp_session:
            stp_repo = MainRequestsRepo(stp_session)

            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥–∞–Ω–Ω—ã–µ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –æ–±–º–µ–Ω—ã —Å immediate –æ–ø–ª–∞—Ç–æ–π
            exchanges_to_remind = (
                await stp_repo.exchange.get_immediate_unpaid_exchanges(
                    status="sold", is_paid=False, payment_type="immediate"
                )
            )

            if not exchanges_to_remind:
                return

            reminders_sent = 0

            for exchange in exchanges_to_remind:
                try:
                    await notify_immediate_payment_reminder(bot, stp_repo, exchange)
                    reminders_sent += 1
                except Exception as e:
                    logger.error(
                        f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ –¥–ª—è –æ–±–º–µ–Ω–∞ {exchange.id}: {e}"
                    )

            if reminders_sent > 0:
                logger.info(
                    f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {reminders_sent} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–± immediate –æ–ø–ª–∞—Ç–µ"
                )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–± immediate –æ–ø–ª–∞—Ç–µ: {e}")


async def notify_payment_date_reached(
    bot: Bot, stp_repo: MainRequestsRepo, exchange: Exchange
) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—Å—Ç—É–ø–∏–≤—à–µ–π –¥–∞—Ç–µ –æ–ø–ª–∞—Ç—ã.

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        stp_repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π STP
        exchange: –≠–∫–∑–µ–º–ø–ª—è—Ä —Å–¥–µ–ª–∫–∏
    """
    try:
        deeplink = await create_exchange_deeplink(bot, exchange.id)
        notifications_sent = 0

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–ø–ª–∞—Ç—ã
        if exchange.buyer_id:
            buyer_exchange_info = await get_exchange_text(
                stp_repo, exchange, user_id=exchange.buyer_id
            )

            buyer_message = MESSAGES["payment_date_buyer"].format(
                exchange_info=buyer_exchange_info
            )

            success = await send_message(
                bot=bot,
                user_id=exchange.buyer_id,
                text=buyer_message,
                reply_markup=create_payment_keyboard(deeplink),
            )
            if success:
                notifications_sent += 1

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞ –æ —Ç–æ–º, —á—Ç–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É
        if exchange.seller_id:
            seller_exchange_info = await get_exchange_text(
                stp_repo, exchange, user_id=exchange.seller_id
            )

            seller_message = MESSAGES["payment_date_seller"].format(
                exchange_info=seller_exchange_info
            )

            success = await send_message(
                bot=bot,
                user_id=exchange.seller_id,
                text=seller_message,
                reply_markup=create_basic_keyboard(deeplink),
            )
            if success:
                notifications_sent += 1

        if notifications_sent > 0:
            logger.info(
                f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {notifications_sent} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –¥–∞—Ç–µ –æ–ø–ª–∞—Ç—ã –¥–ª—è –æ–±–º–µ–Ω–∞ {exchange.id}"
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–∞—Ç–µ –æ–ø–ª–∞—Ç—ã {exchange.id}: {e}")


async def notify_immediate_payment_reminder(
    bot: Bot, stp_repo: MainRequestsRepo, exchange: Exchange
) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± immediate –æ–ø–ª–∞—Ç–µ.

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        stp_repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π STP
        exchange: –≠–∫–∑–µ–º–ø–ª—è—Ä —Å–¥–µ–ª–∫–∏
    """
    try:
        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–ø–ª–∞—Ç—ã
        if not exchange.buyer_id:
            logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –¥–ª—è –æ–±–º–µ–Ω–∞ {exchange.id}")
            return

        buyer_exchange_info = await get_exchange_text(
            stp_repo, exchange, user_id=exchange.buyer_id
        )

        deeplink = await create_exchange_deeplink(bot, exchange.id)

        message = MESSAGES["immediate_reminder"].format(
            exchange_info=buyer_exchange_info
        )

        success = await send_message(
            bot=bot,
            user_id=exchange.buyer_id,
            text=message,
            reply_markup=create_payment_keyboard(deeplink),
        )

        if success:
            logger.info(
                f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± immediate –æ–ø–ª–∞—Ç–µ –¥–ª—è –æ–±–º–µ–Ω–∞ {exchange.id}"
            )

    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± immediate –æ–ø–ª–∞—Ç–µ {exchange.id}: {e}"
        )


async def check_daily_payment_reminders(session_pool, bot: Bot) -> None:
    """–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–± –æ–ø–ª–∞—Ç–µ –≤ 12:00.

    Args:
        session_pool: –ü—É–ª —Å–µ—Å—Å–∏–π –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    """
    try:
        async with session_pool() as stp_session:
            stp_repo = MainRequestsRepo(stp_session)

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–¥–∞–Ω–Ω—ã–º–∏ –æ–±–º–µ–Ω–∞–º–∏
            users_with_unpaid_exchanges = (
                await stp_repo.exchange.get_users_with_unpaid_exchanges(
                    status="sold", is_paid=False
                )
            )

            if not users_with_unpaid_exchanges:
                return

            notifications_sent = 0

            for user_data in users_with_unpaid_exchanges:
                try:
                    await notify_daily_payment_reminder(bot, stp_repo, user_data)
                    notifications_sent += 1
                except Exception as e:
                    logger.error(
                        f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_data.get('user_id')}: {e}"
                    )

            if notifications_sent > 0:
                logger.info(
                    f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {notifications_sent} –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–± –æ–ø–ª–∞—Ç–µ"
                )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–± –æ–ø–ª–∞—Ç–µ: {e}")


async def notify_daily_payment_reminder(
    bot: Bot, stp_repo: MainRequestsRepo, user_data: dict
) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        stp_repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π STP
        user_data: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –µ–≥–æ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–º–∏ –æ–±–º–µ–Ω–∞–º–∏
    """
    try:
        user_id = user_data["user_id"]
        exchanges = user_data["exchanges"]

        if not exchanges:
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –æ–±–º–µ–Ω–∞—Ö
        exchanges_info_list = []
        for exchange in exchanges:
            exchange_info = await get_exchange_text(stp_repo, exchange, user_id=user_id)
            exchanges_info_list.append(f"‚Ä¢ {exchange_info}")

        exchanges_info = "\n\n".join(exchanges_info_list)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = MESSAGES["daily_payment_reminder"].format(
            exchanges_info=exchanges_info
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, —Ç–∞–∫ –∫–∞–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–Ω–æ–≥–æ –æ–±–º–µ–Ω–æ–≤)
        success = await send_message(
            bot=bot, user_id=user_id, text=message, disable_notification=False
        )

        if success:
            logger.info(
                f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ {len(exchanges)} –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –æ–±–º–µ–Ω–∞—Ö"
            )

    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_data.get('user_id')}: {e}"
        )
