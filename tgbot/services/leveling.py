"""–°–µ—Ä–≤–∏—Å —Ä–∞—Å—á–µ—Ç–∞ —É—Ä–æ–≤–Ω–µ–π."""

from typing import Tuple


class LevelingSystem:
    """–°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π, –æ—Å–Ω–æ–≤–∞–Ω–Ω–∞—è –Ω–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤, —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É–ª —É—Ä–æ–≤–Ω–µ–π: (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å, –∫–æ–ª-–≤–æ –±–∞–ª–ª–æ–≤ –∑–∞ —É—Ä–æ–≤–µ–Ω—å)
    milestones = [
        (0, 100),  # –£—Ä–æ–≤–Ω–∏ 1-10: 100 –±–∞–ª–ª–æ–≤ –∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å
        (10, 150),  # –£—Ä–æ–≤–Ω–∏ 11-20: 150 –±–∞–ª–ª–æ–≤ –∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å
        (20, 200),  # –£—Ä–æ–≤–Ω–∏ 21-30: 200 –±–∞–ª–ª–æ–≤ –∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å
        (30, 300),  # –£—Ä–æ–≤–Ω–∏ 31+: 300 –±–∞–ª–ª–æ–≤ –∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å
        (40, 400),  # –£—Ä–æ–≤–Ω–∏ 41+: 400 –±–∞–ª–ª–æ–≤ –∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å
        (50, 500),  # –£—Ä–æ–≤–Ω–∏ 51+: 500 –±–∞–ª–ª–æ–≤ –∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å
        (60, 600),  # –£—Ä–æ–≤–Ω–∏ 61+: 600 –±–∞–ª–ª–æ–≤ –∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å
        (70, 700),  # –£—Ä–æ–≤–Ω–∏ 71+: 700 –±–∞–ª–ª–æ–≤ –∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å
        (80, 800),  # –£—Ä–æ–≤–Ω–∏ 81+: 800 –±–∞–ª–ª–æ–≤ –∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å
        (90, 900),  # –£—Ä–æ–≤–Ω–∏ 91+: 900 –±–∞–ª–ª–æ–≤ –∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å
    ]

    @classmethod
    def calculate_level(cls, achievements_sum: int) -> int:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Args:
            achievements_sum: –û–±—â–∞—è —Å—É–º–º–∞ –±–∞–ª–ª–æ–≤ –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è

        Returns:
            –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        if achievements_sum <= 0:
            return 0

        level = 0
        remaining_points = achievements_sum

        for i, (min_level, points_per_level) in enumerate(cls.milestones):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –µ—â–µ –Ω–µ –¥–æ—à–ª–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç—Ç–∞–ø–∞
            if level < min_level:
                continue

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ —É—Ä–æ–≤–Ω–µ–π –º—ã –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –Ω–∞ —Ç–µ–∫—É—â–µ–º —ç—Ç–∞–ø–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if i + 1 < len(cls.milestones):
                # –ù–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç—Ç–∞–ø - –æ–≥—Ä–∞–Ω–∏—á–µ–Ω —Å–ª–µ–¥—É—é—â–∏–º —ç—Ç–∞–ø–æ–º
                next_min_level = cls.milestones[i + 1][0]
                max_levels_in_range = next_min_level - level
            else:
                # –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç—Ç–∞–ø - –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ —É—Ä–æ–≤–Ω–∏
                max_levels_in_range = float("inf")

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Ä–æ–≤–Ω–∏, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ
            levels_gained = min(
                remaining_points // points_per_level, max_levels_in_range
            )
            level += int(levels_gained)
            remaining_points -= int(levels_gained) * points_per_level

            # –ï—Å–ª–∏ –º—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–π—Ç–∏ –µ—â–µ –æ–¥–∏–Ω —É—Ä–æ–≤–µ–Ω—å –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è.
            if remaining_points < points_per_level:
                break

        return level

    @classmethod
    def get_level_progress(cls, achievements_sum: int) -> Tuple[int, int, int, int]:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Args:
            achievements_sum: –û–±—â–∞—è —Å—É–º–º–∞ –±–∞–ª–ª–æ–≤ –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è

        Returns:
            Tuple of (current_level, current_level_points, next_level_requirement, points_to_next_level)
            - current_level: –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            - current_level_points: –û—á–∫–∏, –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
            - next_level_requirement: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
            - points_to_next_level: –û—á–∫–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
        """
        current_level = cls.calculate_level(achievements_sum)

        if current_level == 0:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –µ—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å 0
            return 0, achievements_sum, 100, max(0, 100 - achievements_sum)

        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª-–≤–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
        current_level_total_points = cls._get_total_points_for_level(current_level)

        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª-–≤–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
        next_level_total_points = cls._get_total_points_for_level(current_level + 1)

        # –ë–∞–ª–ª—ã, –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø (—Å–≤–µ—Ä—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è)
        current_level_points = achievements_sum - current_level_total_points

        # –ë–∞–ª–ª—ã, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
        next_level_requirement = next_level_total_points - current_level_total_points
        points_to_next_level = max(0, next_level_total_points - achievements_sum)

        return (
            current_level,
            current_level_points,
            next_level_requirement,
            points_to_next_level,
        )

    @classmethod
    def _get_total_points_for_level(cls, target_level: int) -> int:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è.

        Args:
            target_level: –¶–µ–ª–µ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –∫–æ–ª-–≤–∞ –±–∞–ª–ª–æ–≤

        Returns:
            –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è —Å —É—Ä–æ–≤–Ω—è 0
        """
        if target_level <= 0:
            return 0

        total_points = 0
        current_level = 0

        for i, (min_level, points_per_level) in enumerate(cls.milestones):
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —É—Ä–æ–≤–Ω–µ–π –¥–ª—è —ç—Ç–∞–ø–∞
            if i + 1 < len(cls.milestones):
                next_min_level = cls.milestones[i + 1][0]
                max_level_in_range = next_min_level - 1
            else:
                max_level_in_range = float("inf")

            # –ï—Å–ª–∏ —Ü–µ–ª–µ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ —ç—Ç–∞–ø–∞
            if target_level <= max_level_in_range:
                # –î–æ–±–∞–≤–∏—Ç—å –±–∞–ª–ª—ã –∑–∞ —É—Ä–æ–≤–Ω–∏ –æ—Ç current_level –¥–æ target_level
                levels_to_add = target_level - max(current_level, min_level)
                total_points += levels_to_add * points_per_level
                break
            else:
                # –î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ –±–∞–ª–ª—ã –¥–ª—è —ç—Ç–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —ç—Ç–∞–ø–∞
                levels_in_range = max_level_in_range + 1 - max(current_level, min_level)
                total_points += levels_in_range * points_per_level
                current_level = max_level_in_range + 1

        return total_points

    @classmethod
    def get_level_info_text(cls, achievements_sum: int, user_balance: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç, –æ—Ç–æ–±—Ä–∞–∂–∞—é—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å —É—Ä–æ–≤–Ω—è –¥–ª—è –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Args:
            achievements_sum: –û–±—â–∞—è —Å—É–º–º–∞ –±–∞–ª–ª–æ–≤ –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            user_balance: –¢–µ–∫—É—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å

        Returns:
            –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Ä–æ–≤–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        current_level, current_points, next_requirement, points_needed = (
            cls.get_level_progress(achievements_sum)
        )

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —É—Ä–æ–≤–Ω—è
        if next_requirement > 0:
            progress_percent = int((current_points / next_requirement) * 100)
            progress_bar = cls._create_progress_bar(progress_percent)
        else:
            progress_percent = 100
            progress_bar = "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ç–∞–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        milestone_info = cls._get_milestone_info(current_level)

        level_text = f"""<b>‚öîÔ∏è –¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å:</b> {current_level}
<b>‚ú® –ë–∞–ª–∞–Ω—Å:</b> {user_balance} –±–∞–ª–ª–æ–≤

<blockquote><b>üìà –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ {current_level + 1} —É—Ä–æ–≤–Ω—è</b>
{progress_bar} {progress_percent}%
{current_points}/{next_requirement} –±–∞–ª–ª–æ–≤

<b>üíé –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è:</b> {points_needed} –±–∞–ª–ª–æ–≤
{milestone_info}</blockquote>"""

        return level_text

    @classmethod
    def _create_progress_bar(cls, percent: int, length: int = 12) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º —É—Ä–æ–≤–Ω—è.

        Args:
            percent: –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            length: –î–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞

        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä–æ–º
        """
        filled = int((percent / 100) * length)
        empty = length - filled
        return "‚ñà" * filled + "‚ñë" * empty

    @classmethod
    def _get_milestone_info(cls, current_level: int) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫ –∫–∞–∫–æ–º—É —ç—Ç–∞–ø—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å.

        Args:
            current_level: –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫ –∫–∞–∫–æ–º—É —ç—Ç–∞–ø—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è —É—Ä–æ–≤–µ–Ω—å
        for i, (min_level, points_per_level) in enumerate(cls.milestones):
            if i + 1 < len(cls.milestones):
                next_min_level = cls.milestones[i + 1][0]
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ —ç—Ç–∞–ø–∞
                if min_level <= current_level < next_min_level:
                    return f"<i>–≠—Ç–∞–ø: {min_level + 1}-{next_min_level} —É—Ä–æ–≤–Ω–∏ ({points_per_level} –æ—á–∫–æ–≤/—É—Ä–æ–≤–µ–Ω—å)</i>"
            else:
                # –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç—Ç–∞–ø ‚Äî –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å >= min_level
                if current_level >= min_level:
                    return f"<i>–≠—Ç–∞–ø: {min_level + 1}+ —É—Ä–æ–≤–Ω–∏ ({points_per_level} –æ—á–∫–æ–≤/—É—Ä–æ–≤–µ–Ω—å)</i>"

        # –§–æ–ª–ª–±–µ–∫ - –µ—Å–ª–∏ –Ω–µ —É–¥–∞—Å—Ç—Å—è —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø
        return f"<i>–≠—Ç–∞–ø: 1-10 —É—Ä–æ–≤–Ω–∏ ({cls.milestones[0][1]} –æ—á–∫–æ–≤/—É—Ä–æ–≤–µ–Ω—å)</i>"
