"""–ó–∞–ø—É—Å–∫ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤."""

import logging

from aiogram import F, Router
from aiogram.filters import CommandStart
from aiogram.types import Message
from aiogram_dialog import DialogManager, StartMode
from aiogram_dialog.api.exceptions import NoContextError
from stp_database import Employee

from tgbot.dialogs.states.user import UserSG
from tgbot.keyboards.auth import auth_kb
from tgbot.services.event_logger import EventLogger

logger = logging.getLogger(__name__)

user_router = Router()
user_router.message.filter(F.chat.type == "private")
user_router.callback_query.filter(F.message.chat.type == "private")


@user_router.message(CommandStart())
async def user_start(
    message: Message,
    user: Employee,
    dialog_manager: DialogManager,
    event_logger: EventLogger | None,
) -> None:
    """–ó–∞–ø—É—Å–∫/—Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –∏ –¥–µ–∂—É—Ä–Ω—ã—Ö.

    –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –≤ —Å–ª—É—á–∞–µ –µ–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user: –≠–∫–∑–µ–º–ø–ª—è—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–æ–¥–µ–ª—å—é Employee
        dialog_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∏–∞–ª–æ–≥–∞
        event_logger: –õ–æ–≥–≥–µ—Ä —Å–æ–±—ã—Ç–∏–π
    """
    if not user:
        await message.answer(
            """üëã –ü—Ä–∏–≤–µ—Ç

–Ø - –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –°–¢–ü

–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏""",
            reply_markup=auth_kb(),
        )
        return

    if event_logger:
        await event_logger.log_bot_start(user.user_id)

    try:
        await dialog_manager.done()
    except NoContextError:
        pass

    await dialog_manager.start(UserSG.menu, mode=StartMode.RESET_STACK)
