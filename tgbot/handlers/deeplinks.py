import logging

from aiogram import Router
from aiogram.filters import CommandStart
from aiogram.types import Message
from aiogram_dialog import DialogManager, StartMode
from aiogram_dialog.api.exceptions import NoContextError
from stp_database import Employee, MainRequestsRepo

from tgbot.dialogs.states.common.exchanges import Exchanges, ExchangesSub
from tgbot.dialogs.states.user import UserSG
from tgbot.keyboards.auth import auth_kb
from tgbot.services.event_logger import EventLogger

logger = logging.getLogger(__name__)


deeplink_router = Router()


@deeplink_router.message(CommandStart(deep_link=True))
async def start_deeplink(
    message: Message,
    user: Employee,
    stp_repo: MainRequestsRepo,
    dialog_manager: DialogManager,
    event_logger: EventLogger,
) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ deep link –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞.

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user: –≠–∫–∑–µ–º–ø–ª—è—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–æ–¥–µ–ª—å—é Employee
        dialog_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∏–∞–ª–æ–≥–∞
        event_logger: –õ–æ–≥–≥–µ—Ä —Å–æ–±—ã—Ç–∏–π
    """
    if not user:
        await message.answer(
            """üëã –ü—Ä–∏–≤–µ—Ç

–Ø - –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –°–¢–ü

–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏""",
            reply_markup=auth_kb(),
        )
        return

    await event_logger.log_bot_start(user.user_id)

    try:
        await dialog_manager.done()
    except NoContextError:
        pass

    # –ò–∑–≤–ª–µ–∫–∞–µ–º payload –∏–∑ –∫–æ–º–∞–Ω–¥—ã /start
    command_args = message.text.split(maxsplit=1)
    if len(command_args) > 1:
        from aiogram.utils.deep_linking import decode_payload

        from tgbot.dialogs.states.common.groups import Groups

        payload = decode_payload(command_args[1])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã
        if payload.startswith("group_"):
            group_id = int(payload.split("_", 1)[1])
            # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≥—Ä—É–ø–ø—ã
            await dialog_manager.start(
                Groups.group_details,
                mode=StartMode.RESET_STACK,
                data={"group_id": group_id},
            )
            return
        elif payload.startswith("exchange_"):
            subscription_id = int(payload.split("_", 1)[1])
            exchange = await stp_repo.exchange.get_exchange_by_id(subscription_id)

            if not exchange:
                await dialog_manager.start(UserSG.menu, mode=StartMode.RESET_STACK)
            else:
                if (
                    exchange.seller_id == user.user_id
                    or exchange.buyer_id == user.user_id
                ):
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å–≤–æ–µ–π –ø–æ–¥–º–µ–Ω—ã
                    await dialog_manager.start(
                        Exchanges.my_detail,
                        mode=StartMode.RESET_STACK,
                        data={"exchange_id": subscription_id},
                    )
                    return
                if exchange.status != "active":
                    await dialog_manager.start(UserSG.menu, mode=StartMode.RESET_STACK)
                    return
                if exchange.type == "sell":
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø—Ä–æ–¥–∞–∂
                    await dialog_manager.start(
                        Exchanges.buy_detail,
                        mode=StartMode.RESET_STACK,
                        data={"exchange_id": subscription_id},
                    )
                else:
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø–æ–∫—É–ø–æ–∫
                    await dialog_manager.start(
                        Exchanges.sell_detail,
                        mode=StartMode.RESET_STACK,
                        data={"exchange_id": subscription_id},
                    )
            return
        elif payload.startswith("subscription_"):
            subscription_id = int(payload.split("_", 1)[1])
            subscription = await stp_repo.exchange.get_subscription_by_id(
                subscription_id
            )

            if not subscription:
                await dialog_manager.start(UserSG.menu, mode=StartMode.RESET_STACK)
                return

            # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø–æ–¥–ø–∏—Å–∫–∏
            await dialog_manager.start(
                ExchangesSub.sub_detail,
                mode=StartMode.RESET_STACK,
                data={"subscription_id": subscription_id},
            )
            return

    # –ï—Å–ª–∏ payload –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—ã—á–Ω–æ–µ –º–µ–Ω—é
    await dialog_manager.start(UserSG.menu, mode=StartMode.RESET_STACK)
