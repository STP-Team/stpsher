import logging

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import Message
from stp_database import Employee, MainRequestsRepo

from tgbot.misc.helpers import format_fullname, get_role

logger = logging.getLogger(__name__)

group_whois_router = Router()
group_whois_router.message.filter(F.chat.type.in_(("group", "supergroup")))


def create_user_info_message(user: Employee, user_head: Employee = None) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ inline search)"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –∏ —ç–º–æ–¥–∑–∏
    role_info = get_role(user.role)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    message_parts = [f"<b>{role_info['emoji']} {user.fullname}</b>", ""]

    if user.position and user.division:
        message_parts.append(f"<b>üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {user.position} {user.division}")
    if user.head:
        if user_head and user_head.username:
            message_parts.append(
                f"<b>üëë –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å:</b> {
                    format_fullname(
                        user_head.fullname,
                        True,
                        True,
                        user_head.username,
                        user_head.user_id,
                    )
                }"
            )
        else:
            message_parts.append(f"<b>üëë –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å:</b> {user.head}")

    message_parts.append("")

    # –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if user.username:
        message_parts.append(f"<b>üì± Telegram:</b> @{user.username}")
    if user.email:
        message_parts.append(f"<b>üìß Email:</b> {user.email}")

    message_parts.append(f"\nüõ°Ô∏è <b> –£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞:</b> {get_role(user.role)['name']}")

    return "\n".join(message_parts)


@group_whois_router.message(Command("whois"))
async def whois_command(message: Message, user: Employee, stp_repo: MainRequestsRepo):
    """–ö–æ–º–∞–Ω–¥–∞ /whois –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not user:
        await message.reply(
            "‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã /whois –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ"
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not message.reply_to_message:
        await message.reply(
            """<b>‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /whois</b>

<b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>
–û—Ç–≤–µ—Ç—å –∫–æ–º–∞–Ω–¥–æ–π <code>/whois</code> –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å

<b>–ü—Ä–∏–º–µ—Ä:</b>
1. –ù–∞–π–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω—É–∂–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
2. –û—Ç–≤–µ—Ç—å –Ω–∞ –Ω–µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π <code>/whois</code>
3. –ü–æ–ª—É—á–∏ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ

<b>üí° –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞:</b>
–ò—Å–ø–æ–ª—å–∑—É–π inline-–ø–æ–∏—Å–∫: <code>@stpsher_bot –ò–≤–∞–Ω–æ–≤</code>"""
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ replied —Å–æ–æ–±—â–µ–Ω–∏—è
    replied_user_id = message.reply_to_message.from_user.id

    try:
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        target_user = await stp_repo.employee.get_users(user_id=replied_user_id)

        if not target_user:
            await message.reply(
                f"""<b>‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω</b>

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID <code>{replied_user_id}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ

<b>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</b>
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ –±–æ—Ç–µ
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º –°–¢–ü
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã

<b>üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞:</b>
–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏—Å–∫–æ–º–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ @stpsher_bot"""
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        user_head = None
        if target_user.head:
            user_head = await stp_repo.employee.get_users(fullname=target_user.head)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info_message = create_user_info_message(target_user, user_head)

        await message.reply(user_info_message)

        # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        logger.info(
            f"[WHOIS] {user.fullname} ({message.from_user.id}) –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ {target_user.fullname} ({target_user.user_id})"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /whois: {e}")
        await message.reply(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /whois —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º (–ø–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏)
@group_whois_router.message(Command("whois", magic=F.args))
async def whois_with_args(message: Message, user: Employee, stp_repo: MainRequestsRepo):
    """–ö–æ–º–∞–Ω–¥–∞ /whois —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∏–º–µ–Ω–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not user:
        await message.reply(
            "‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã /whois –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ"
        )
        return

    search_query = message.text.split(maxsplit=1)[1].strip()

    if len(search_query) < 2:
        await message.reply("‚ùå –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞)")
        return

    try:
        # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é –§–ò–û
        found_users = await stp_repo.employee.get_users_by_fio_parts(
            search_query, limit=10
        )

        if not found_users:
            await message.reply(
                f"""<b>‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>

–ü–æ –∑–∞–ø—Ä–æ—Å—É "<code>{search_query}</code>" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.

<b>üí° –ü–æ–ø—Ä–æ–±—É–π:</b>
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å –∏–º–µ–Ω–∏ –∏–ª–∏ —Ñ–∞–º–∏–ª–∏–∏
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å inline-–ø–æ–∏—Å–∫: <code>@stpsher_bot {search_query}</code>"""
            )
            return

        # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if len(found_users) == 1:
            target_user = found_users[0]

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ
            user_head = None
            if target_user.head:
                user_head = await stp_repo.employee.get_users(fullname=target_user.head)

            user_info_message = create_user_info_message(target_user, user_head)
            await message.reply(user_info_message)

            # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
            logger.info(
                f"[WHOIS] {user.fullname} ({message.from_user.id}) –Ω–∞—à–µ–ª –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_query}': {target_user.fullname}"
            )
            return

        # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (—Å–Ω–∞—á–∞–ª–∞ —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è)
        sorted_users = sorted(
            found_users,
            key=lambda u: (
                search_query.lower() not in u.fullname.lower(),
                u.fullname,
            ),
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_list = []
        for idx, found_user in enumerate(sorted_users, 1):
            role_info = get_role(found_user.role)
            user_entry = f"{idx}. <b>{role_info['emoji']} {found_user.fullname}</b>"

            if found_user.position and found_user.division:
                user_entry += f"\n   üíº {found_user.position} {found_user.division}"

            if found_user.username:
                user_entry += f"\n   üì± @{found_user.username}"

            user_list.append(user_entry)

        users_text = "\n\n".join(user_list)

        await message.reply(
            f"""<b>üîç –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(sorted_users)}</b>

–ü–æ –∑–∞–ø—Ä–æ—Å—É "<code>{search_query}</code>":

{users_text}

<b>üí° –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:</b>
‚Ä¢ –û—Ç–≤–µ—Ç—å—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π <code>/whois</code> –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω—É–∂–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ inline-–ø–æ–∏—Å–∫: <code>@stpsher_bot {search_query}</code>"""
        )

        # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        logger.info(
            f"[WHOIS] {user.fullname} ({message.from_user.id}) –Ω–∞—à–µ–ª {len(sorted_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_query}'"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /whois: {e}")
        await message.reply(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


# –ï—Å–ª–∏ —Å–æ–∑–¥–∞–µ—Ç–µ –Ω–æ–≤—ã–π —Ñ–∞–π–ª, —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Ä–æ—É—Ç–µ—Ä
__all__ = ["group_whois_router"]
