import logging

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import (
    ChatMemberAdministrator,
    ChatMemberOwner,
    Message,
)
from stp_database import Employee, MainRequestsRepo

from tgbot.filters.role import DutyFilter, MultiRoleFilter, SpecialistFilter
from tgbot.misc.helpers import format_fullname
from tgbot.services.leveling import LevelingSystem

logger = logging.getLogger(__name__)

group_user_router = Router()
group_user_router.message.filter(F.chat.type.in_(("group", "supergroup")))


@group_user_router.message(Command("admins"))
async def admins_cmd(message: Message, user: Employee, stp_repo: MainRequestsRepo):
    """/admins –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≥—Ä—É–ø–ø—ã"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —á–∞—Ç–∞
        chat_administrators = await message.bot.get_chat_administrators(message.chat.id)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        admin_list = []
        owner = None

        for admin in chat_administrators:
            user_info = admin.user

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            db_user = await stp_repo.employee.get_users(user_id=user_info.id)
            if db_user:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –≤ –ë–î, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î —Å —Å—Å—ã–ª–∫–æ–π
                display_name = format_fullname(
                    db_user.fullname, True, True, db_user.username, db_user.user_id
                )
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –≤ –ë–î, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Telegram
                display_name = (
                    f"@{user_info.username}"
                    if user_info.username
                    else user_info.full_name
                )

            if isinstance(admin, ChatMemberOwner):
                owner = display_name
            elif isinstance(admin, ChatMemberAdministrator):
                admin_list.append(display_name)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_parts = ["<b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≥—Ä—É–ø–ø—ã:</b>"]

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
        if owner:
            message_parts.append(f"- {owner}, –≤–ª–∞–¥–µ–ª–µ—Ü")

        # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        for admin_name in admin_list:
            message_parts.append(f"- {admin_name}")

        # –ï—Å–ª–∏ –Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        if not admin_list and not owner:
            message_parts.append("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        response_text = "\n".join(message_parts)

        await message.reply(response_text)

        # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        logger.info(
            f"[/admins] {user.fullname} ({message.from_user.id}) –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≥—Ä—É–ø–ø—ã {message.chat.id}"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {e}")
        await message.reply(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤. –í–æ–∑–º–æ–∂–Ω–æ, —É –±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤."
        )


@group_user_router.message(
    Command("balance"), MultiRoleFilter(SpecialistFilter(), DutyFilter())
)
async def balance_cmd(message: Message, user: Employee, stp_repo: MainRequestsRepo):
    """/balance –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞"""
    try:
        user_balance = await stp_repo.transaction.get_user_balance(user_id=user.user_id)
        achievements_sum = await stp_repo.transaction.get_user_achievements_sum(
            user_id=user.user_id
        )
        level_info_text = LevelingSystem.get_level_info_text(
            achievements_sum, user_balance
        )

        await message.reply(level_info_text)

        # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        logger.info(
            f"[/balance] {user.fullname} ({message.from_user.id}) –∑–∞–ø—Ä–æ—Å–∏–ª —Å–≤–æ–π –±–∞–ª–∞–Ω—Å"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞")


@group_user_router.message(Command("top"))
async def top_cmd(message: Message, user: Employee, stp_repo: MainRequestsRepo):
    """/top –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –≥—Ä—É–ø–ø—ã"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã –∏–∑ –±–∞–∑—ã
        group_members_data = await stp_repo.group_member.get_group_members(
            message.chat.id
        )

        if not group_members_data:
            await message.reply(
                "üéñÔ∏è <b>–†–µ–π—Ç–∏–Ω–≥ –≥—Ä—É–ø–ø—ã –ø–æ –±–∞–ª–ª–∞–º</b>\n\n<i>–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –±–∞–∑–µ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã</i>"
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö –∏ –∏—Ö –±–∞–ª–∞–Ω—Å–∞—Ö
        balance_data = []

        for member_data in group_members_data:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ –ø–æ member_id
            employee = await stp_repo.employee.get_users(user_id=member_data.member_id)
            if employee and employee.user_id:
                balance = await stp_repo.transaction.get_user_balance(employee.user_id)
                balance_data.append({"employee": employee, "balance": balance})

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –±–∞–ª–∞–Ω—Å—É (–±–æ–ª—å—à–µ = –ª—É—á—à–µ)
        balance_data.sort(key=lambda x: x["balance"], reverse=True)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = "üéñÔ∏è <b>–†–µ–π—Ç–∏–Ω–≥ –≥—Ä—É–ø–ø—ã –ø–æ –±–∞–ª–ª–∞–º</b>\n\n"

        if not balance_data:
            message_text += "<i>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –±–∞–ª–∞–Ω—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</i>"
        else:
            for i, data in enumerate(balance_data, 1):
                employee = data["employee"]
                balance = data["balance"]

                # –≠–º–æ–¥–∑–∏ –¥–ª—è –ø–æ–∑–∏—Ü–∏–π
                if i == 1:
                    position_emoji = "ü•á"
                elif i == 2:
                    position_emoji = "ü•à"
                elif i == 3:
                    position_emoji = "ü•â"
                else:
                    position_emoji = f"{i}."

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Ä–µ–π—Ç–∏–Ω–≥–∞
                employee_link = format_fullname(
                    employee.fullname, True, True, employee.username, employee.user_id
                )

                message_text += f"{position_emoji} <b>{employee_link}</b>\n"
                message_text += f"{balance} –±–∞–ª–ª–æ–≤\n"

        await message.reply(message_text)

        # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        logger.info(
            f"[/top] {user.fullname} ({message.from_user.id}) –∑–∞–ø—Ä–æ—Å–∏–ª —Ä–µ–π—Ç–∏–Ω–≥ –≥—Ä—É–ø–ø—ã {message.chat.id}"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞ –≥—Ä—É–ø–ø—ã: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞ –≥—Ä—É–ø–ø—ã")
