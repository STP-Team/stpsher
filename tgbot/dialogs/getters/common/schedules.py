"""–ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –≥—Ä–∞—Ñ–∏–∫–æ–≤."""

from datetime import datetime
from typing import Any, Dict

from aiogram_dialog import DialogManager
from stp_database import Employee, MainRequestsRepo

from tgbot.misc.dicts import months_emojis
from tgbot.services.files_processing.formatters import (
    get_current_date,
    get_current_month,
)
from tgbot.services.files_processing.schedule_handlers import schedule_service


async def user_schedule_getter(
    user: Employee, stp_repo: MainRequestsRepo, dialog_manager: DialogManager, **_kwargs
) -> Dict[str, Any]:
    """–ì–µ—Ç—Ç–µ—Ä –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ—Å—è—Ü–∞–º –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.

    Args:
        user: –≠–∫–∑–µ–º–ø–ª—è—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–æ–¥–µ–ª—å—é Employee
        stp_repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π STP
        dialog_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∏–∞–ª–æ–≥–∞

    Returns:
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–º–µ–Ω—ã –º–µ—Å—è—Ü–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    """
    # Get month from dialog_data or use current month as default
    current_month = dialog_manager.dialog_data.get("current_month", get_current_month())

    month_emoji = months_emojis.get(current_month.lower(), "üìÖ")

    selected_mode = dialog_manager.find("schedule_mode").get_checked()
    is_detailed_mode = selected_mode == "detailed"
    button_text = "üìã –ö—Ä–∞—Ç–∫–æ" if is_detailed_mode else "üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ"

    mode_options = [
        ("compact", "–ö—Ä–∞—Ç–∫–æ"),
        ("detailed", "–î–µ—Ç–∞–ª—å–Ω–æ"),
    ]

    schedule_text = await schedule_service.get_user_schedule_response(
        user=user, month=current_month, compact=not is_detailed_mode, stp_repo=stp_repo
    )

    return {
        "current_month": current_month,
        "month_emoji": month_emoji,
        "month_display": f"{month_emoji} {current_month.capitalize()}",
        "schedule_text": schedule_text,
        "detail_button_text": button_text,
        "is_detailed_mode": is_detailed_mode,
        "mode_options": mode_options,
        "selected_mode": selected_mode,
    }


async def duty_schedule_getter(
    user: Employee, stp_repo: MainRequestsRepo, dialog_manager: DialogManager, **_kwargs
) -> Dict[str, Any]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–µ–∂—É—Ä–Ω—ã—Ö.

    –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å

    Args:
        user: –≠–∫–∑–µ–º–ø–ª—è—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–æ–¥–µ–ª—å—é Employee
        stp_repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π STP
        dialog_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∏–∞–ª–æ–≥–∞

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å —Ç–µ–∫—Å—Ç–æ–º –≥—Ä–∞—Ñ–∏–∫–∞ –¥–µ–∂—É—Ä–Ω—ã—Ö
    """
    current_date_str = dialog_manager.dialog_data.get("current_date")
    if current_date_str is None:
        current_date = get_current_date()
    else:
        current_date = datetime.fromisoformat(current_date_str)

    duties_text = await schedule_service.get_duties_response(
        division=user.division, date=current_date, stp_repo=stp_repo
    )

    date_display = current_date.strftime("%d.%m")
    is_today = current_date.date() == get_current_date().date()

    return {
        "duties_text": duties_text,
        "date_display": date_display,
        "is_today": is_today,
    }


async def head_schedule_getter(
    user: Employee, stp_repo: MainRequestsRepo, dialog_manager: DialogManager, **_kwargs
) -> Dict[str, Any]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π.

    Args:
        user: –≠–∫–∑–µ–º–ø–ª—è—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–æ–¥–µ–ª—å—é Employee
        stp_repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π STP
        dialog_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∏–∞–ª–æ–≥–∞

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å —Ç–µ–∫—Å—Ç–æ–º –≥—Ä–∞—Ñ–∏–∫–∞ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π
    """
    current_date_str = dialog_manager.dialog_data.get("current_date")
    if current_date_str is None:
        current_date = get_current_date()
    else:
        current_date = datetime.fromisoformat(current_date_str)

    heads_text = await schedule_service.get_heads_response(
        division=user.division, date=current_date, stp_repo=stp_repo
    )

    date_display = current_date.strftime("%d.%m")
    is_today = current_date.date() == get_current_date().date()

    return {
        "heads_text": heads_text,
        "date_display": date_display,
        "is_today": is_today,
    }


async def group_schedule_getter(
    user: Employee, stp_repo: MainRequestsRepo, dialog_manager: DialogManager, **_kwargs
) -> Dict[str, Any]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.

    Args:
        user: –≠–∫–∑–µ–º–ø–ª—è—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–æ–¥–µ–ª—å—é Employee
        stp_repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π STP
        dialog_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∏–∞–ª–æ–≥–∞

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å —Ç–µ–∫—Å—Ç–æ–º –≥—Ä–∞—Ñ–∏–∫–∞ –≥—Ä—É–ø–ø—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    """
    current_date_str = dialog_manager.dialog_data.get("current_date")
    if current_date_str is None:
        current_date = get_current_date()
    else:
        current_date = datetime.fromisoformat(current_date_str)

    (
        group_text,
        total_pages,
        has_prev,
        has_next,
    ) = await schedule_service.get_group_schedule_response(
        user=user,
        date=current_date,
        stp_repo=stp_repo,
        is_head=True if user.role == 2 else False,
    )

    date_display = current_date.strftime("%d.%m")
    is_today = current_date.date() == get_current_date().date()

    return {
        "group_text": group_text,
        "date_display": date_display,
        "is_today": is_today,
    }
