"""–ì–µ—Ç—Ç–µ—Ä—ã –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∏ –Ω–æ—Ä–º–∞—Ç–∏–≤–æ–≤."""

import datetime
from typing import Any, Dict

from stp_database import Employee
from stp_database.models.KPI.head_premium import HeadPremium
from stp_database.models.KPI.spec_premium import SpecPremium
from stp_database.repo.KPI.requests import KPIRequestsRepo

from tgbot.misc.helpers import strftime_date
from tgbot.services.salary import KPICalculator, SalaryCalculator, SalaryFormatter


async def base_kpi_data(
    user: Employee, kpi_repo: KPIRequestsRepo, **_kwargs
) -> Dict[str, Any]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–º–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        user: –≠–∫–∑–µ–º–ø–ª—è—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–æ–¥–µ–ª—å—é Employee
        kpi_repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π KPI

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–µ–º–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user.role == 2:
        premium: HeadPremium = await kpi_repo.head_premium.get_premium(user.fullname)
    else:
        premium: SpecPremium = await kpi_repo.spec_premium.get_premium(user.fullname)

    return {"premium": premium}


async def kpi_getter(
    user: Employee, kpi_repo: KPIRequestsRepo, **_kwargs
) -> Dict[str, Any]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π KPI —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.

    Args:
        user: –≠–∫–∑–µ–º–ø–ª—è—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–æ–¥–µ–ª—å—é Employee
        premium: –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø—Ä–µ–º–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å –º–æ–¥–µ–ª—å—é SpecPremium –∏–ª–∏ HeadPremium

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å —Ç–µ–∫—Å—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    data = await base_kpi_data(user, kpi_repo, **_kwargs)
    premium = data.get("premium")

    if not premium:
        return {
            "kpi_text": "üåü <b>–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏</b>\n\n–ù–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Ç–≤–æ–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –ø—Ä–µ–º–∏—É–º–µ :(",
        }

    # Format dates
    updated_at_str = "‚Äî"
    if premium.updated_at:
        updated_at_str = (
            premium.updated_at.replace(tzinfo=datetime.timezone.utc)
            .astimezone(datetime.timezone(datetime.timedelta(hours=5)))
            .strftime(strftime_date)
        )

    current_time_str = datetime.datetime.now(
        datetime.timezone(datetime.timedelta(hours=5))
    ).strftime(strftime_date)

    if user.role == 2:
        kpi_text = f"""üåü <b>–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏</b>

üîß <b>FLR - {SalaryFormatter.format_percentage(premium.flr_premium)}</b>
<blockquote>–§–∞–∫—Ç: {SalaryFormatter.format_value(premium.flr)}
–ü–ª–∞–Ω: {SalaryFormatter.format_value(premium.flr_normative)}</blockquote>

‚öñÔ∏è <b>–ì–û–ö - {SalaryFormatter.format_percentage(premium.gok_premium)}</b>
<blockquote>–§–∞–∫—Ç: {SalaryFormatter.format_value(premium.gok)}
–ü–ª–∞–Ω: {SalaryFormatter.format_value(premium.gok_normative)}</blockquote>

üéØ <b>–¶–µ–ª—å - {SalaryFormatter.format_percentage(premium.target_premium)}</b>
<blockquote>–¢–∏–ø: {premium.target_type or "‚Äî"}
–§–∞–∫—Ç: {SalaryFormatter.format_value(premium.target)}
–ü–ª–∞–Ω: {SalaryFormatter.format_value(round(premium.target_normative_first))} / {SalaryFormatter.format_value(round(premium.target_normative_second))}</blockquote>

üí∞ <b>–ò—Ç–æ–≥–æ:</b>
<b>–û–±—â–∞—è –ø—Ä–µ–º–∏—è: {SalaryFormatter.format_percentage(premium.total_premium)}</b>

{"üìà –í—Å–µ–≥–æ —á–∞—Ç–æ–≤: " + SalaryFormatter.format_value(premium.contacts_count) if user.division == "–ù–¶–ö" else "üìà –í—Å–µ–≥–æ –∑–≤–æ–Ω–∫–æ–≤: " + SalaryFormatter.format_value(premium.contacts_count)}

<i>–í—ã–≥—Ä—É–∂–µ–Ω–æ: {premium.updated_at.replace(tzinfo=datetime.timezone.utc).astimezone(datetime.timezone(datetime.timedelta(hours=5))).strftime(strftime_date) if premium.updated_at else "‚Äî"}</i>
<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.datetime.now(datetime.timezone(datetime.timedelta(hours=5))).strftime(strftime_date)}</i>"""

    else:
        contacts_text = (
            f"üìà –í—Å–µ–≥–æ —á–∞—Ç–æ–≤: {SalaryFormatter.format_value(premium.contacts_count)}"
            if user.division == "–ù–¶–ö"
            else f"üìà –í—Å–µ–≥–æ –∑–≤–æ–Ω–∫–æ–≤: {SalaryFormatter.format_value(premium.contacts_count)}"
        )

        delay_text = (
            f"‚è∞ –ó–∞–¥–µ—Ä–∂–∫–∞: {SalaryFormatter.format_value(premium.delay, '%')}"
            if user.division != "–ù–¶–ö"
            else ""
        )

        kpi_text = f"""üåü <b>–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏</b>
    
üìä <b>–û—Ü–µ–Ω–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ - {SalaryFormatter.format_percentage(premium.csi_premium)}</b>
<blockquote>–§–∞–∫—Ç: {SalaryFormatter.format_value(premium.csi)}
–ü–ª–∞–Ω: {SalaryFormatter.format_value(premium.csi_normative)}</blockquote>
    
üéØ <b>–û—Ç–∫–ª–∏–∫</b>
<blockquote>–§–∞–∫—Ç: {SalaryFormatter.format_value(premium.csi_response)}
–ü–ª–∞–Ω: {SalaryFormatter.format_value(round(premium.csi_response_normative))}</blockquote>
    
üîß <b>FLR - {SalaryFormatter.format_percentage(premium.flr_premium)}</b>
<blockquote>–§–∞–∫—Ç: {SalaryFormatter.format_value(premium.flr)}
–ü–ª–∞–Ω: {SalaryFormatter.format_value(premium.flr_normative)}</blockquote>
    
‚öñÔ∏è <b>–ì–û–ö - {SalaryFormatter.format_percentage(premium.gok_premium)}</b>
<blockquote>–§–∞–∫—Ç: {SalaryFormatter.format_value(premium.gok)}
–ü–ª–∞–Ω: {SalaryFormatter.format_value(premium.gok_normative)}</blockquote>
    
üéØ <b>–¶–µ–ª—å - {SalaryFormatter.format_percentage(premium.target_premium)}</b>
<blockquote>–¢–∏–ø: {premium.target_type or "‚Äî"}
–§–∞–∫—Ç: {SalaryFormatter.format_value(premium.target)}
–ü–ª–∞–Ω: {SalaryFormatter.format_value(round(premium.target_normative_first))} / {SalaryFormatter.format_value(round(premium.target_normative_second))}</blockquote>
    
üíº <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ</b>
<blockquote>–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {SalaryFormatter.format_percentage(premium.discipline_premium)}
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {SalaryFormatter.format_percentage(premium.tests_premium)}
–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏: {SalaryFormatter.format_percentage(premium.thanks_premium)}
–ù–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ: {SalaryFormatter.format_percentage(premium.tutors_premium)}
–†—É—á–Ω–∞—è –ø—Ä–∞–≤–∫–∞: {SalaryFormatter.format_percentage(premium.head_adjust_premium)}</blockquote>
    
üí∞ <b>–ò—Ç–æ–≥–æ:</b>
<b>–û–±—â–∞—è –ø—Ä–µ–º–∏—è: {SalaryFormatter.format_percentage(premium.total_premium)}</b>
    
{contacts_text}
{delay_text}
<i>–í—ã–≥—Ä—É–∂–µ–Ω–æ: {updated_at_str}</i>
<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {current_time_str}</i>"""

    return {"kpi_text": kpi_text}


async def kpi_requirements_getter(
    user: Employee, kpi_repo: KPIRequestsRepo, **_kwargs
) -> Dict[str, Any]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–æ—Ä–º–∞—Ç–∏–≤–æ–≤.

    Args:
        user: –≠–∫–∑–µ–º–ø–ª—è—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–æ–¥–µ–ª—å—é Employee
        premium: –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø—Ä–µ–º–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å –º–æ–¥–µ–ª—å—é SpecPremium –∏–ª–∏ HeadPremium

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å —Ç–µ–∫—Å—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –Ω–æ—Ä–º–∞—Ç–∏–≤–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    """
    data = await base_kpi_data(user, kpi_repo, **_kwargs)
    premium = data.get("premium")

    if not premium:
        return {
            "requirements_text": """üßÆ <b>–ù–æ—Ä–º–∞—Ç–∏–≤—ã</b>
            
–ù–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Ç–≤–æ–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –ø—Ä–µ–º–∏—É–º–µ :(""",
        }

    requirements_text = KPICalculator.format_requirements_message(
        user=user, premium=premium, is_head=True if user.role == 2 else False
    )

    return {"requirements_text": requirements_text}


async def salary_getter(
    user: Employee, kpi_repo: KPIRequestsRepo, **_kwargs
) -> Dict[str, Any]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.

    Args:
        user: –≠–∫–∑–µ–º–ø–ª—è—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–æ–¥–µ–ª—å—é Employee
        premium: –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø—Ä–µ–º–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å –º–æ–¥–µ–ª—å—é SpecPremium –∏–ª–∏ HeadPremium

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å —Ç–µ–∫—Å—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞—Ä–ø–ª–∞—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    """
    data = await base_kpi_data(user, kpi_repo, **_kwargs)
    premium = data.get("premium")

    if not premium:
        return {
            "salary_text": """üí∞ <b>–ó–∞—Ä–ø–ª–∞—Ç–∞</b>
            
–ù–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Ç–≤–æ–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –ø—Ä–µ–º–∏—É–º–µ :(""",
        }

    salary_result = await SalaryCalculator.calculate_salary(
        user=user, premium_data=premium
    )

    salary_text = SalaryFormatter.format_salary_message(salary_result, premium)

    return {"salary_text": salary_text}
