"""–ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è –æ–∫–æ–Ω –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤."""

from typing import Dict

from aiogram_dialog import DialogManager
from stp_database import Employee, MainRequestsRepo

from tgbot.misc.helpers import format_fullname


async def activations_getter(
    stp_repo: MainRequestsRepo, user: Employee, **_kwargs
) -> Dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        stp_repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π STP
        user: –≠–∫–∑–µ–º–ø–ª—è—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–æ–¥–µ–ª—å—é Employee

    Returns:
        –°–ª–æ–≤–∞—Ä—å –∏–∑ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é
    """
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∫—É–ø–∫–∏, –æ–∂–∏–¥–∞—é—â–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å manager_role, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user.role in [2, 3]:
        activations = await stp_repo.purchase.get_review_purchases_for_activation(
            manager_role=3,
            division="–ù–¶–ö" if user.division == "–ù–¶–ö" else ["–ù–¢–ü", "–ù–¢–ü1"],
        )
    else:
        activations = await stp_repo.purchase.get_review_purchases_for_activation(
            manager_role=user.role, division=None
        )

    formatted_activations = []
    for counter, purchase_details in enumerate(activations, start=1):
        purchase = purchase_details.user_purchase
        product = purchase_details.product_info

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –∫–æ—Ç–æ—Ä—ã–π –∫—É–ø–∏–ª –ø—Ä–µ–¥–º–µ—Ç
        purchase_user = await stp_repo.employee.get_users(user_id=purchase.user_id)
        purchase_user_text = format_fullname(
            purchase_user.fullname,
            True,
            True,
            purchase_user.username,
            purchase_user.user_id,
        )

        formatted_activations.append((
            purchase.id,  # ID –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–ª–∏–∫–∞
            product.name,
            product.description,
            purchase.bought_at.strftime("%d.%m.%Y –≤ %H:%M"),
            purchase_user_text,
            purchase_user.division if purchase_user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            purchase_user.username if purchase_user else None,
            purchase_user.user_id if purchase_user else purchase.user_id,
        ))

    return {
        "activations": formatted_activations,
        "total_activations": len(formatted_activations),
    }


async def activation_detail_getter(dialog_manager: DialogManager, **_kwargs):
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–ª-–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –ø—Ä–µ–¥–º–µ—Ç–∞.

    Args:
        dialog_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∏–∞–ª–æ–≥–∞

    Returns:
        –°–ª–æ–≤–∞—Ä—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ —Å –∫–æ–ª-–≤–æ–º –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –ø—Ä–µ–¥–º–µ—Ç–∞
    """
    # –ü–æ–ª—É—á–∞–µ–º selected_activation –∏–∑ dialog_data
    selected_activation = dialog_manager.dialog_data.get("selected_activation", {})

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    if selected_activation:
        # –í—ã—á–∏—Å–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        next_usage_count = selected_activation.get("usage_count", 0) + 1
        selected_activation = {
            **selected_activation,
            "next_usage_count": next_usage_count,
        }

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_comment_text = ""
    if selected_activation.get("user_comment"):
        user_comment_text = f"""

üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞:</b>
<blockquote>{selected_activation["user_comment"]}</blockquote>"""

    return {
        "selected_activation": selected_activation,
        "user_comment_text": user_comment_text,
    }
