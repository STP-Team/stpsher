"""–ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö –æ–∫–æ–Ω."""

import logging
from typing import Any, Dict

from aiogram import Bot
from aiogram_dialog import DialogManager
from stp_database import MainRequestsRepo

pending_role_changes = {}
pending_service_messages_changes = {}

logger = logging.getLogger(__name__)


async def get_user_groups(user_id: int, stp_repo: MainRequestsRepo, bot: Bot) -> tuple:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º.

    Args:
        user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞–ø—Ä–∞—à–∏–≤–∞—é—â–µ–≥–æ —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
        stp_repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π STP
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞

    Returns:
        –ö–æ—Ä—Ç–µ–∂ –≥—Ä—É–ø–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –æ–Ω —á–∏—Å–ª–∏—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    """
    admin_groups = []
    member_groups_list = []
    admin_status = {}

    member_groups = await stp_repo.group_member.get_member_groups(user_id)

    for group_member in member_groups:
        group_id = group_member.group_id
        try:
            try:
                chat_info = await bot.get_chat(chat_id=group_id)
                group_name = chat_info.title or f"{group_id}"

                is_admin = await is_user_group_admin(user_id, group_id, bot)
                admin_status[group_id] = is_admin

                if is_admin:
                    admin_groups.append((group_id, group_name))
                else:
                    member_groups_list.append((group_id, group_name))

            except Exception as e:
                logger.warning(f"Failed to get chat info for group {group_id}: {e}")
                group_name = f"{group_id}"
                is_admin = await is_user_group_admin(user_id, group_id, bot)
                admin_status[group_id] = is_admin

                if is_admin:
                    admin_groups.append((group_id, group_name))
                else:
                    member_groups_list.append((group_id, group_name))

        except Exception as e:
            logger.warning(f"Failed to check group {group_id}: {e}")
            continue

    sorted_groups = admin_groups + member_groups_list
    return sorted_groups, admin_status


async def is_user_group_admin(user_id: int, group_id: int, bot: Bot) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –≥—Ä—É–ø–ø–µ.

    Args:
        user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        group_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä—è–µ–º–æ–π Telegram –≥—Ä—É–ø–ø—ã
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞

    Returns:
        True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ –≥—Ä—É–ø–ø–µ, –∏–Ω–∞—á–µ False
    """
    try:
        member_status = await bot.get_chat_member(chat_id=group_id, user_id=user_id)
        return member_status.status in ["administrator", "creator"]
    except Exception as e:
        logger.warning(f"Failed to check admin status for group {group_id}: {e}")
        return False


async def groups_list_getter(
    stp_repo: MainRequestsRepo, dialog_manager: DialogManager, bot: Bot, **_kwargs
) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–∏—Å–∫–µ –≥—Ä—É–ø–ø –¥–ª—è –æ–∫–Ω–∞ –≥—Ä—É–ø–ø.

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        stp_repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π STP
        dialog_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∏–∞–ª–æ–≥–∞

    Returns:
        –°–ª–æ–≤–∞—Ä—å –≥—Ä—É–ø–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –æ–Ω —á–∏—Å–ª–∏—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    """
    user_id = dialog_manager.event.from_user.id

    user_groups, admin_status = await get_user_groups(user_id, stp_repo, bot)

    groups_items = []
    for group_id, group_name in user_groups:
        is_admin = admin_status.get(group_id, False)
        emoji = (
            "üõ°Ô∏è" if is_admin else "üë§"
        )  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–æ–ª–∏ –≤ –≥—Ä—É–ø–ø–µ: –£—á–∞—Å—Ç–Ω–∏–∫ –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        display_name = group_name[:30] + "..." if len(group_name) > 30 else group_name
        groups_items.append((f"{emoji} {display_name}", group_id))

    return {
        "groups_count": len(user_groups),
        "has_groups": len(user_groups) > 0,
        "groups": groups_items,
    }


async def groups_details_getter(
    dialog_manager: DialogManager, stp_repo: MainRequestsRepo, bot: Bot, **_kwargs
) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≥—Ä—É–ø–ø–µ –≤ —Å–ø–∏—Å–∫–µ –≥—Ä—É–ø–ø.

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        dialog_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∏–∞–ª–æ–≥–∞
        stp_repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π STP

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ
    """
    group_id = dialog_manager.dialog_data.get("selected_group_id")

    if not group_id:
        return {"error": True}

    group = await stp_repo.group.get_groups(group_id)
    if not group:
        return {"error": True}

    try:
        chat_info = await bot.get_chat(chat_id=group_id)
        group_name = chat_info.title or f"{group_id}"
    except Exception:
        group_name = f"ID: {group_id}"

    widget_data = dialog_manager.dialog_data.setdefault("__aiogd_widget_data__", {})
    widget_data["new_user_notify"] = group.new_user_notify
    widget_data["is_casino_allowed"] = group.is_casino_allowed

    return {
        "group_name": group_name,
        "group_id": group_id,
        "remove_unemployed": group.remove_unemployed,
        "new_user_notify": group.new_user_notify,
        "is_casino_allowed": group.is_casino_allowed,
        "has_access_roles": bool(group.allowed_roles),
        "has_service_messages": bool(getattr(group, "service_messages", [])),
    }


async def group_details_members_getter(
    dialog_manager: DialogManager, stp_repo: MainRequestsRepo, bot: Bot, **_kwargs
) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        dialog_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∏–∞–ª–æ–≥–∞
        stp_repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π STP

    Returns:
        –°–ª–æ–≤–∞—Ä—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    group_id = dialog_manager.dialog_data.get("selected_group_id")

    if not group_id:
        return {"error": True}

    group = await stp_repo.group.get_groups(group_id)
    if not group:
        return {"error": True}

    try:
        chat_info = await bot.get_chat(chat_id=group_id)
        group_name = chat_info.title or f"{group_id}"
    except Exception:
        group_name = f"ID: {group_id}"

    group_members = await stp_repo.group_member.get_group_members(group_id)

    employees = []
    non_employee_users = []

    for group_member in group_members:
        employee = await stp_repo.employee.get_users(user_id=group_member.member_id)
        if employee:
            employees.append(employee)
        else:
            try:
                chat_member = await bot.get_chat_member(
                    chat_id=group_id, user_id=group_member.member_id
                )
                non_employee_users.append(chat_member.user)
            except Exception:
                continue

    total_members = len(employees) + len(non_employee_users)

    return {
        "group_name": group_name,
        "group_id": group_id,
        "total_members": total_members,
        "employees": employees,
        "users": non_employee_users,
    }


async def group_details_services_getter(
    dialog_manager: DialogManager, stp_repo: MainRequestsRepo, bot: Bot, **_kwargs
) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ–∫–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        dialog_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∏–∞–ª–æ–≥–∞
        stp_repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π STP

    Returns:
        –°–ª–æ–≤–∞—Ä—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≥—Ä—É–ø–ø—ã
    """
    group_id = dialog_manager.dialog_data.get("selected_group_id")

    if not group_id:
        return {"error": True}

    group = await stp_repo.group.get_groups(group_id)
    if not group:
        return {"error": True}

    try:
        chat_info = await bot.get_chat(chat_id=group_id)
        group_name = chat_info.title or f"{group_id}"
    except Exception:
        group_name = f"ID: {group_id}"

    # Initialize pending changes if not exists
    if group_id not in pending_service_messages_changes:
        pending_service_messages_changes[group_id] = (
            getattr(group, "service_messages", []) or []
        ).copy()

    current_pending = pending_service_messages_changes[group_id]

    # Initialize checkbox states
    widget_data = dialog_manager.dialog_data.setdefault("__aiogd_widget_data__", {})
    widget_data["service_all"] = "all" in current_pending
    widget_data["service_join"] = "join" in current_pending
    widget_data["service_leave"] = "leave" in current_pending
    widget_data["service_other"] = "other" in current_pending
    widget_data["service_photo"] = "photo" in current_pending
    widget_data["service_pin"] = "pin" in current_pending
    widget_data["service_title"] = "title" in current_pending
    widget_data["service_videochat"] = "videochat" in current_pending

    return {
        "group_name": group_name,
        "group_id": group_id,
        "has_pending_changes": current_pending
        != (getattr(group, "service_messages", []) or []),
    }


async def groups_cmds_getter(
    dialog_manager: DialogManager, **_kwargs
) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–∫–Ω–∞ –∫–æ–º–∞–Ω–¥ –≥—Ä—É–ø–ø.

    Args:
        dialog_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∏–∞–ª–æ–≥–∞

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–∏–ª—å—Ç—Ä–µ –∫–æ–º–∞–Ω–¥
    """
    filter_value = dialog_manager.find("groups_cmds_filter").get_checked()

    return {
        "is_user": filter_value == "user",
    }


async def group_remove_getter(
    dialog_manager: DialogManager, stp_repo: MainRequestsRepo, bot: Bot, **_kwargs
) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–∫–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –±–æ—Ç–∞ –∏–∑ –≥—Ä—É–ø–ø—ã.

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        stp_repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π STP
        dialog_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∏–∞–ª–æ–≥–∞

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å group_name –∏ group_id
    """
    group_id = dialog_manager.dialog_data.get("selected_group_id")

    if not group_id:
        return {"error": True}

    group = await stp_repo.group.get_groups(group_id)
    if not group:
        return {"error": True}

    try:
        chat_info = await bot.get_chat(chat_id=group_id)
        group_name = chat_info.title or f"{group_id}"
    except Exception:
        group_name = f"ID: {group_id}"

    return {
        "group_name": group_name,
        "group_id": group_id,
    }
