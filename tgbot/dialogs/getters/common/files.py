"""–ì–µ—Ç—Ç–µ—Ä—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ñ–∞–π–ª–∞–º–∏."""

from datetime import datetime
from pathlib import Path

from aiogram_dialog import DialogManager
from stp_database import MainRequestsRepo

from tgbot.misc.helpers import format_fullname


async def get_local_files(**kwargs) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ /uploads."""
    uploads_dir = Path("uploads")

    if not uploads_dir.exists():
        return {"files": []}

    files = []
    for idx, file_path in enumerate(uploads_dir.iterdir(), start=1):
        if file_path.is_file():
            file_stat = file_path.stat()
            modified_date = datetime.fromtimestamp(file_stat.st_mtime).strftime(
                "%d.%m.%Y %H:%M"
            )
            files.append((
                file_path.name,  # item[0] - –∏–º—è —Ñ–∞–π–ª–∞
                f"{file_stat.st_size / 1024:.2f} KB",  # item[1] - —Ä–∞–∑–º–µ—Ä
                file_path.suffix or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",  # item[2] - —Ç–∏–ø
                modified_date,  # item[3] - –¥–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            ))

    return {"files": files}


async def get_local_file_details(
    stp_repo: MainRequestsRepo, dialog_manager: DialogManager, **_kwargs
) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–∞–ø–∫–∏ –∏ –ë–î."""
    file_name = dialog_manager.dialog_data.get("selected_file")

    if not file_name:
        return {"file_info": None}

    # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
    file_path = Path("uploads") / file_name
    if not file_path.exists():
        return {"file_info": None}

    file_stat = file_path.stat()
    from datetime import datetime

    modified_date = datetime.fromtimestamp(file_stat.st_mtime)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ë–î
    db_records = await stp_repo.upload.get_files(file_name=file_name)

    file_info = {
        "name": file_name,
        "size": f"{file_stat.st_size / 1024:.2f} KB",
        "type": file_path.suffix or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
        "modified": modified_date.strftime("%d.%m.%Y %H:%M"),
        "db_count": len(db_records) if db_records else 0,
    }

    db_record = False
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –≤ –ë–î, –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é
    if db_records:
        db_record = True
        latest = db_records[0]
        file_info["uploaded_by"] = latest.uploaded_by_user_id
        uploaded_by_user = await stp_repo.employee.get_users(
            user_id=latest.uploaded_by_user_id
        )
        uploaded_by_text = format_fullname(
            uploaded_by_user.fullname,
            True,
            True,
            uploaded_by_user.username,
            uploaded_by_user.user_id,
        )
        file_info["uploaded_by_fullname"] = uploaded_by_text
        file_info["uploaded_at"] = latest.uploaded_at.strftime("%d.%m.%Y %H:%M")

    return {
        "file_info": file_info,
        "db_record": db_record,
    }


async def get_file_history(
    stp_repo: MainRequestsRepo, dialog_manager: DialogManager, **_kwargs
) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ñ–∞–π–ª–æ–≤ —Å —Ç–∞–∫–∏–º –∂–µ –∏–º–µ–Ω–µ–º –∏–∑ –ë–î."""
    file_name = dialog_manager.dialog_data.get("selected_file")

    if not file_name:
        return {"history": []}

    db_records = await stp_repo.upload.get_files(file_name=file_name)

    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ user_id –∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
    user_ids = [record.uploaded_by_user_id for record in db_records]
    users_list = await stp_repo.employee.get_users(user_id=user_ids)

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    users_map = {user.user_id: user for user in users_list}

    history = []
    for record in db_records:
        uploaded_by_user = users_map.get(record.uploaded_by_user_id)
        fullname = format_fullname(
            uploaded_by_user.fullname,
            True,
            True,
            uploaded_by_user.username,
            uploaded_by_user.user_id,
        )

        history.append((
            record.id,  # item[0] - database record id (–¥–ª—è item_id)
            record.file_name or file_name,  # item[1] - –∏–º—è —Ñ–∞–π–ª–∞
            f"{record.file_size / 1024:.2f} KB"
            if record.file_size
            else "–ù/–î",  # item[2] - —Ä–∞–∑–º–µ—Ä
            record.uploaded_at.strftime("%d.%m.%Y %H:%M"),  # item[3] - –¥–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏
            record.uploaded_by_user_id,  # item[4] - –∫—Ç–æ –∑–∞–≥—Ä—É–∑–∏–ª
            record.file_id,  # item[5] - Telegram file_id
            fullname,  # item[6]
        ))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ dialog_data –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤ event handler
    dialog_manager.dialog_data["history"] = history

    return {"history": history}


async def get_all_files_history(stp_repo: MainRequestsRepo, **_kwargs) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ –ë–î."""
    db_records = await stp_repo.upload.get_files()

    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ user_id –∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
    user_ids = [record.uploaded_by_user_id for record in db_records]
    users_list = await stp_repo.employee.get_users(user_id=user_ids)

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    users_map = {user.user_id: user for user in users_list}

    files = []
    for record in db_records:
        uploaded_by_user = users_map.get(record.uploaded_by_user_id)
        uploaded_by_text = format_fullname(
            uploaded_by_user.fullname,
            True,
            True,
            uploaded_by_user.username,
            uploaded_by_user.user_id,
        )

        files.append((
            record.id,  # item[0] - database record id (–¥–ª—è item_id)
            record.file_name,  # item[1] - –∏–º—è —Ñ–∞–π–ª–∞
            f"{record.file_size / 1024:.2f} KB"
            if record.file_size
            else "–ù/–î",  # item[2] - —Ä–∞–∑–º–µ—Ä
            record.uploaded_at.strftime("%d.%m.%Y %H:%M"),  # item[3] - –¥–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏
            record.uploaded_by_user_id,  # item[4] - –∫—Ç–æ –∑–∞–≥—Ä—É–∑–∏–ª
            record.file_id,  # item[5] - Telegram file_id
            uploaded_by_text,  # item[6] - –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        ))

    return {"files": files}


async def get_history_file_details(
    stp_repo: MainRequestsRepo, dialog_manager: DialogManager, **_kwargs
) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∑–æ–∫."""
    history_file_id = dialog_manager.dialog_data.get("selected_history_file")

    if not history_file_id:
        return {"file_info": None}

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –∏–∑ –ë–î
    record = await stp_repo.upload.get_file_by_id(main_id=history_file_id)
    if not record:
        return {"file_info": None}

    uploaded_user = await stp_repo.employee.get_users(
        user_id=record.uploaded_by_user_id
    )
    uploaded_by_text = format_fullname(
        uploaded_user.fullname,
        True,
        True,
        uploaded_user.username,
        record.uploaded_by_user_id,
    )

    file_info = {
        "id": record.id,
        "name": record.file_name,
        "size": f"{record.file_size / 1024:.2f} KB" if record.file_size else "–ù/–î",
        "uploaded_at": record.uploaded_at.strftime("%d.%m.%Y %H:%M"),
        "uploaded_by_fullname": uploaded_by_text,
        "file_id": record.file_id,
    }

    return {"file_info": file_info}


async def get_upload_status(dialog_manager: DialogManager, **_kwargs) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏.

    Args:
        dialog_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∏–∞–ª–æ–≥–∞

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–≥—Ä—É–∑–∫–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ
    """
    from tgbot.services.files_processing.file_processor import (
        FileTypeDetector,
        generate_detailed_stats_text,
        generate_studies_stats_text,
        generate_user_changes_text,
    )

    data = dialog_manager.dialog_data

    file_name = data.get("upload_file_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    file_size = data.get("upload_file_size", 0)
    mime_type = data.get("upload_mime_type", "unknown")
    file_type = data.get("upload_file_type", "üìÑ –û–±—ã—á–Ω—ã–π —Ñ–∞–π–ª")
    upload_error = data.get("upload_error")
    upload_time = data.get("upload_time", 0)
    actual_size = data.get("upload_actual_size", file_size)
    file_replaced = data.get("upload_file_replaced", False)
    processing_results = data.get("processing_results", {})

    upload_progress_text = data.get("upload_progress_text", "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞...")

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä
    if file_size:
        size_kb = file_size / 1024
        size_mb = size_kb / 1024
        if size_mb >= 1:
            size_str = f"{size_mb:.2f} MB"
        else:
            size_str = f"{size_kb:.2f} KB"
    else:
        size_str = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_text = ""

    # –î–ª—è —Ñ–∞–π–ª–æ–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    if FileTypeDetector.is_schedule_file(file_name):
        new_stats = processing_results.get("new_stats")
        old_stats = processing_results.get("old_stats")

        if new_stats:
            processing_text += generate_detailed_stats_text(new_stats, old_stats)

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        fired = processing_results.get("fired_names", [])
        updated = processing_results.get("updated_names", [])
        new = processing_results.get("new_names", [])

        if fired or updated or new:
            processing_text += generate_user_changes_text(fired, updated, new)

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
        changed_users = processing_results.get("changed_users", [])
        notified_users = processing_results.get("notified_users", [])

        if changed_users:
            processing_text += "<b>üì§ –ò–∑–º–µ–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞</b>"
            processing_text += "\n<blockquote expandable>"

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            for user_info in changed_users:
                if isinstance(user_info, dict):
                    name = user_info.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                    status = user_info.get("status", "‚ùå")
                    processing_text += f"\n{name}: {status}"
                else:
                    # –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
                    processing_text += f"\n‚Ä¢ {user_info}"

            processing_text += (
                f"\n\n‚úÖ <b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:</b> "
                f"{len(notified_users)}</blockquote>"
            )
        elif file_replaced:
            processing_text += "\nüì§ <b>–ò–∑–º–µ–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞</b>\n"
            processing_text += "–ò–∑–º–µ–Ω–µ–Ω–∏–π –≤ –≥—Ä–∞—Ñ–∏–∫–µ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"

    # –î–ª—è —Ñ–∞–π–ª–æ–≤ –æ–±—É—á–µ–Ω–∏–π
    elif FileTypeDetector.is_studies_file(file_name):
        studies_stats = processing_results.get("studies_stats")
        if studies_stats:
            processing_text += generate_studies_stats_text(studies_stats)

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö
            notification_results = processing_results.get("notification_results", {})
            if notification_results.get("status") == "success":
                sessions = notification_results.get("sessions", 0)
                notifications = notification_results.get("notifications", 0)

                processing_text += "\nüì§ <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±—É—á–µ–Ω–∏—è—Ö</b>\n"
                if sessions > 0:
                    processing_text += (
                        f"‚Ä¢ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –æ–±—É—á–µ–Ω–∏–π (–≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏): {sessions}\n"
                    )
                    processing_text += f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {notifications}"
                else:
                    processing_text += (
                        "‚Ä¢ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –æ–±—É—á–µ–Ω–∏–π –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
                    )
            elif "message" in notification_results:
                processing_text += "\nüì§ <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±—É—á–µ–Ω–∏—è—Ö</b>\n"
                processing_text += f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {notification_results.get('message')}"

    processing_complete = data.get("processing_complete", False)

    return {
        "file_name": file_name,
        "file_size": size_str,
        "file_type": file_type,
        "file_size_bytes": file_size,
        "actual_size_bytes": actual_size,
        "mime_type": mime_type,
        "upload_error": upload_error,
        "upload_time": f"{upload_time:.2f}" if upload_time else "‚Äî",
        "file_replaced": file_replaced,
        "processing_text": processing_text,
        "has_error": bool(upload_error),
        "has_processing": bool(processing_text),
        "upload_progress_text": upload_progress_text,
        "processing_complete": processing_complete,
    }
