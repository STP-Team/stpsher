"""–ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è –æ–∫–æ–Ω —Ä–∞—Å—Å—ã–ª–∫–∏."""

from aiogram_dialog import DialogManager
from sqlalchemy import distinct, select
from stp_database import Employee, MainRequestsRepo

from tgbot.misc.dicts import roles
from tgbot.misc.helpers import format_fullname


async def broadcast_select_getter(
    dialog_manager: DialogManager, stp_repo: MainRequestsRepo, **_kwargs
):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏–ª–∏ –≥—Ä—É–ø–ø —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤ —Ä–∞—Å—Å—ã–ª–∫–µ.

    Args:
        dialog_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∏–∞–ª–æ–≥–∞
        stp_repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π STP

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å items –¥–ª—è Multiselect –≤–∏–¥–∂–µ—Ç–∞
    """
    broadcast_type = dialog_manager.dialog_data.get("broadcast_type")
    selected_filter = dialog_manager.dialog_data.get("broadcast_filter")

    if broadcast_type == "by_division":
        # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã
        query = select(distinct(Employee.division)).where(
            Employee.division.isnot(None), Employee.division != ""
        )
        result = await stp_repo.session.execute(query)
        divisions = result.scalars().all()

        items = [(division, division) for division in sorted(divisions)]
        title = "–í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"
        broadcast_filters = []

    elif broadcast_type == "by_group":
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π
        heads = await stp_repo.employee.get_users(roles=2)

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é
        if selected_filter and selected_filter != "all":
            heads = [head for head in heads if head.division == selected_filter]

        items = []
        for head in heads:
            display_name = format_fullname(
                head.fullname, True, True, head.username, int(head.user_id)
            )
            items.append((head.id, display_name))

        # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        all_heads = await stp_repo.employee.get_users(roles=2)
        head_divisions = sorted({
            head.division for head in all_heads if head.division is not None
        })
        broadcast_filters = [("all", "–í—Å–µ")] + [(div, div) for div in head_divisions]

        title = "–í—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—ã —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"
    elif broadcast_type == "by_role":
        # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä—è, –∏—Å–∫–ª—é—á–∞—è —Ä–æ–ª—å 0 (–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)
        items = [
            (str(role_id), f"{role_data['emoji']} {role_data['name']}")
            for role_id, role_data in roles.items()
            if role_id != 0
        ]
        title = "–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–Ω–∏ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"
        broadcast_filters = []
    else:
        items = []
        broadcast_filters = []
        title = "–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏"

    return {
        "items": items,
        "title": title,
        "broadcast_type": broadcast_type,
        "broadcast_filters": broadcast_filters,
    }


async def broadcast_info_getter(
    dialog_manager: DialogManager, stp_repo: MainRequestsRepo, **_kwargs
):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å—Å—ã–ª–∫–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.

    Args:
        dialog_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∏–∞–ª–æ–≥–∞
        stp_repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π STP

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–∞—Å—Å—ã–ª–∫–µ
    """
    broadcast_type_raw = dialog_manager.dialog_data.get("broadcast_type", None)
    broadcast_text = dialog_manager.dialog_data.get("broadcast_text", None)
    broadcast_items = dialog_manager.dialog_data.get("broadcast_items", [])

    broadcast_type = None
    broadcast_targets = None

    if broadcast_type_raw is not None:
        match broadcast_type_raw:
            case "by_division":
                broadcast_type = "üî∞ –ü–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é"
                if broadcast_items:
                    broadcast_targets = ", ".join(broadcast_items)
            case "by_group":
                broadcast_type = "üëî –ü–æ –≥—Ä—É–ø–ø–∞–º"
                if broadcast_items:
                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –∏–º–µ–Ω–∞ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π –ø–æ –∏—Ö ID –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤ –∫–æ—Ä–æ—Ç–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                    short_names = []
                    for head_id in broadcast_items:
                        head = await stp_repo.employee.get_users(main_id=int(head_id))
                        if head:
                            short_names.append(
                                format_fullname(
                                    head.fullname,
                                    True,
                                    True,
                                    head.username,
                                    int(head.user_id),
                                )
                            )
                    broadcast_targets = ", ".join(short_names)
            case "by_role":
                broadcast_type = "üõ°Ô∏è –ü–æ —É—Ä–æ–≤–Ω—é –¥–æ—Å—Ç—É–ø–∞"
                if broadcast_items:
                    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–æ–ª–µ–π –ø–æ –∏—Ö ID
                    role_names = []
                    for role_id in broadcast_items:
                        role_data = roles.get(int(role_id))
                        if role_data:
                            role_names.append(
                                f"{role_data['emoji']} {role_data['name']}"
                            )
                    broadcast_targets = ", ".join(role_names)
            case "all":
                broadcast_type = "üåé –í—Å–µ–º"

    return {
        "broadcast_type": broadcast_type,
        "broadcast_text": broadcast_text,
        "broadcast_targets": broadcast_targets,
        "has_targets": broadcast_targets is not None,
    }


async def broadcast_progress_getter(dialog_manager: DialogManager, **_kwargs):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ —Ä–∞—Å—Å—ã–ª–∫–∏.

    Args:
        dialog_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∏–∞–ª–æ–≥–∞

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –¥–ª—è Progress –≤–∏–¥–∂–µ—Ç–∞
    """
    current = dialog_manager.dialog_data.get("current_progress", 0)
    total = dialog_manager.dialog_data.get("total_users", 0)

    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è Progress –≤–∏–¥–∂–µ—Ç–∞ (0-100)
    progress = int((current / total * 100)) if total > 0 else 0

    return {
        "current": current,
        "total": total,
        "progress": progress,
    }


async def broadcast_result_getter(dialog_manager: DialogManager, **_kwargs):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—Å—ã–ª–∫–∏.

    Args:
        dialog_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∏–∞–ª–æ–≥–∞

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
    """
    success = dialog_manager.dialog_data.get("success_count", 0)
    errors = dialog_manager.dialog_data.get("error_count", 0)
    total = dialog_manager.dialog_data.get("total_users", 0)

    return {
        "success_count": success,
        "error_count": errors,
        "total_users": total,
    }


async def broadcast_history_getter(
    stp_repo: MainRequestsRepo, **_kwargs
) -> dict[str, list[dict]]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫.

    Args:
        stp_repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π STP

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å–æ —Å–ø–∏—Å–∫–æ–º —Ä–∞—Å—Å—ã–ª–æ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    broadcasts = await stp_repo.broadcast.get_broadcasts()
    dict_broadcasts = [
        {
            "id": broadcast.id,
            "target": broadcast.target or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            "recipients_length": len(broadcast.recipients or []),
            "created_at": broadcast.created_at.strftime("%H:%M %d.%m.%Y")
            if broadcast.created_at
            else "",
        }
        for broadcast in broadcasts
    ]

    return {
        "broadcasts": dict_broadcasts,
    }


async def broadcast_detail_getter(
    dialog_manager: DialogManager, stp_repo: MainRequestsRepo, **_kwargs
) -> dict[str, str]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞—Å—Å—ã–ª–∫–µ.

    Args:
        dialog_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∏–∞–ª–æ–≥–∞
        stp_repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π STP

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–∞—Å—Å—ã–ª–∫–µ
    """
    broadcast_id = dialog_manager.dialog_data.get("selected_broadcast_id")
    broadcast = await stp_repo.broadcast.get_broadcasts(broadcast_id)

    if not broadcast:
        return {
            "broadcast_type": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            "broadcast_target": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            "broadcast_text": "–†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
            "recipients_count": 0,
            "created_at": "",
        }

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    broadcast_type = None
    if broadcast.type == "division":
        if broadcast.target == "all":
            broadcast_type = "üåé –í—Å–µ–º"
        else:
            broadcast_type = "üî∞ –ü–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é"
    elif broadcast.type == "group":
        broadcast_type = "üëî –ü–æ –≥—Ä—É–ø–ø–∞–º"
    elif broadcast.type == "role":
        broadcast_type = "üõ°Ô∏è –ü–æ —É—Ä–æ–≤–Ω—é –¥–æ—Å—Ç—É–ø–∞"

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
    created_at_str = (
        broadcast.created_at.strftime("%d.%m.%Y %H:%M") if broadcast.created_at else ""
    )

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    creator = await stp_repo.employee.get_users(user_id=int(broadcast.user_id))

    return {
        "broadcast_type": broadcast_type,
        "broadcast_target": broadcast.target,
        "broadcast_text": broadcast.text,
        "recipients_count": len(broadcast.recipients or []),
        "created_at": created_at_str,
        "creator_name": format_fullname(
            creator.fullname, True, True, creator.username, int(creator.user_id)
        ),
    }
