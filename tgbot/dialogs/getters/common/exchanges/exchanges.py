"""–ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è –±–∏—Ä–∂–∏ –ø–æ–¥–º–µ–Ω."""

import re
from datetime import datetime
from typing import Any, Dict

from aiogram_dialog import DialogManager
from stp_database import Employee, MainRequestsRepo

from tgbot.misc.helpers import format_fullname
from tgbot.services.files_processing.parsers.schedule import ScheduleParser


async def sell_date_getter(
    stp_repo: MainRequestsRepo, user: Employee, dialog_manager: DialogManager, **_kwargs
) -> Dict[str, Any]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –æ–∫–Ω–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã."""
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–º–µ–Ω–∞—Ö
    await prepare_calendar_data_for_exchange(stp_repo, user, dialog_manager)
    return {}


async def sell_hours_getter(
    stp_repo: MainRequestsRepo, user: Employee, dialog_manager: DialogManager, **kwargs
) -> Dict[str, Any]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –æ–∫–Ω–∞ –≤—ã–±–æ—Ä–∞ —á–∞—Å–æ–≤."""
    shift_date = dialog_manager.dialog_data.get("shift_date")
    is_today = dialog_manager.dialog_data.get("is_today", False)

    if not shift_date:
        return {
            "selected_date": "–ù–µ –≤—ã–±—Ä–∞–Ω–∞",
            "shift_options": [],
            "user_schedule": "–ù–µ –Ω–∞–π–¥–µ–Ω",
        }

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–µ–∂—É—Ä—Å—Ç–≤–∞–º–∏
        date_obj = datetime.fromisoformat(shift_date).date()
        formatted_date = date_obj.strftime("%d.%m.%Y")

        parser = ScheduleParser()
        month_name = get_month_name(date_obj.month)

        # –ü–æ–ª—É—á–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å –¥–µ–∂—É—Ä—Å—Ç–≤–∞–º–∏
        try:
            schedule_with_duties = await parser.get_user_schedule_with_duties(
                user.fullname,
                month_name,
                user.division,
                stp_repo,
                current_day_only=False,
            )
        except Exception:
            schedule_with_duties = {}

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–º–µ–Ω–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
        user_schedule = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        duty_warning = ""

        # –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
        day_key = f"{date_obj.day:02d}"
        for day, (schedule, duty_info) in schedule_with_duties.items():
            if day_key in day:
                user_schedule = schedule or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                if duty_info:
                    duty_warning = (
                        f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –í —ç—Ç–æ –≤—Ä–µ–º—è —É –≤–∞—Å –¥–µ–∂—É—Ä—Å—Ç–≤–æ ({duty_info})"
                    )
                break

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ü–∏–∏
        shift_options = []

        if user_schedule and user_schedule not in ["–ù–µ —É–∫–∞–∑–∞–Ω–æ", "–í", "–û"]:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—Ä–µ–º—è –≤ –≥—Ä–∞—Ñ–∏–∫–µ
            time_pattern = r"\d{1,2}:\d{2}-\d{1,2}:\d{2}"
            has_time = re.search(time_pattern, user_schedule)

            if has_time:
                shift_options.append(("full", "üïò –ü–æ–ª–Ω–∞—è —Å–º–µ–Ω–∞"))
                shift_options.append(("partial", "‚è∞ –ß–∞—Å—Ç—å —Å–º–µ–Ω—ã"))

                # –ï—Å–ª–∏ —ç—Ç–æ —Å–µ–≥–æ–¥–Ω—è –∏ —Å–º–µ–Ω–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å, –¥–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é "–æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è"
                if is_today:
                    current_time = datetime.now()
                    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å–ª–∏ —Å–µ–π—á–∞—Å –ø–æ—Å–ª–µ 9 —É—Ç—Ä–∞, —Ç–æ —Å–º–µ–Ω–∞ –º–æ–≥–ª–∞ –Ω–∞—á–∞—Ç—å—Å—è
                    if current_time.hour >= 9:
                        shift_options = [
                            ("remaining_today", "‚è∞ –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è —Å–µ–≥–æ–¥–Ω—è")
                        ]
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤ –≥—Ä–∞—Ñ–∏–∫–µ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é
                shift_options.append(("partial", "‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Å–º–µ–Ω—ã"))
        else:
            # –ï—Å–ª–∏ –≥—Ä–∞—Ñ–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            user_schedule = "–ù–µ—Ç —Å–º–µ–Ω—ã / –í—ã—Ö–æ–¥–Ω–æ–π"

        return {
            "selected_date": formatted_date,
            "user_schedule": user_schedule,
            "duty_warning": duty_warning,
            "shift_options": shift_options,
        }

    except Exception as e:
        date_obj = datetime.fromisoformat(shift_date).date()
        formatted_date = date_obj.strftime("%d.%m.%Y")
        return {
            "selected_date": formatted_date,
            "user_schedule": f"–û—à–∏–±–∫–∞: {str(e)}",
            "duty_warning": "",
            "shift_options": [],
        }


async def sell_time_input_getter(
    stp_repo: MainRequestsRepo, user: Employee, dialog_manager: DialogManager, **_kwargs
) -> Dict[str, Any]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –æ–∫–Ω–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏."""
    shift_date = dialog_manager.dialog_data.get("shift_date")

    if not shift_date:
        return {"selected_date": "–ù–µ –≤—ã–±—Ä–∞–Ω–∞", "user_schedule": "–ù–µ –Ω–∞–π–¥–µ–Ω"}

    try:
        date_obj = datetime.fromisoformat(shift_date).date()
        formatted_date = date_obj.strftime("%d.%m.%Y")

        parser = ScheduleParser()
        month_name = get_month_name(date_obj.month)

        # –ü–æ–ª—É—á–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_schedule = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        duty_warning = ""

        try:
            schedule_dict = await parser.get_user_schedule_with_duties(
                user.fullname,
                month_name,
                user.division,
                stp_repo,
                current_day_only=False,
            )

            day_key = f"{date_obj.day:02d}"
            for day, (schedule, duty_info) in schedule_dict.items():
                if day_key in day:
                    user_schedule = schedule or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                    if duty_info:
                        duty_warning = (
                            f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Ä–µ–º—è –¥–µ–∂—É—Ä—Å—Ç–≤–∞ ({duty_info})"
                        )
                    break
        except Exception:
            pass

        return {
            "selected_date": formatted_date,
            "user_schedule": user_schedule,
            "duty_warning": duty_warning,
        }

    except Exception:
        date_obj = datetime.fromisoformat(shift_date).date()
        formatted_date = date_obj.strftime("%d.%m.%Y")
        return {
            "selected_date": formatted_date,
            "user_schedule": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞",
            "duty_warning": "",
        }


async def sell_price_getter(dialog_manager: DialogManager, **_kwargs) -> Dict[str, Any]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –æ–∫–Ω–∞ –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã."""
    shift_date = dialog_manager.dialog_data.get("shift_date")
    is_partial = dialog_manager.dialog_data.get("is_partial", False)
    shift_start_time = dialog_manager.dialog_data.get("shift_start_time")
    shift_end_time = dialog_manager.dialog_data.get("shift_end_time")

    shift_type = "—á–∞—Å—Ç—å —Å–º–µ–Ω—ã" if is_partial else "–ø–æ–ª–Ω—É—é —Å–º–µ–Ω—É"
    shift_time = ""

    if is_partial and shift_start_time:
        if shift_end_time:
            shift_time = f"{shift_start_time}-{shift_end_time}"
        else:
            shift_time = f"—Å {shift_start_time}"

    if shift_date:
        date_obj = datetime.fromisoformat(shift_date).date()
        formatted_date = date_obj.strftime("%d.%m.%Y")
        return {
            "selected_date": formatted_date,
            "shift_type": shift_type,
            "shift_time": shift_time if shift_time else None,
        }
    return {
        "selected_date": "–ù–µ –≤—ã–±—Ä–∞–Ω–∞",
        "shift_type": shift_type,
        "shift_time": shift_time if shift_time else None,
    }


async def sell_payment_timing_getter(
    dialog_manager: DialogManager, **_kwargs
) -> Dict[str, Any]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –æ–∫–Ω–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–ø–ª–∞—Ç—ã."""
    data = dialog_manager.dialog_data
    shift_date = data.get("shift_date")
    price = data.get("price", 0)
    is_partial = data.get("is_partial", False)
    shift_type = "—á–∞—Å—Ç—å —Å–º–µ–Ω—ã" if is_partial else "–ø–æ–ª–Ω—É—é —Å–º–µ–Ω—É"

    if shift_date:
        date_obj = datetime.fromisoformat(shift_date).date()
        formatted_date = date_obj.strftime("%d.%m.%Y")
        return {
            "selected_date": formatted_date,
            "shift_type": shift_type,
            "price": price,
        }
    return {
        "selected_date": "–ù–µ –≤—ã–±—Ä–∞–Ω–∞",
        "shift_type": shift_type,
        "price": price,
    }


async def sell_payment_date_getter(
    dialog_manager: DialogManager, **_kwargs
) -> Dict[str, Any]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –æ–∫–Ω–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –ø–ª–∞—Ç–µ–∂–∞."""
    data = dialog_manager.dialog_data
    shift_date = data.get("shift_date")

    if shift_date:
        date_obj = datetime.fromisoformat(shift_date).date()
        formatted_date = date_obj.strftime("%d.%m.%Y")
        return {"shift_date": formatted_date}
    return {"shift_date": "–ù–µ –≤—ã–±—Ä–∞–Ω–∞"}


async def sell_comment_getter(
    dialog_manager: DialogManager, **_kwargs
) -> Dict[str, Any]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –æ–∫–Ω–∞ –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è."""
    data = dialog_manager.dialog_data
    shift_date = data.get("shift_date")
    price = data.get("price", 0)
    is_partial = data.get("is_partial", False)

    shift_type = "—á–∞—Å—Ç—å —Å–º–µ–Ω—ã" if is_partial else "–ø–æ–ª–Ω—É—é —Å–º–µ–Ω—É"

    if shift_date:
        date_obj = datetime.fromisoformat(shift_date).date()
        formatted_date = date_obj.strftime("%d.%m.%Y")
        return {
            "selected_date": formatted_date,
            "shift_type": shift_type,
            "price": price,
        }
    return {
        "selected_date": "–ù–µ –≤—ã–±—Ä–∞–Ω–∞",
        "shift_type": shift_type,
        "price": price,
    }


async def sell_confirmation_getter(
    dialog_manager: DialogManager, **_kwargs
) -> Dict[str, Any]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –æ–∫–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    data = dialog_manager.dialog_data

    # –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    shift_date = data.get("shift_date")
    price = data.get("price", 0)
    is_partial = data.get("is_partial", False)
    payment_type = data.get("payment_type", "immediate")
    payment_date = data.get("payment_date")
    comment = data.get("comment")

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Å–º–µ–Ω—ã
    formatted_shift_date = "–ù–µ –≤—ã–±—Ä–∞–Ω–∞"
    if shift_date:
        date_obj = datetime.fromisoformat(shift_date).date()
        formatted_shift_date = date_obj.strftime("%d.%m.%Y")

    # –¢–∏–ø —Å–º–µ–Ω—ã
    shift_type = "–ß–∞—Å—Ç—å —Å–º–µ–Ω—ã" if is_partial else "–ü–æ–ª–Ω–∞—è —Å–º–µ–Ω–∞"

    # –í—Ä–µ–º—è —Å–º–µ–Ω—ã
    shift_start = data.get("shift_start_time")
    shift_end = data.get("shift_end_time")
    shift_time_info = f"—Å {shift_start} –¥–æ {shift_end}"
    if is_partial and data.get("shift_end_time"):
        shift_time_info = f"{shift_start}-{data.get('shift_end_time')}"

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ
    payment_info = "–°—Ä–∞–∑—É –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ"
    if payment_type == "on_date" and payment_date:
        payment_date_obj = datetime.fromisoformat(payment_date).date()
        formatted_payment_date = payment_date_obj.strftime("%d.%m.%Y")
        payment_info = f"–î–æ {formatted_payment_date}"

    result = {
        "shift_date": formatted_shift_date,
        "shift_type": shift_type,
        "shift_time": shift_time_info,
        "price": price,
        "payment_info": payment_info,
    }

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –µ—Å–ª–∏ –µ—Å—Ç—å
    if comment:
        result["comment"] = comment

    return result


def get_month_name(month_number: int) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."""
    months = [
        "",
        "–Ø–Ω–≤–∞—Ä—å",
        "–§–µ–≤—Ä–∞–ª—å",
        "–ú–∞—Ä—Ç",
        "–ê–ø—Ä–µ–ª—å",
        "–ú–∞–π",
        "–ò—é–Ω—å",
        "–ò—é–ª—å",
        "–ê–≤–≥—É—Å—Ç",
        "–°–µ–Ω—Ç—è–±—Ä—å",
        "–û–∫—Ç—è–±—Ä—å",
        "–ù–æ—è–±—Ä—å",
        "–î–µ–∫–∞–±—Ä—å",
    ]
    return months[month_number] if 1 <= month_number <= 12 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"


async def prepare_calendar_data_for_exchange(
    stp_repo: MainRequestsRepo, user: Employee, dialog_manager: DialogManager
) -> None:
    """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–º–µ–Ω–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        current_date = datetime.now().date()

        parser = ScheduleParser()
        month_name = get_month_name(current_date.month)

        # –ü–æ–ª—É—á–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
        try:
            schedule_dict = await parser.get_user_schedule_with_duties(
                user.fullname,
                month_name,
                user.division,
                stp_repo,
                current_day_only=False,
            )

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–Ω–∏ –∫–æ–≥–¥–∞ –µ—Å—Ç—å —Å–º–µ–Ω—ã
            shift_dates = {}
            for day, (schedule, duty_info) in schedule_dict.items():
                if schedule and schedule not in ["–ù–µ —É–∫–∞–∑–∞–Ω–æ", "–í", "–û"]:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –¥–Ω—è
                    day_match = re.search(r"(\d{1,2})", day)
                    if day_match:
                        day_num = f"{int(day_match.group(1)):02d}"
                        shift_dates[day_num] = {
                            "schedule": schedule,
                            "duty_info": duty_info,
                        }

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ dialog_data –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
            dialog_manager.dialog_data["shift_dates"] = shift_dates

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏
            gender = determine_user_gender(user.fullname)
            dialog_manager.dialog_data["user_gender"] = gender

        except Exception:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ—Å—Ç–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–º–µ–Ω—ã
            dialog_manager.dialog_data["shift_dates"] = {}

    except Exception:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ—Å—Ç–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–º–µ–Ω—ã
        dialog_manager.dialog_data["shift_dates"] = {}


def determine_user_gender(fullname: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏."""
    if not fullname:
        return "unknown"

    # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–∫–æ–Ω—á–∞–Ω–∏–π –∏–º–µ–Ω
    name_parts = fullname.split()
    if len(name_parts) >= 2:
        first_name = name_parts[1].lower()  # –í—Ç–æ—Ä–æ–µ —Å–ª–æ–≤–æ –æ–±—ã—á–Ω–æ –∏–º—è

        # –ú—É–∂—Å–∫–∏–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è
        male_endings = ["–∏—á", "–µ–≤", "–æ–≤", "–∏–Ω", "–∞–Ω", "—ë–Ω", "–æ–Ω", "–∏–π", "–µ–π", "–∞–π"]
        # –ñ–µ–Ω—Å–∫–∏–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è
        female_endings = [
            "–Ω–∞",
            "—Ä–∞",
            "–ª–∞",
            "–¥–∞",
            "–≥–∞",
            "–∫–∞",
            "—Å–∞",
            "—Ç–∞",
            "–≤–∞",
            "—å—è",
            "–∏—è",
            "–∞—è",
        ]

        for ending in female_endings:
            if first_name.endswith(ending):
                return "female"

        for ending in male_endings:
            if first_name.endswith(ending):
                return "male"

    return "unknown"


async def exchange_buy_getter(
    stp_repo: MainRequestsRepo, user: Employee, dialog_manager: DialogManager, **_kwargs
) -> Dict[str, Any]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –æ–∫–Ω–∞ –ø–æ–∫—É–ø–∫–∏ –æ–±–º–µ–Ω–æ–≤.

    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç sell-–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (—Ç–æ, —á—Ç–æ –º—ã –º–æ–∂–µ–º –∫—É–ø–∏—Ç—å).
    """
    user_id = dialog_manager.event.from_user.id

    try:
        # –ü–æ–ª—É—á–∞–µ–º sell-–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (—Ç–æ, —á—Ç–æ –¥—Ä—É–≥–∏–µ –ø—Ä–æ–¥–∞—é—Ç –∏ –º—ã –º–æ–∂–µ–º –∫—É–ø–∏—Ç—å)
        exchanges = await stp_repo.exchange.get_active_exchanges(
            exclude_user_id=user_id,
            division="–ù–¶–ö" if user.division == "–ù–¶–ö" else ["–ù–¢–ü1", "–ù–¢–ü2"],
            exchange_type="sell",
        )

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        available_exchanges = []
        for exchange in exchanges:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
            time_str = f"{exchange.shift_start_time}-{exchange.shift_end_time}"

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            date_str = exchange.shift_date.strftime("%d.%m.%Y")

            available_exchanges.append({
                "id": exchange.id,
                "time": time_str,
                "date": date_str,
                "price": exchange.price,
                "seller_id": exchange.seller_id,
            })

        return {
            "available_exchanges": available_exchanges,
            "exchanges_length": len(available_exchanges),
            "has_exchanges": len(available_exchanges) > 0,
        }

    except Exception:
        return {
            "available_exchanges": [],
            "has_exchanges": False,
        }


async def exchange_sell_getter(
    stp_repo: MainRequestsRepo, user: Employee, dialog_manager: DialogManager, **_kwargs
) -> Dict[str, Any]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –æ–∫–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ –æ–±–º–µ–Ω–æ–≤.

    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç buy-–∑–∞–ø—Ä–æ—Å—ã (—Ç–æ, —á—Ç–æ –¥—Ä—É–≥–∏–µ —Ö–æ—Ç—è—Ç –∫—É–ø–∏—Ç—å –∏ –º—ã –º–æ–∂–µ–º –ø—Ä–æ–¥–∞—Ç—å).
    """
    user_id = dialog_manager.event.from_user.id

    try:
        # –ü–æ–ª—É—á–∞–µ–º buy-–∑–∞–ø—Ä–æ—Å—ã (—Ç–æ, —á—Ç–æ –¥—Ä—É–≥–∏–µ —Ö–æ—Ç—è—Ç –∫—É–ø–∏—Ç—å –∏ –º—ã –º–æ–∂–µ–º –ø—Ä–æ–¥–∞—Ç—å)
        buy_requests = await stp_repo.exchange.get_active_exchanges(
            exclude_user_id=user_id,
            division="–ù–¶–ö" if user.division == "–ù–¶–ö" else ["–ù–¢–ü1", "–ù–¢–ü2"],
            exchange_type="buy",
        )

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        available_buy_requests = []
        for exchange in buy_requests:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
            time_str = f"{exchange.shift_start_time}-{exchange.shift_end_time}"

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            date_str = exchange.shift_date.strftime("%d.%m.%Y")

            available_buy_requests.append({
                "id": exchange.id,
                "time": time_str,
                "date": date_str,
                "price": exchange.price,
                "buyer_id": exchange.seller_id,  # –í buy-–∑–∞–ø—Ä–æ—Å–µ seller_id —ç—Ç–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ buyer_id
            })

        return {
            "available_buy_requests": available_buy_requests,
            "buy_requests_length": len(available_buy_requests),
            "has_buy_requests": len(available_buy_requests) > 0,
        }

    except Exception:
        return {
            "available_buy_requests": [],
            "has_buy_requests": False,
        }


async def exchange_buy_detail_getter(
    stp_repo: MainRequestsRepo, dialog_manager: DialogManager, **kwargs
) -> Dict[str, Any]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±–º–µ–Ω–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ."""
    if dialog_manager.start_data:
        exchange_id = dialog_manager.start_data.get("exchange_id", None)
    else:
        exchange_id = dialog_manager.dialog_data.get("exchange_id", None)

    if not exchange_id:
        return {"error": "–û–±–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω"}

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ–±–º–µ–Ω–∞
        exchange = await stp_repo.exchange.get_exchange_by_id(exchange_id)
        if not exchange:
            return {"error": "–û–±–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω"}

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥–∞–≤—Ü–µ
        seller = await stp_repo.employee.get_users(user_id=exchange.seller_id)
        seller_name = format_fullname(
            seller.fullname,
            short=True,
            gender_emoji=True,
            username=seller.username,
            user_id=seller.user_id,
        )

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        shift_date = exchange.shift_date.strftime("%d.%m.%Y")

        shift_time = f"{exchange.shift_start_time}-{exchange.shift_end_time}"

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ
        if exchange.payment_type == "immediate":
            payment_info = "–°—Ä–∞–∑—É –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ"
        elif exchange.payment_date:
            payment_info = f"–î–æ {exchange.payment_date.strftime('%d.%m.%Y')}"
        else:
            payment_info = "–ü–æ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"

        deeplink = f"exchange_{exchange.id}"

        return {
            "shift_date": shift_date,
            "seller_name": seller_name,
            "shift_time": shift_time,
            "price": exchange.price,
            "payment_info": payment_info,
            "deeplink": deeplink,
        }

    except Exception:
        return {"error": "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö"}


async def exchange_sell_detail_getter(
    stp_repo: MainRequestsRepo, dialog_manager: DialogManager, **kwargs
) -> Dict[str, Any]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É (buy request)."""
    if dialog_manager.start_data:
        exchange_id = dialog_manager.start_data.get("exchange_id", None)
    else:
        exchange_id = dialog_manager.dialog_data.get("exchange_id", None)

    if not exchange_id:
        return {"error": "–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"}

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ–±–º–µ–Ω–∞
        exchange = await stp_repo.exchange.get_exchange_by_id(exchange_id)
        if not exchange:
            return {"error": "–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"}

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ buy-–∑–∞–ø—Ä–æ—Å
        if exchange.type != "buy":
            return {"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞"}

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ (–≤ buy-–∑–∞–ø—Ä–æ—Å–µ seller_id —ç—Ç–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ buyer_id)
        buyer = await stp_repo.employee.get_users(user_id=exchange.seller_id)
        buyer_name = format_fullname(
            buyer.fullname,
            short=True,
            gender_emoji=True,
            username=buyer.username,
            user_id=buyer.user_id,
        )

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        shift_date = exchange.shift_date.strftime("%d.%m.%Y")
        shift_time = f"{exchange.shift_start_time}-{exchange.shift_end_time}"

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ
        if exchange.payment_type == "immediate":
            payment_info = "–°—Ä–∞–∑—É –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ"
        elif exchange.payment_date:
            payment_info = f"–î–æ {exchange.payment_date.strftime('%d.%m.%Y')}"
        else:
            payment_info = "–ü–æ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"

        deeplink = f"buy_request_{exchange.id}"

        return {
            "shift_date": shift_date,
            "shift_time": shift_time,
            "price": exchange.price,
            "buyer_name": buyer_name,
            "payment_info": payment_info,
            "deeplink": deeplink,
        }

    except Exception:
        return {"error": "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö"}


# Buy flow getters


async def buy_date_getter(dialog_manager: DialogManager, **_kwargs) -> Dict[str, Any]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –æ–∫–Ω–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –ø–æ–∫—É–ø–∫–∏."""
    return {}


async def buy_hours_getter(dialog_manager: DialogManager, **_kwargs) -> Dict[str, Any]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –æ–∫–Ω–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–∫—É–ø–∫–∏."""
    buy_date = dialog_manager.dialog_data.get("buy_date")
    any_date = dialog_manager.dialog_data.get("any_date", False)

    result = {}

    if buy_date:
        date_obj = datetime.fromisoformat(buy_date).date()
        formatted_date = date_obj.strftime("%d.%m.%Y")
        result["selected_date"] = formatted_date
    elif any_date:
        result["any_date"] = True

    return result


async def buy_price_getter(dialog_manager: DialogManager, **_kwargs) -> Dict[str, Any]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –æ–∫–Ω–∞ –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã –ø–æ–∫—É–ø–∫–∏."""
    data = dialog_manager.dialog_data

    buy_date = data.get("buy_date")
    any_date = data.get("any_date", False)
    buy_start_time = data.get("buy_start_time")
    buy_end_time = data.get("buy_end_time")
    any_hours = data.get("any_hours", False)

    result = {}

    # –î–∞—Ç–∞
    if buy_date:
        date_obj = datetime.fromisoformat(buy_date).date()
        formatted_date = date_obj.strftime("%d.%m.%Y")
        result["selected_date"] = formatted_date
    elif any_date:
        result["any_date"] = True

    # –í—Ä–µ–º—è
    if buy_start_time and buy_end_time:
        result["hours_range"] = f"{buy_start_time}-{buy_end_time}"
    elif any_hours:
        result["any_hours"] = True

    return result


async def buy_comment_getter(
    dialog_manager: DialogManager, **_kwargs
) -> Dict[str, Any]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –æ–∫–Ω–∞ –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ–∫—É–ø–∫–∏."""
    data = dialog_manager.dialog_data

    buy_date = data.get("buy_date")
    any_date = data.get("any_date", False)
    buy_start_time = data.get("buy_start_time")
    buy_end_time = data.get("buy_end_time")
    any_hours = data.get("any_hours", False)
    price_per_hour = data.get("buy_price_per_hour", 0)

    result = {"price_per_hour": price_per_hour}

    # –î–∞—Ç–∞
    if buy_date:
        date_obj = datetime.fromisoformat(buy_date).date()
        formatted_date = date_obj.strftime("%d.%m.%Y")
        result["selected_date"] = formatted_date
    elif any_date:
        result["any_date"] = True

    # –í—Ä–µ–º—è
    if buy_start_time and buy_end_time:
        result["hours_range"] = f"{buy_start_time}-{buy_end_time}"
    elif any_hours:
        result["any_hours"] = True

    return result


async def buy_confirmation_getter(
    dialog_manager: DialogManager, **_kwargs
) -> Dict[str, Any]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –æ–∫–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏."""
    data = dialog_manager.dialog_data

    buy_date = data.get("buy_date")
    any_date = data.get("any_date", False)
    buy_start_time = data.get("buy_start_time")
    buy_end_time = data.get("buy_end_time")
    any_hours = data.get("any_hours", False)
    price_per_hour = data.get("buy_price_per_hour", 0)
    comment = data.get("buy_comment")

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞—Ç–µ
    if buy_date:
        date_obj = datetime.fromisoformat(buy_date).date()
        date_info = date_obj.strftime("%d.%m.%Y")
    else:
        date_info = "–õ—é–±–∞—è –¥–∞—Ç–∞"

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏
    if buy_start_time and buy_end_time:
        time_info = f"{buy_start_time}-{buy_end_time}"
    else:
        time_info = "–õ—é–±–æ–µ –≤—Ä–µ–º—è"

    result = {
        "date_info": date_info,
        "time_info": time_info,
        "price_per_hour": price_per_hour,
    }

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –µ—Å–ª–∏ –µ—Å—Ç—å
    if comment:
        result["comment"] = comment

    return result
