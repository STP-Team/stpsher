"""–ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è –±–∏—Ä–∂–∏ –ø–æ–¥–º–µ–Ω."""

import logging
import re
from datetime import datetime
from typing import Any, Dict

from aiogram import Bot
from aiogram.utils.deep_linking import create_start_link
from aiogram_dialog import DialogManager
from aiogram_dialog.widgets.kbd import ManagedCheckbox
from stp_database import Employee, Exchange, MainRequestsRepo

from tgbot.misc.dicts import exchange_emojis
from tgbot.misc.helpers import format_fullname, strftime_date, tz
from tgbot.services.files_processing.parsers.schedule import (
    DutyScheduleParser,
    ScheduleParser,
)

logger = logging.getLogger(__name__)


def get_month_name(month_number: int) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."""
    months = [
        "",
        "–Ø–Ω–≤–∞—Ä—å",
        "–§–µ–≤—Ä–∞–ª—å",
        "–ú–∞—Ä—Ç",
        "–ê–ø—Ä–µ–ª—å",
        "–ú–∞–π",
        "–ò—é–Ω—å",
        "–ò—é–ª—å",
        "–ê–≤–≥—É—Å—Ç",
        "–°–µ–Ω—Ç—è–±—Ä—å",
        "–û–∫—Ç—è–±—Ä—å",
        "–ù–æ—è–±—Ä—å",
        "–î–µ–∫–∞–±—Ä—å",
    ]
    return months[month_number] if 1 <= month_number <= 12 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"


async def prepare_calendar_data_for_exchange(
    stp_repo: MainRequestsRepo, user: Employee, dialog_manager: DialogManager
) -> None:
    """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–º–µ–Ω–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        current_date = datetime.now().date()

        parser = ScheduleParser()
        month_name = get_month_name(current_date.month)

        # –ü–æ–ª—É—á–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
        try:
            schedule_dict = await parser.get_user_schedule_with_duties(
                user.fullname,
                month_name,
                user.division,
                stp_repo,
                current_day_only=False,
            )

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–Ω–∏ –∫–æ–≥–¥–∞ –µ—Å—Ç—å —Å–º–µ–Ω—ã
            shift_dates = {}
            for day, (schedule, duty_info) in schedule_dict.items():
                if schedule and schedule not in ["–ù–µ —É–∫–∞–∑–∞–Ω–æ", "–í", "–û"]:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –¥–Ω—è
                    day_match = re.search(r"(\d{1,2})", day)
                    if day_match:
                        day_num = f"{int(day_match.group(1)):02d}"
                        shift_dates[day_num] = {
                            "schedule": schedule,
                            "duty_info": duty_info,
                        }

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ dialog_data –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
            dialog_manager.dialog_data["shift_dates"] = shift_dates

        except Exception:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ—Å—Ç–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–º–µ–Ω—ã
            dialog_manager.dialog_data["shift_dates"] = {}

    except Exception:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ—Å—Ç–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–º–µ–Ω—ã
        dialog_manager.dialog_data["shift_dates"] = {}


async def get_exchange_shift_time(start_time: str, end_time: str):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è –∏–∑ datetime —Å—Ç—Ä–æ–∫
    start_time_str = start_time.split("T")[1][:5] if "T" in start_time else start_time
    end_time_str = end_time.split("T")[1][:5] if "T" in end_time else end_time

    shift_time = f"{start_time_str}-{end_time_str}"
    return shift_time


async def get_exchange_type(exchange: Exchange, is_seller: bool) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–∏–ø —Å–¥–µ–ª–∫–∏.

    Args:
        exchange:
        is_seller:

    Returns:
        –¢–∏–ø —Å–¥–µ–ª–∫–∏: "üìâ –ü—Ä–æ–¥–∞–º" –∏–ª–∏ "üìà –ö—É–ø–ª—é"
    """
    if exchange.type == "sell":
        operation_type = "üìâ –ü—Ä–æ–¥–∞–º"
    else:
        operation_type = "üìà –ö—É–ø–ª—é"

    return operation_type


async def get_exchange_status(exchange: Exchange) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏.

    Args:
        exchange: –≠–∫–∑–µ–º–ø–ª—è—Ä —Å–¥–µ–ª–∫–∏ —Å –º–æ–¥–µ–ª—å—é Exchange

    Returns:
        –°—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏
    """
    if exchange.status == "active":
        status = f"{exchange_emojis['active']} –ê–∫—Ç–∏–≤–Ω–∞—è"
    elif exchange.status == "sold":
        status = f"{exchange_emojis['sold']} –ó–∞–≤–µ—Ä—à–µ–Ω–∞"
    elif exchange.status == "canceled":
        status = f"{exchange_emojis['canceled']} –û—Ç–º–µ–Ω–µ–Ω–∞"
    elif exchange.status == "expired":
        status = f"{exchange_emojis['expired']} –ò—Å—Ç–µ–∫—à–∞—è"
    else:
        status = f"‚ÑπÔ∏è {exchange.status.title()}"

    return status


async def get_exchange_hours(exchange: Exchange) -> float | None:
    """–†–∞—Å—á–µ—Ç –∫–æ–ª-–≤–∞ —á–∞—Å–æ–≤ —Å–¥–µ–ª–∫–∏.

    Args:
        exchange: –≠–∫–∑–µ–º–ø–ª—è—Ä —Å–¥–µ–ª–∫–∏ —Å –º–æ–¥–µ–ª—å—é Exchange

    Returns:
        –ö–æ–ª-–≤–æ —á–∞—Å–æ–≤ –∏–ª–∏ None
    """
    if exchange.start_time and exchange.end_time:
        try:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ TIMESTAMP –ø–æ–ª–µ–π
            duration = exchange.end_time - exchange.start_time
            exchange_hours = duration.total_seconds() / 3600  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —á–∞—Å—ã
            return exchange_hours
        except Exception as e:
            logger.error(f"[–ë–∏—Ä–∂–∞] –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —á–∞—Å–æ–≤ —Å–¥–µ–ª–∫–∏: {e}")
            return None


async def get_exchange_price_per_hour(exchange: Exchange):
    """–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ–¥–Ω–æ–≥–æ —á–∞—Å–∞ –≤ —Å–¥–µ–ª–∫–µ.

    Args:
        exchange: –≠–∫–∑–µ–º–ø–ª—è—Ä —Å–¥–µ–ª–∫–∏ —Å –º–æ–¥–µ–ª—å—é Exchange

    Returns:
        –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ —á–∞—Å–∞
    """
    price = 0
    exchange_hours = await get_exchange_hours(exchange)

    if exchange_hours and exchange_hours > 0 and exchange.price:
        price = round(exchange.price / exchange_hours, 2)

    return price


async def get_exchange_text(
    stp_repo: MainRequestsRepo, exchange: Exchange, user_id: int
) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–¥–µ–ª–∫–µ.

    Args:
        exchange: –≠–∫–∑–µ–º–ø–ª—è—Ä —Å–¥–µ–ª–∫–∏ —Å –º–æ–¥–µ–ª—å—é Exchange
        user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä Telegram

    Returns:
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    """
    exchange_type = await get_exchange_type(
        exchange, is_seller=exchange.seller_id == user_id
    )

    # –ó–∞—â–∏—Ç–∞ –æ—Ç None –∑–Ω–∞—á–µ–Ω–∏–π –≤ –¥–∞—Ç–∞—Ö/–≤—Ä–µ–º–µ–Ω–∏
    if exchange.start_time:
        shift_date = exchange.start_time.strftime("%d.%m.%Y")
        start_time_str = exchange.start_time.strftime("%H:%M")
    else:
        shift_date = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        start_time_str = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

    if exchange.end_time:
        end_time_str = exchange.end_time.strftime("%H:%M")
    else:
        end_time_str = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

    shift_time = f"{start_time_str}-{end_time_str}"
    shift_hours = await get_exchange_hours(exchange)
    price = exchange.price

    # –ó–∞—â–∏—Ç–∞ –æ—Ç None –∑–Ω–∞—á–µ–Ω–∏–π –≤ —á–∞—Å–∞—Ö
    hours_text = f"{shift_hours:g} —á." if shift_hours is not None else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

    if exchange.type == "sell":
        seller = await stp_repo.employee.get_users(user_id=exchange.seller_id)
        seller_name = format_fullname(
            seller.fullname, True, True, seller.username, seller.username
        )
        price_per_hour = await get_exchange_price_per_hour(exchange)
        price_per_hour_text = (
            f"{price_per_hour:g} —Ä./—á." if price_per_hour is not None else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        )
        exchange_text = f"""<blockquote><b>{exchange_type}:</b>
<code>{shift_time} ({hours_text}) {shift_date} –ü–†–ú</code>
üí∞ <b>–¶–µ–Ω–∞:</b>
<code>{price:g} —Ä. ({price_per_hour_text})</code> {"—Å—Ä–∞–∑—É" if exchange.payment_type == "immediate" else exchange.payment_date}
üë§ <b>–ü—Ä–æ–¥–∞–≤–µ—Ü:</b> 
{seller_name}</blockquote>"""
    else:
        buyer = await stp_repo.employee.get_users(user_id=exchange.buyer_id)
        buyer_name = format_fullname(
            buyer.fullname, True, True, buyer.username, buyer.username
        )
        exchange_text = f"""<blockquote><b>{exchange_type}:</b>
<code>{shift_time} ({hours_text}) {shift_date} –ü–†–ú</code>
üí∞ <b>–¶–µ–Ω–∞:</b>
<code>{price:g} —Ä./—á.</code> {"—Å—Ä–∞–∑—É" if exchange.payment_type == "immediate" else exchange.payment_date}
üë§ <b>–ü—Ä–æ–¥–∞–≤–µ—Ü:</b>
{buyer_name}</blockquote>"""
    return exchange_text


async def exchanges_getter(user: Employee, **_kwargs):
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø–æ–¥–º–µ–Ω.

    Args:
        user: –≠–∫–∑–µ–º–ø–ª—è—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–æ–¥–µ–ª—å—é Employee.

    Returns:
        True –µ—Å–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –∏–∑ –ù–¶–ö, –∏–Ω–∞—á–µ False
    """
    return {"is_nck": user.division == "–ù–¶–ö"}


async def exchange_buy_getter(
    stp_repo: MainRequestsRepo, user: Employee, dialog_manager: DialogManager, **_kwargs
) -> Dict[str, Any]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –æ–∫–Ω–∞ –ø–æ–∫—É–ø–∫–∏ —á–∞—Å–æ–≤.

    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂ (—Ç–æ, —á—Ç–æ –º—ã –º–æ–∂–µ–º –∫—É–ø–∏—Ç—å).

    Args:
        stp_repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π STP
        user: –≠–∫–∑–µ–º–ø–ª—è—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–æ–¥–µ–ª—å—é Employee
        dialog_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∏–∞–ª–æ–≥–∞

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å–¥–µ–ª–∫–∞–º–∏
    """
    from datetime import date

    from aiogram_dialog.widgets.kbd import ManagedRadio, ManagedToggle

    user_id = dialog_manager.event.from_user.id

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–¥–µ–ª–∫–∏ –ø—Ä–æ–¥–∞–∂ (—Ç–æ, —á—Ç–æ –¥—Ä—É–≥–∏–µ –ø—Ä–æ–¥–∞—é—Ç –∏ –º—ã –º–æ–∂–µ–º –∫—É–ø–∏—Ç—å)
        exchanges = await stp_repo.exchange.get_active_exchanges(
            exclude_user_id=user_id,
            division="–ù–¶–ö" if user.division == "–ù–¶–ö" else ["–ù–¢–ü1", "–ù–¢–ü2"],
            exchange_type="sell",
        )

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        day_filter_checkbox: ManagedRadio = dialog_manager.find("day_filter")
        day_filter_value = (
            day_filter_checkbox.get_checked() if day_filter_checkbox else "all"
        )

        shift_filter_checkbox: ManagedRadio = dialog_manager.find("shift_filter")
        shift_filter_value = (
            shift_filter_checkbox.get_checked() if shift_filter_checkbox else "all"
        )

        date_sort_toggle: ManagedToggle = dialog_manager.find("date_sort")
        date_sort_value = (
            date_sort_toggle.get_checked() if date_sort_toggle else "nearest"
        )

        price_sort_toggle: ManagedToggle = dialog_manager.find("price_sort")
        price_sort_value = (
            price_sort_toggle.get_checked() if price_sort_toggle else "cheap"
        )

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        from datetime import timedelta

        filtered_exchanges = []
        today = date.today()
        tomorrow = today + timedelta(days=1)

        for exchange in exchanges:
            exchange_date = exchange.start_time.date()

            # –§–∏–ª—å—Ç—Ä –ø–æ –¥–Ω—è–º
            if day_filter_value == "today" and exchange_date != today:
                continue
            elif day_filter_value == "tomorrow" and exchange_date != tomorrow:
                continue

            # –§–∏–ª—å—Ç—Ä –ø–æ —Å–º–µ–Ω–∞–º (–ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–º–µ–Ω)
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–ª–∏—á–∏—è —Å–º–µ–Ω—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            if shift_filter_value == "no_shift":
                # –£—Å–ª–æ–≤–Ω–æ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —Å–º–µ–Ω—ã —Å 8:00 –¥–æ 20:00 - —ç—Ç–æ –¥–Ω–µ–≤–Ω—ã–µ —Å–º–µ–Ω—ã
                start_hour = exchange.start_time.hour
                if 8 <= start_hour <= 20:
                    continue
            elif shift_filter_value == "shift":
                start_hour = exchange.start_time.hour
                if not (8 <= start_hour <= 20):
                    continue

            filtered_exchanges.append(exchange)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Å—Ç–∞–≤–Ω–æ–π –∫–ª—é—á —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏
        def sort_key(exchange):
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è –¥–∞—Ç—ã
            date_multiplier = 1 if date_sort_value == "nearest" else -1
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è —Ü–µ–Ω—ã
            price_multiplier = 1 if price_sort_value == "cheap" else -1

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ—Ä—Ç–µ–∂ (–¥–∞—Ç–∞, —Ü–µ–Ω–∞) —Å —É—á–µ—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º timestamp –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            return (
                date_multiplier * exchange.start_time.timestamp(),
                price_multiplier * exchange.price,
            )

        filtered_exchanges.sort(key=sort_key)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        available_exchanges = []
        for exchange in filtered_exchanges:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∏–∑ start_time –∏ end_time —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç None
            if exchange.start_time and exchange.end_time:
                time_str = f"{exchange.start_time.strftime('%H:%M')}-{exchange.end_time.strftime('%H:%M')}"
            elif exchange.start_time:
                time_str = f"{exchange.start_time.strftime('%H:%M')}-–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            else:
                time_str = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏–∑ start_time —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç None
            if exchange.start_time:
                date_str = exchange.start_time.strftime("%d.%m.%Y")
            else:
                date_str = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

            available_exchanges.append({
                "id": exchange.id,
                "time": time_str,
                "date": date_str,
                "price": exchange.price,
                "seller_id": exchange.seller_id,
            })

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã)
        filter_text_parts = []

        # –§–∏–ª—å—Ç—Ä –ø–æ –¥–Ω—è–º - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if day_filter_value == "all":
            filter_text_parts.append("–ü–µ—Ä–∏–æ–¥: üìÖ –í—Å–µ –¥–Ω–∏")
        elif day_filter_value == "today":
            filter_text_parts.append("–ü–µ—Ä–∏–æ–¥: üìÖ –¢–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è")
        elif day_filter_value == "tomorrow":
            filter_text_parts.append("–ü–µ—Ä–∏–æ–¥: üìÖ –¢–æ–ª—å–∫–æ –∑–∞–≤—Ç—Ä–∞")
        elif day_filter_value == "current_week":
            filter_text_parts.append("–ü–µ—Ä–∏–æ–¥: üìÖ –¢–æ–ª—å–∫–æ —ç—Ç–∞ –Ω–µ–¥–µ–ª—è")
        elif day_filter_value == "current_month":
            filter_text_parts.append("–ü–µ—Ä–∏–æ–¥: üìÖ –¢–æ–ª—å–∫–æ —ç—Ç–æ—Ç –º–µ—Å—è—Ü")

        # –§–∏–ª—å—Ç—Ä –ø–æ —Å–º–µ–Ω–∞–º - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if shift_filter_value == "all":
            filter_text_parts.append("–°–º–µ–Ω–∞: ‚≠ê –í—Å–µ")
        elif shift_filter_value == "no_shift":
            filter_text_parts.append("–°–º–µ–Ω–∞: üåô –ë–µ–∑ —Å–º–µ–Ω—ã")
        elif shift_filter_value == "shift":
            filter_text_parts.append("–°–º–µ–Ω–∞: ‚òÄÔ∏è –°–æ —Å–º–µ–Ω–æ–π")

        filters_text = "\n".join(filter_text_parts) if filter_text_parts else ""

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        sorting_text_parts = []

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø–æ –¥–∞—Ç–µ –≤—Å–µ–≥–¥–∞ (—ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π –∫—Ä–∏—Ç–µ—Ä–∏–π)
        if date_sort_value == "nearest":
            sorting_text_parts.append("–ü–æ –¥–∞—Ç–µ: üìà –°–Ω–∞—á–∞–ª–∞ –±–ª–∏–∂–∞–π—à–∏–µ")
        else:
            sorting_text_parts.append("–ü–æ –¥–∞—Ç–µ: üìâ –°–Ω–∞—á–∞–ª–∞ –¥–∞–ª—å–Ω–∏–µ")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø–æ —Ü–µ–Ω–µ –≤—Å–µ–≥–¥–∞ (–≤—Ç–æ—Ä–∏—á–Ω—ã–π –∫—Ä–∏—Ç–µ—Ä–∏–π)
        if price_sort_value == "cheap":
            sorting_text_parts.append("–ü–æ —Ü–µ–Ω–µ: üí∞ –°–Ω–∞—á–∞–ª–∞ –¥–µ—à–µ–≤—ã–µ")
        else:
            sorting_text_parts.append("–ü–æ —Ü–µ–Ω–µ: üí∏ –°–Ω–∞—á–∞–ª–∞ –¥–æ—Ä–æ–≥–∏–µ")

        sorting_text = "\n".join(sorting_text_parts)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        is_default_settings = (
            day_filter_value == "all"
            and shift_filter_value == "all"
            and date_sort_value == "nearest"
            and price_sort_value == "cheap"
        )

        return {
            "available_exchanges": available_exchanges,
            "exchanges_length": len(available_exchanges),
            "has_exchanges": len(available_exchanges) > 0,
            "active_filters": filters_text,
            "has_active_filters": True,  # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            "active_sorting": sorting_text,
            "has_active_sorting": True,  # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
            "show_reset_button": not is_default_settings,
        }

    except Exception:
        return {
            "available_exchanges": [],
            "has_exchanges": False,
            "active_filters": "–ü–µ—Ä–∏–æ–¥: üìÖ –í—Å–µ –¥–Ω–∏\n–°–º–µ–Ω–∞: ‚≠ê –í—Å–µ",
            "has_active_filters": True,
            "active_sorting": "–ü–æ –¥–∞—Ç–µ: üìà –°–Ω–∞—á–∞–ª–∞ –±–ª–∏–∂–∞–π—à–∏–µ\n–ü–æ —Ü–µ–Ω–µ: üí∞ –°–Ω–∞—á–∞–ª–∞ –¥–µ—à–µ–≤—ã–µ",
            "has_active_sorting": True,
            "show_reset_button": False,
        }


async def exchange_sell_getter(
    stp_repo: MainRequestsRepo, user: Employee, dialog_manager: DialogManager, **_kwargs
) -> Dict[str, Any]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –æ–∫–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ —á–∞—Å–æ–≤.

    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ–∫—É–ø–æ–∫ (—Ç–æ, —á—Ç–æ –¥—Ä—É–≥–∏–µ —Ö–æ—Ç—è—Ç –∫—É–ø–∏—Ç—å –∏ –º—ã –º–æ–∂–µ–º –ø—Ä–æ–¥–∞—Ç—å).

    Args:
        stp_repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π STP
        user: –≠–∫–∑–µ–º–ø–ª—è—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–æ–¥–µ–ª—å—é Employee
        dialog_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∏–∞–ª–æ–≥–∞

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å–¥–µ–ª–∫–∞–º–∏
    """
    user_id = dialog_manager.event.from_user.id

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–¥–µ–ª–∫–∏ –ø–æ–∫—É–ø–æ–∫ (—Ç–æ, —á—Ç–æ –¥—Ä—É–≥–∏–µ —Ö–æ—Ç—è—Ç –∫—É–ø–∏—Ç—å –∏ –º—ã –º–æ–∂–µ–º –ø—Ä–æ–¥–∞—Ç—å)
        buy_requests = await stp_repo.exchange.get_active_exchanges(
            exclude_user_id=user_id,
            division="–ù–¶–ö" if user.division == "–ù–¶–ö" else ["–ù–¢–ü1", "–ù–¢–ü2"],
            exchange_type="buy",
        )

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        available_buy_requests = []
        for exchange in buy_requests:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∏–∑ start_time –∏ end_time —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç None
            if exchange.start_time and exchange.end_time:
                time_str = f"{exchange.start_time.strftime('%H:%M')}-{exchange.end_time.strftime('%H:%M')}"
            elif exchange.start_time:
                time_str = f"{exchange.start_time.strftime('%H:%M')}-–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            else:
                time_str = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏–∑ start_time —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç None
            if exchange.start_time:
                date_str = exchange.start_time.strftime("%d.%m.%Y")
            else:
                date_str = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

            available_buy_requests.append({
                "id": exchange.id,
                "time": time_str,
                "date": date_str,
                "price": exchange.price,
                "buyer_id": exchange.seller_id,  # –í buy-–∑–∞–ø—Ä–æ—Å–µ seller_id —ç—Ç–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ buyer_id
            })

        return {
            "available_buy_requests": available_buy_requests,
            "buy_requests_length": len(available_buy_requests),
            "has_buy_requests": len(available_buy_requests) > 0,
        }

    except Exception:
        return {
            "available_buy_requests": [],
            "has_buy_requests": False,
        }


async def exchange_buy_detail_getter(
    user: Employee, stp_repo: MainRequestsRepo, dialog_manager: DialogManager, **kwargs
) -> Dict[str, Any]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±–º–µ–Ω–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ."""
    exchange_id = (
        dialog_manager.dialog_data.get("exchange_id", None)
        or dialog_manager.start_data["exchange_id"]
    )

    if not exchange_id:
        return {"error": "–û–±–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω"}

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ–±–º–µ–Ω–∞
        exchange = await stp_repo.exchange.get_exchange_by_id(exchange_id)
        if not exchange:
            return {"error": "–û–±–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω"}

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥–∞–≤—Ü–µ
        seller = await stp_repo.employee.get_users(user_id=exchange.seller_id)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ
        if exchange.payment_type == "immediate":
            payment_info = "–°—Ä–∞–∑—É –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ"
        elif exchange.payment_date:
            payment_info = f"–î–æ {exchange.payment_date.strftime('%d.%m.%Y')}"
        else:
            payment_info = "–ü–æ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"

        exchange_info = await get_exchange_text(stp_repo, exchange, user.user_id)
        deeplink = f"exchange_{exchange.id}"
        comment = exchange.comment

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–∂—É—Ä—Å—Ç–≤–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞ –Ω–∞ –¥–∞—Ç—É —Å–º–µ–Ω—ã
        duty_warning = ""
        try:
            date_obj = exchange.start_time.date()
            duty_parser = DutyScheduleParser()
            duties_for_date = await duty_parser.get_duties_for_date(
                date_obj, seller.division, stp_repo
            )

            if duties_for_date:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–¥–∞–≤–µ—Ü —Å—Ä–µ–¥–∏ –¥–µ–∂—É—Ä–Ω—ã—Ö
                for duty in duties_for_date:
                    if duty_parser.names_match(seller.fullname, duty.name):
                        duty_warning = f"üö© <b>–í–∫–ª—é—á–∞–µ—Ç –¥–µ–∂—É—Ä—Å—Ç–≤–æ:</b>\n{duty.schedule} {duty.shift_type}"
                        break
        except Exception as e:
            logger.debug(f"[–ë–∏—Ä–∂–∞] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–∂—É—Ä—Å—Ç–≤ –ø—Ä–æ–¥–∞–≤—Ü–∞: {e}")

        result = {
            "exchange_info": exchange_info,
            "payment_info": payment_info,
            "comment": comment,
            "deeplink": deeplink,
        }

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ–∂—É—Ä—Å—Ç–≤–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        if duty_warning:
            result["duty_warning"] = duty_warning

        return result

    except Exception:
        return {"error": "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö"}


async def exchange_sell_detail_getter(
    user: Employee, stp_repo: MainRequestsRepo, dialog_manager: DialogManager, **kwargs
) -> Dict[str, Any]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É (buy request)."""
    exchange_id = (
        dialog_manager.dialog_data.get("exchange_id", None)
        or dialog_manager.start_data["exchange_id"]
    )

    if not exchange_id:
        return {"error": "–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"}

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ–±–º–µ–Ω–∞
        exchange = await stp_repo.exchange.get_exchange_by_id(exchange_id)
        if not exchange:
            return {"error": "–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"}

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ buy-–∑–∞–ø—Ä–æ—Å
        if exchange.type != "buy":
            return {"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞"}

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ
        if exchange.payment_type == "immediate":
            payment_info = "–°—Ä–∞–∑—É –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ"
        elif exchange.payment_date:
            payment_info = f"–î–æ {exchange.payment_date.strftime('%d.%m.%Y')}"
        else:
            payment_info = "–ü–æ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"

        exchange_info = await get_exchange_text(stp_repo, exchange, user.user_id)
        deeplink = f"buy_request_{exchange.id}"

        return {
            "exchange_info": exchange_info,
            "payment_info": payment_info,
            "deeplink": deeplink,
        }

    except Exception as e:
        logger.error(f"[–ë–∏—Ä–∂–∞] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Å–¥–µ–ª–∫–∏: {e}")
        return {"error": "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö"}


async def my_exchanges(
    stp_repo: MainRequestsRepo, user: Employee, dialog_manager: DialogManager, **kwargs
) -> Dict[str, Any]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö –æ–±–º–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = dialog_manager.event.from_user.id

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±–º–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–∞–∫ –ø—Ä–æ–¥–∞–∂–∏, —Ç–∞–∫ –∏ –ø–æ–∫—É–ø–∫–∏)
        exchanges = await stp_repo.exchange.get_user_exchanges(
            user_id=user_id,
            exchange_type="all",  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã –æ–±–º–µ–Ω–æ–≤
        )

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        my_exchanges_list = []
        for exchange in exchanges:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏–∑ start_time —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç None
            if exchange.start_time:
                date_str = exchange.start_time.strftime("%d.%m")
            else:
                date_str = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏ —Å—Ç–∞—Ç—É—Å –æ–±–º–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if exchange.seller_id == user_id:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø—Ä–æ–¥–∞–≤–µ—Ü –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É
                if exchange.type == "sell":
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–¥–∞–µ—Ç —Å–º–µ–Ω—É
                    if exchange.status == "sold":
                        button_text = f"üìâ –ü—Ä–æ–¥–∞–ª {date_str}"
                    elif exchange.status == "active":
                        button_text = f"üìâ –ü—Ä–æ–¥–∞—é {date_str}"
                    else:  # cancelled, expired, inactive
                        button_text = f"–û—Ç–º–µ–Ω–∏–ª {date_str}"
                else:  # exchange.type == "buy"
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫—É–ø–∫—É
                    if exchange.status == "sold":
                        button_text = f"üìà –ö—É–ø–∏–ª {date_str}"
                    elif exchange.status == "active":
                        button_text = f"üìà –ü–æ–∫—É–ø–∞—é {date_str}"
                    else:  # cancelled, expired, inactive
                        button_text = f"–û—Ç–º–µ–Ω–∏–ª {date_str}"
            else:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø–æ–∫—É–ø–∞—Ç–µ–ª—å (buyer_id == user_id)
                if exchange.type == "sell":
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫—É–ø–∏–ª —á—É–∂–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏
                    button_text = f"üìà –ö—É–ø–∏–ª {date_str}"
                else:
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–Ω—è–ª —á—É–∂–æ–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫—É–ø–∫—É (–ø—Ä–æ–¥–∞–ª)
                    button_text = f"üìâ –ü—Ä–æ–¥–∞–ª {date_str}"

            my_exchanges_list.append({
                "id": exchange.id,
                "button_text": button_text,
                "type": exchange.type,
                "status": exchange.status,
                "is_seller": exchange.seller_id == user_id,
                "date": date_str,
                "time": f"{exchange.start_time.strftime('%H:%M') if exchange.start_time else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}-{exchange.end_time.strftime('%H:%M') if exchange.end_time else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}".rstrip(
                    "-"
                ),
                "price": exchange.price,
            })

        return {
            "my_exchanges": my_exchanges_list,
            "length": len(my_exchanges_list),
            "has_exchanges": len(my_exchanges_list) > 0,
        }

    except Exception:
        return {
            "my_exchanges": [],
            "has_exchanges": False,
        }


async def _get_other_party_info(
    exchange: Exchange, user_id: int, stp_repo: MainRequestsRepo
) -> tuple[str | None, str | None]:
    """Get information about the other party in the exchange."""
    if user_id and exchange.seller_id == user_id:
        other_party_id = exchange.buyer_id
        other_party_type = "–ü–æ–∫—É–ø–∞—Ç–µ–ª—å"
    else:
        other_party_id = exchange.seller_id
        other_party_type = "–ü—Ä–æ–¥–∞–≤–µ—Ü"

    if not other_party_id:
        return None, None

    try:
        other_party_user = await stp_repo.employee.get_users(user_id=other_party_id)
        if other_party_user:
            other_party_name = format_fullname(
                other_party_user.fullname,
                short=True,
                gender_emoji=True,
                username=other_party_user.username,
                user_id=other_party_user.user_id,
            )
            return other_party_name, other_party_type
    except Exception as e:
        logger.error(f"[–ë–∏—Ä–∂–∞] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω–µ: {e}")

    return None, None


async def my_detail_getter(
    user: Employee,
    bot: Bot,
    stp_repo: MainRequestsRepo,
    dialog_manager: DialogManager,
    **_kwargs,
) -> Dict[str, Any]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ–±–º–µ–Ω–∞."""
    exchange_id = (
        dialog_manager.dialog_data.get("exchange_id", None)
        or dialog_manager.start_data["exchange_id"]
    )

    exchange = await stp_repo.exchange.get_exchange_by_id(exchange_id)
    is_seller = exchange.seller_id == dialog_manager.event.from_user.id

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ–∫–±–æ–∫—Å–æ–≤
    in_schedule: ManagedCheckbox = dialog_manager.find(
        "exchange_in_schedule"
    )  # –í –≥—Ä–∞—Ñ–∏–∫–µ
    await in_schedule.set_checked(
        exchange.in_seller_schedule if is_seller else exchange.in_buyer_schedule
    )

    exchange_is_paid: ManagedCheckbox = dialog_manager.find(
        "exchange_is_paid"
    )  # –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã
    await exchange_is_paid.set_checked(exchange.is_paid)

    private_checkbox: ManagedCheckbox = dialog_manager.find(
        "offer_private_status"
    )  # –°—Ç–∞—Ç—É—Å –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏
    await private_checkbox.set_checked(exchange.is_private)

    # –°—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏
    exchange_status = dialog_manager.find("offer_status")
    if exchange_status:
        await exchange_status.set_checked(exchange.status == "active")

    # Get other party information
    other_party_name, other_party_type = await _get_other_party_info(
        exchange, user.user_id, stp_repo
    )

    exchange_text = await get_exchange_text(stp_repo, exchange, user.user_id)
    exchange_status = await get_exchange_status(exchange)
    exchange_type = await get_exchange_type(exchange, is_seller=is_seller)

    # Generate deeplink
    exchange_deeplink = f"exchange_{exchange.id}"
    exchange_deeplink_url = await create_start_link(
        bot=bot, payload=exchange_deeplink, encode=True
    )

    # Check if exchange can be reactivated
    could_activate = exchange.status in [
        "inactive",
        "canceled",
        "expired",
    ] and tz.localize(exchange.start_time) > datetime.now(tz=tz)

    return {
        "exchange_info": exchange_text,
        "comment": exchange.comment,
        "status": exchange.status,
        "status_text": exchange_status,
        "other_party_name": other_party_name,
        "other_party_type": other_party_type,
        "has_other_party": bool(other_party_name),
        "is_active": exchange.status == "active",
        "exchange_type": exchange_type,
        "created_date": exchange.created_at.strftime(strftime_date)
        if exchange.created_at
        else "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
        "is_paid": "–î–∞" if exchange.is_paid else "–ù–µ—Ç",
        "deeplink": exchange_deeplink,
        "deeplink_url": exchange_deeplink_url,
        "could_activate": could_activate,
        "is_seller": is_seller,
    }


async def edit_offer_date_getter(
    stp_repo: MainRequestsRepo, user: Employee, dialog_manager: DialogManager, **_kwargs
) -> Dict[str, Any]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –æ–∫–Ω–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã."""
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–º–µ–Ω–∞—Ö
    await prepare_calendar_data_for_exchange(stp_repo, user, dialog_manager)
    return {}
