"""–ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –ø—Ä–æ–¥–∞–∂ –Ω–∞ –±–∏—Ä–∂–µ."""

import logging
from datetime import datetime
from typing import Any, Dict

from aiogram import Bot
from aiogram.utils.deep_linking import create_start_link
from aiogram_dialog import DialogManager
from stp_database import Employee, MainRequestsRepo

from tgbot.dialogs.getters.common.exchanges.exchanges import (
    get_exchange_shift_time,
    prepare_calendar_data_for_exchange,
)

logger = logging.getLogger(__name__)


async def sell_date_getter(
    stp_repo: MainRequestsRepo, user: Employee, dialog_manager: DialogManager, **_kwargs
) -> Dict[str, Any]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –æ–∫–Ω–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã."""
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–º–µ–Ω–∞—Ö
    await prepare_calendar_data_for_exchange(stp_repo, user, dialog_manager)
    return {}


async def sell_hours_getter(dialog_manager: DialogManager, **kwargs) -> Dict[str, Any]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –æ–∫–Ω–∞ –≤—ã–±–æ—Ä–∞ —á–∞—Å–æ–≤."""
    data = dialog_manager.dialog_data

    shift_date = data.get("shift_date")
    shift_start = data.get("shift_start")
    shift_end = data.get("shift_end")
    has_duty = data.get("has_duty", False)
    is_remaining_today = data.get("is_remaining_today", False)

    if not shift_date or not shift_start or not shift_end:
        return {
            "selected_date": "–ù–µ –≤—ã–±—Ä–∞–Ω–∞",
            "shift_options": [],
            "user_schedule": "–ù–µ –Ω–∞–π–¥–µ–Ω",
            "duty_warning": "",
        }

    try:
        date_obj = datetime.fromisoformat(shift_date).date()
        formatted_date = date_obj.strftime("%d.%m.%Y")
        user_schedule = f"{shift_start}-{shift_end}"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –¥–µ–∂—É—Ä—Å—Ç–≤–µ
        duty_warning = ""
        if has_duty:
            duty_warning = "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –í —ç—Ç–æ –≤—Ä–µ–º—è —É —Ç–µ–±—è –¥–µ–∂—É—Ä—Å—Ç–≤–æ"

        if is_remaining_today:
            # –ï—Å–ª–∏ —ç—Ç–æ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è —Å–µ–≥–æ–¥–Ω—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —ç—Ç—É –æ–ø—Ü–∏—é
            shift_options = [("remaining_today", "‚è∞ –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è —Å–µ–≥–æ–¥–Ω—è")]
        else:
            # –û–±—ã—á–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è –±—É–¥—É—â–∏—Ö –¥–∞—Ç –∏–ª–∏ —Å–µ–≥–æ–¥–Ω—è –¥–æ –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã
            shift_options = [
                ("full", "üïò –ü–æ–ª–Ω–∞—è —Å–º–µ–Ω–∞"),
                ("partial", "‚è∞ –ß–∞—Å—Ç—å —Å–º–µ–Ω—ã"),
            ]

        return {
            "selected_date": formatted_date,
            "user_schedule": user_schedule,
            "duty_warning": duty_warning,
            "shift_options": shift_options,
        }

    except Exception as e:
        logger.error(f"[–ë–∏—Ä–∂–∞] –û—à–∏–±–∫–∞ –≤ sell_hours_getter: {e}")
        return {
            "selected_date": "–û—à–∏–±–∫–∞",
            "user_schedule": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö",
            "duty_warning": "",
            "shift_options": [],
        }


async def sell_time_input_getter(
    dialog_manager: DialogManager, bot: Bot, **_kwargs
) -> Dict[str, Any]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –æ–∫–Ω–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏."""
    data = dialog_manager.dialog_data

    shift_date = data.get("shift_date")
    shift_start = data.get("shift_start")
    shift_end = data.get("shift_end")
    has_duty = data.get("has_duty", False)
    sold_time_strings = data.get("sold_time_strings", [])

    if not shift_date or not shift_start or not shift_end:
        return {
            "selected_date": "–ù–µ –≤—ã–±—Ä–∞–Ω–∞",
            "user_schedule": "–ù–µ –Ω–∞–π–¥–µ–Ω",
            "duty_warning": "",
            "sold_hours_info": "",
        }

    try:
        date_obj = datetime.fromisoformat(shift_date).date()
        formatted_date = date_obj.strftime("%d.%m.%Y")
        user_schedule = f"{shift_start}-{shift_end}"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –¥–µ–∂—É—Ä—Å—Ç–≤–µ
        duty_warning = ""
        if has_duty:
            duty_warning = "üö© –ü—Ä–æ–≤–µ—Ä—å –≤—Ä–µ–º—è –¥–µ–∂—É—Ä—Å—Ç–≤–∞"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö —á–∞—Å–∞—Ö
        sold_hours_info = ""
        if sold_time_strings:
            sold_hours_list = []
            for exchange_data in sold_time_strings:
                # exchange_data —Å–æ–¥–µ—Ä–∂–∏—Ç time_str, exchange_id, status
                time_str = exchange_data.get("time_str", "")
                exchange_id = exchange_data.get("exchange_id", "")
                status = exchange_data.get("status", "–ø—Ä–æ–¥–∞–µ—Ç—Å—è")

                # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É
                exchange_deeplink = f"exchange_{exchange_id}"
                exchange_link = await create_start_link(
                    bot=bot, payload=exchange_deeplink, encode=True
                )

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å–æ —Å—Å—ã–ª–∫–æ–π –∏ —Å—Ç–∞—Ç—É—Å–æ–º
                sold_hours_list.append(
                    f"‚Ä¢ <a href='{exchange_link}'>{time_str}</a> - {status}"
                )

            sold_hours_info = "\nüö© –ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –µ—Å—Ç—å —Å–¥–µ–ª–∫–∏:\n" + "\n".join(
                sold_hours_list
            )

        return {
            "selected_date": formatted_date,
            "user_schedule": user_schedule,
            "duty_warning": duty_warning,
            "sold_hours_info": sold_hours_info,
        }

    except Exception as e:
        logger.error(f"[–ë–∏—Ä–∂–∞] –û—à–∏–±–∫–∞ –≤ sell_time_input_getter: {e}")
        return {
            "selected_date": "–û—à–∏–±–∫–∞",
            "user_schedule": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö",
            "duty_warning": "",
            "sold_hours_info": "",
        }


async def sell_price_getter(dialog_manager: DialogManager, **_kwargs) -> Dict[str, Any]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –æ–∫–Ω–∞ –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã."""
    data = dialog_manager.dialog_data

    shift_date = data.get("shift_date")
    start_time = data.get("start_time")
    end_time = data.get("end_time")

    shift_time = await get_exchange_shift_time(start_time, end_time)

    if shift_date:
        date_obj = datetime.fromisoformat(shift_date).date()
        formatted_date = date_obj.strftime("%d.%m.%Y")
        return {
            "selected_date": formatted_date,
            "shift_date": shift_date,
            "shift_time": shift_time,
        }
    return {
        "selected_date": "–ù–µ –≤—ã–±—Ä–∞–Ω–∞",
        "shift_date": shift_date,
        "shift_time": shift_time,
    }


async def sell_payment_timing_getter(
    dialog_manager: DialogManager, **_kwargs
) -> Dict[str, Any]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –æ–∫–Ω–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–ø–ª–∞—Ç—ã."""
    data = dialog_manager.dialog_data

    shift_date = data.get("shift_date")
    price = data.get("price", 0)
    start_time = data.get("start_time")
    end_time = data.get("end_time")

    shift_time = await get_exchange_shift_time(start_time, end_time)

    if shift_date:
        date_obj = datetime.fromisoformat(shift_date).date()
        formatted_date = date_obj.strftime("%d.%m.%Y")
        return {
            "selected_date": formatted_date,
            "shift_date": shift_date,
            "shift_time": shift_time,
            "price": price,
        }
    return {
        "selected_date": "–ù–µ –≤—ã–±—Ä–∞–Ω–∞",
        "shift_date": shift_date,
        "shift_time": shift_time,
        "price": price,
    }


async def sell_payment_date_getter(
    dialog_manager: DialogManager, **_kwargs
) -> Dict[str, Any]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –æ–∫–Ω–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –ø–ª–∞—Ç–µ–∂–∞."""
    data = dialog_manager.dialog_data

    shift_date = data.get("shift_date")
    start_time = data.get("start_time")
    end_time = data.get("end_time")
    price = data.get("price")

    shift_time = await get_exchange_shift_time(start_time, end_time)

    if shift_date:
        date_obj = datetime.fromisoformat(shift_date).date()
        formatted_date = date_obj.strftime("%d.%m.%Y")
        return {"shift_date": formatted_date, "shift_time": shift_time, "price": price}
    return {"shift_date": "–ù–µ –≤—ã–±—Ä–∞–Ω–∞"}


async def sell_comment_getter(
    dialog_manager: DialogManager, **_kwargs
) -> Dict[str, Any]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –æ–∫–Ω–∞ –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è."""
    data = dialog_manager.dialog_data

    shift_date = data.get("shift_date")
    price = data.get("price", 0)
    start_time = data.get("start_time")
    end_time = data.get("end_time")
    payment_type = data.get("payment_type")

    shift_time = await get_exchange_shift_time(start_time, end_time)

    if shift_date:
        date_obj = datetime.fromisoformat(shift_date).date()
        formatted_date = date_obj.strftime("%d.%m.%Y")
        return {
            "selected_date": formatted_date,
            "shift_date": shift_date,
            "shift_time": shift_time,
            "price": price,
            "payment_type": "–°—Ä–∞–∑—É"
            if payment_type == "immediate"
            else "–í –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É",
        }
    return {
        "selected_date": "–ù–µ –≤—ã–±—Ä–∞–Ω–∞",
        "shift_date": shift_date,
        "shift_time": shift_time,
        "price": price,
        "payment_type": "–°—Ä–∞–∑—É" if payment_type == "immediate" else "–í –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É",
    }


async def sell_confirmation_getter(
    dialog_manager: DialogManager, **_kwargs
) -> Dict[str, Any]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –æ–∫–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    data = dialog_manager.dialog_data

    shift_date = data.get("shift_date")
    price = data.get("price", 0)
    start_time = data.get("start_time")
    end_time = data.get("end_time")
    payment_type = data.get("payment_type", "immediate")
    payment_date = data.get("payment_date")
    comment = data.get("comment")

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Å–º–µ–Ω—ã
    formatted_shift_date = "–ù–µ –≤—ã–±—Ä–∞–Ω–∞"
    if shift_date:
        date_obj = datetime.fromisoformat(shift_date).date()
        formatted_shift_date = date_obj.strftime("%d.%m.%Y")

    # –í—Ä–µ–º—è —Å–º–µ–Ω—ã
    shift_time_info = ""
    if start_time:
        start_time_str = (
            start_time.split("T")[1][:5] if "T" in start_time else start_time
        )
        end_time_str = end_time.split("T")[1][:5] if "T" in end_time else end_time
        shift_time_info = f"{start_time_str}-{end_time_str}"

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ
    payment_info = "–°—Ä–∞–∑—É –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ"
    if payment_type == "on_date" and payment_date:
        payment_date_obj = datetime.fromisoformat(payment_date).date()
        formatted_payment_date = payment_date_obj.strftime("%d.%m.%Y")
        payment_info = f"–î–æ {formatted_payment_date}"

    result = {
        "shift_date": formatted_shift_date,
        "shift_time": shift_time_info,
        "price": price,
        "payment_info": payment_info,
    }

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –µ—Å–ª–∏ –µ—Å—Ç—å
    if comment:
        result["comment"] = comment

    return result
