import re
from datetime import datetime
from typing import Any, Dict

from aiogram_dialog import DialogManager
from stp_database import Employee, MainRequestsRepo

from tgbot.dialogs.getters.common.exchanges.exchanges import (
    get_month_name,
    prepare_calendar_data_for_exchange,
)
from tgbot.services.files_processing.parsers.schedule import ScheduleParser


async def sell_date_getter(
    stp_repo: MainRequestsRepo, user: Employee, dialog_manager: DialogManager, **_kwargs
) -> Dict[str, Any]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –æ–∫–Ω–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã."""
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–º–µ–Ω–∞—Ö
    await prepare_calendar_data_for_exchange(stp_repo, user, dialog_manager)
    return {}


async def sell_hours_getter(
    stp_repo: MainRequestsRepo, user: Employee, dialog_manager: DialogManager, **kwargs
) -> Dict[str, Any]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –æ–∫–Ω–∞ –≤—ã–±–æ—Ä–∞ —á–∞—Å–æ–≤."""
    shift_date = dialog_manager.dialog_data.get("shift_date")
    is_today = dialog_manager.dialog_data.get("is_today", False)

    if not shift_date:
        return {
            "selected_date": "–ù–µ –≤—ã–±—Ä–∞–Ω–∞",
            "shift_options": [],
            "user_schedule": "–ù–µ –Ω–∞–π–¥–µ–Ω",
        }

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–µ–∂—É—Ä—Å—Ç–≤–∞–º–∏
        date_obj = datetime.fromisoformat(shift_date).date()
        formatted_date = date_obj.strftime("%d.%m.%Y")

        parser = ScheduleParser()
        month_name = get_month_name(date_obj.month)

        # –ü–æ–ª—É—á–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å –¥–µ–∂—É—Ä—Å—Ç–≤–∞–º–∏
        try:
            schedule_with_duties = await parser.get_user_schedule_with_duties(
                user.fullname,
                month_name,
                user.division,
                stp_repo,
                current_day_only=False,
            )
        except Exception:
            schedule_with_duties = {}

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–º–µ–Ω–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
        user_schedule = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        duty_warning = ""

        # –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
        day_key = f"{date_obj.day:02d}"
        for day, (schedule, duty_info) in schedule_with_duties.items():
            if day_key in day:
                user_schedule = schedule or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                if duty_info:
                    duty_warning = (
                        f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –í —ç—Ç–æ –≤—Ä–µ–º—è —É –≤–∞—Å –¥–µ–∂—É—Ä—Å—Ç–≤–æ ({duty_info})"
                    )
                break

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ü–∏–∏
        shift_options = []

        if user_schedule and user_schedule not in ["–ù–µ —É–∫–∞–∑–∞–Ω–æ", "–í", "–û"]:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—Ä–µ–º—è –≤ –≥—Ä–∞—Ñ–∏–∫–µ
            time_pattern = r"\d{1,2}:\d{2}-\d{1,2}:\d{2}"
            has_time = re.search(time_pattern, user_schedule)

            if has_time:
                shift_options.append(("full", "üïò –ü–æ–ª–Ω–∞—è —Å–º–µ–Ω–∞"))
                shift_options.append(("partial", "‚è∞ –ß–∞—Å—Ç—å —Å–º–µ–Ω—ã"))

                # –ï—Å–ª–∏ —ç—Ç–æ —Å–µ–≥–æ–¥–Ω—è –∏ —Å–º–µ–Ω–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å, –¥–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é "–æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è"
                if is_today:
                    current_time = datetime.now()
                    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å–ª–∏ —Å–µ–π—á–∞—Å –ø–æ—Å–ª–µ 9 —É—Ç—Ä–∞, —Ç–æ —Å–º–µ–Ω–∞ –º–æ–≥–ª–∞ –Ω–∞—á–∞—Ç—å—Å—è
                    if current_time.hour >= 9:
                        shift_options = [
                            ("remaining_today", "‚è∞ –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è —Å–µ–≥–æ–¥–Ω—è")
                        ]
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤ –≥—Ä–∞—Ñ–∏–∫–µ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é
                shift_options.append(("partial", "‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Å–º–µ–Ω—ã"))
        else:
            # –ï—Å–ª–∏ –≥—Ä–∞—Ñ–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            user_schedule = "–ù–µ—Ç —Å–º–µ–Ω—ã / –í—ã—Ö–æ–¥–Ω–æ–π"

        return {
            "selected_date": formatted_date,
            "user_schedule": user_schedule,
            "duty_warning": duty_warning,
            "shift_options": shift_options,
        }

    except Exception as e:
        date_obj = datetime.fromisoformat(shift_date).date()
        formatted_date = date_obj.strftime("%d.%m.%Y")
        return {
            "selected_date": formatted_date,
            "user_schedule": f"–û—à–∏–±–∫–∞: {str(e)}",
            "duty_warning": "",
            "shift_options": [],
        }


async def sell_time_input_getter(
    stp_repo: MainRequestsRepo, user: Employee, dialog_manager: DialogManager, **_kwargs
) -> Dict[str, Any]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –æ–∫–Ω–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏."""
    shift_date = dialog_manager.dialog_data.get("shift_date")

    if not shift_date:
        return {"selected_date": "–ù–µ –≤—ã–±—Ä–∞–Ω–∞", "user_schedule": "–ù–µ –Ω–∞–π–¥–µ–Ω"}

    try:
        date_obj = datetime.fromisoformat(shift_date).date()
        formatted_date = date_obj.strftime("%d.%m.%Y")

        parser = ScheduleParser()
        month_name = get_month_name(date_obj.month)

        # –ü–æ–ª—É—á–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_schedule = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        duty_warning = ""

        try:
            schedule_dict = await parser.get_user_schedule_with_duties(
                user.fullname,
                month_name,
                user.division,
                stp_repo,
                current_day_only=False,
            )

            day_key = f"{date_obj.day:02d}"
            for day, (schedule, duty_info) in schedule_dict.items():
                if day_key in day:
                    user_schedule = schedule or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                    if duty_info:
                        duty_warning = (
                            f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Ä–µ–º—è –¥–µ–∂—É—Ä—Å—Ç–≤–∞ ({duty_info})"
                        )
                    break
        except Exception:
            pass

        return {
            "selected_date": formatted_date,
            "user_schedule": user_schedule,
            "duty_warning": duty_warning,
        }

    except Exception:
        date_obj = datetime.fromisoformat(shift_date).date()
        formatted_date = date_obj.strftime("%d.%m.%Y")
        return {
            "selected_date": formatted_date,
            "user_schedule": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞",
            "duty_warning": "",
        }


async def sell_price_getter(dialog_manager: DialogManager, **_kwargs) -> Dict[str, Any]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –æ–∫–Ω–∞ –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã."""
    shift_date = dialog_manager.dialog_data.get("shift_date")
    is_partial = dialog_manager.dialog_data.get("is_partial", False)
    shift_start_time = dialog_manager.dialog_data.get("shift_start_time")
    shift_end_time = dialog_manager.dialog_data.get("shift_end_time")

    shift_type = "—á–∞—Å—Ç—å —Å–º–µ–Ω—ã" if is_partial else "–ø–æ–ª–Ω—É—é —Å–º–µ–Ω—É"
    shift_time = ""

    if is_partial and shift_start_time:
        if shift_end_time:
            shift_time = f"{shift_start_time}-{shift_end_time}"
        else:
            shift_time = f"—Å {shift_start_time}"

    if shift_date:
        date_obj = datetime.fromisoformat(shift_date).date()
        formatted_date = date_obj.strftime("%d.%m.%Y")
        return {
            "selected_date": formatted_date,
            "shift_type": shift_type,
            "shift_time": shift_time if shift_time else None,
        }
    return {
        "selected_date": "–ù–µ –≤—ã–±—Ä–∞–Ω–∞",
        "shift_type": shift_type,
        "shift_time": shift_time if shift_time else None,
    }


async def sell_payment_timing_getter(
    dialog_manager: DialogManager, **_kwargs
) -> Dict[str, Any]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –æ–∫–Ω–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–ø–ª–∞—Ç—ã."""
    data = dialog_manager.dialog_data
    shift_date = data.get("shift_date")
    price = data.get("price", 0)
    is_partial = data.get("is_partial", False)
    shift_type = "—á–∞—Å—Ç—å —Å–º–µ–Ω—ã" if is_partial else "–ø–æ–ª–Ω—É—é —Å–º–µ–Ω—É"

    if shift_date:
        date_obj = datetime.fromisoformat(shift_date).date()
        formatted_date = date_obj.strftime("%d.%m.%Y")
        return {
            "selected_date": formatted_date,
            "shift_type": shift_type,
            "price": price,
        }
    return {
        "selected_date": "–ù–µ –≤—ã–±—Ä–∞–Ω–∞",
        "shift_type": shift_type,
        "price": price,
    }


async def sell_payment_date_getter(
    dialog_manager: DialogManager, **_kwargs
) -> Dict[str, Any]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –æ–∫–Ω–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –ø–ª–∞—Ç–µ–∂–∞."""
    data = dialog_manager.dialog_data
    shift_date = data.get("shift_date")

    if shift_date:
        date_obj = datetime.fromisoformat(shift_date).date()
        formatted_date = date_obj.strftime("%d.%m.%Y")
        return {"shift_date": formatted_date}
    return {"shift_date": "–ù–µ –≤—ã–±—Ä–∞–Ω–∞"}


async def sell_comment_getter(
    dialog_manager: DialogManager, **_kwargs
) -> Dict[str, Any]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –æ–∫–Ω–∞ –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è."""
    data = dialog_manager.dialog_data
    shift_date = data.get("shift_date")
    price = data.get("price", 0)
    is_partial = data.get("is_partial", False)

    shift_type = "—á–∞—Å—Ç—å —Å–º–µ–Ω—ã" if is_partial else "–ø–æ–ª–Ω—É—é —Å–º–µ–Ω—É"

    if shift_date:
        date_obj = datetime.fromisoformat(shift_date).date()
        formatted_date = date_obj.strftime("%d.%m.%Y")
        return {
            "selected_date": formatted_date,
            "shift_type": shift_type,
            "price": price,
        }
    return {
        "selected_date": "–ù–µ –≤—ã–±—Ä–∞–Ω–∞",
        "shift_type": shift_type,
        "price": price,
    }


async def sell_confirmation_getter(
    dialog_manager: DialogManager, **_kwargs
) -> Dict[str, Any]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –æ–∫–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    data = dialog_manager.dialog_data

    # –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    shift_date = data.get("shift_date")
    price = data.get("price", 0)
    is_partial = data.get("is_partial", False)
    payment_type = data.get("payment_type", "immediate")
    payment_date = data.get("payment_date")
    comment = data.get("comment")

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Å–º–µ–Ω—ã
    formatted_shift_date = "–ù–µ –≤—ã–±—Ä–∞–Ω–∞"
    if shift_date:
        date_obj = datetime.fromisoformat(shift_date).date()
        formatted_shift_date = date_obj.strftime("%d.%m.%Y")

    # –¢–∏–ø —Å–º–µ–Ω—ã
    shift_type = "–ß–∞—Å—Ç—å —Å–º–µ–Ω—ã" if is_partial else "–ü–æ–ª–Ω–∞—è —Å–º–µ–Ω–∞"

    # –í—Ä–µ–º—è —Å–º–µ–Ω—ã
    shift_start = data.get("shift_start_time")
    shift_end = data.get("shift_end_time")
    shift_time_info = f"—Å {shift_start} –¥–æ {shift_end}"
    if is_partial and data.get("shift_end_time"):
        shift_time_info = f"{shift_start}-{data.get('shift_end_time')}"

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ
    payment_info = "–°—Ä–∞–∑—É –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ"
    if payment_type == "on_date" and payment_date:
        payment_date_obj = datetime.fromisoformat(payment_date).date()
        formatted_payment_date = payment_date_obj.strftime("%d.%m.%Y")
        payment_info = f"–î–æ {formatted_payment_date}"

    result = {
        "shift_date": formatted_shift_date,
        "shift_type": shift_type,
        "shift_time": shift_time_info,
        "price": price,
        "payment_info": payment_info,
    }

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –µ—Å–ª–∏ –µ—Å—Ç—å
    if comment:
        result["comment"] = comment

    return result
