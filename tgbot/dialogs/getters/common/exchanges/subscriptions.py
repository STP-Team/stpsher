"""–ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –±–∏—Ä–∂—É."""

import logging
from typing import Any, Dict

from aiogram import Bot
from aiogram.utils.deep_linking import create_start_link
from aiogram_dialog import DialogManager
from aiogram_dialog.widgets.kbd import ManagedCheckbox, ManagedRadio, ManagedToggle
from stp_database import Employee, MainRequestsRepo

from tgbot.misc.helpers import short_name

logger = logging.getLogger(__name__)


async def subscriptions_getter(
    stp_repo: MainRequestsRepo, user: Employee, **_kwargs
) -> Dict[str, Any]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        stp_repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π STP
        user: –≠–∫–∑–µ–º–ø–ª—è—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–æ–¥–µ–ª—å—é Employee

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        subscriptions = await stp_repo.exchange.get_user_subscriptions(
            user.user_id, active_only=False
        )

        active_subscriptions = [s for s in subscriptions if s.is_active]

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        subscriptions_list = []
        for sub in subscriptions:
            status = "üü¢ –ê–∫—Ç–∏–≤–Ω–∞" if sub.is_active else "üî¥ –û—Ç–∫–ª—é—á–µ–Ω–∞"
            name = sub.name or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"

            subscriptions_list.append({
                "id": sub.id,
                "name": name,
                "status": status,
            })

        return {
            "subscriptions_list": subscriptions_list,
            "has_subscriptions": len(subscriptions) > 0,
            "active_subscriptions_count": len(active_subscriptions),
            "total_subscriptions_count": len(subscriptions),
        }

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.user_id}: {e}")
        return {
            "subscriptions_list": [],
            "has_subscriptions": False,
            "active_subscriptions_count": 0,
            "total_subscriptions_count": 0,
        }


async def subscription_detail_getter(
    stp_repo: MainRequestsRepo,
    user: Employee,
    bot: Bot,
    dialog_manager: DialogManager,
    **_kwargs,
) -> Dict[str, Any]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        stp_repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π STP
        user: –≠–∫–∑–µ–º–ø–ª—è—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–æ–¥–µ–ª—å—é Employee
        dialog_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∏–∞–ª–æ–≥–∞

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –¥–µ—Ç–∞–ª—è–º–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    """
    try:
        subscription_id = (
            dialog_manager.dialog_data.get("subscription_id", None)
            or dialog_manager.start_data["subscription_id"]
        )

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        subscription = await stp_repo.exchange.get_subscription_by_id(
            subscription_id, user.user_id
        )

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ–∫–±–æ–∫—Å–æ–≤
        sub_status_checkbox: ManagedCheckbox = dialog_manager.find("sub_status")
        await sub_status_checkbox.set_checked(bool(subscription.is_active))

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏
        criteria_parts = []
        if subscription.min_price:
            criteria_parts.append(f"‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {subscription.min_price} —Ä.")
        if subscription.max_price:
            criteria_parts.append(f"‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {subscription.max_price} —Ä.")
        if subscription.start_time and subscription.end_time:
            criteria_parts.append(
                f"‚Ä¢ –í—Ä–µ–º—è: —Å {subscription.start_time.strftime('%H:%M')} –¥–æ {subscription.end_time.strftime('%H:%M')}"
            )
        if subscription.days_of_week:
            day_names = {1: "–ü–Ω", 2: "–í—Ç", 3: "–°—Ä", 4: "–ß—Ç", 5: "–ü—Ç", 6: "–°–±", 7: "–í—Å"}
            days_text = ", ".join([
                day_names.get(d, str(d)) for d in subscription.days_of_week
            ])
            criteria_parts.append(f"‚Ä¢ –î–Ω–∏: {days_text}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        if subscription.target_seller_id:
            try:
                target_seller = await stp_repo.employee.get_users(
                    user_id=subscription.target_seller_id
                )
                if target_seller:
                    seller_short = short_name(target_seller.fullname)
                    criteria_parts.append(f"‚Ä¢ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: {seller_short}")
            except Exception as e:
                logger.error(
                    f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ {subscription.target_seller_id}: {e}"
                )

        criteria_text = "\n".join(criteria_parts) if criteria_parts else "‚Ä¢ –í—Å–µ –æ–±–º–µ–Ω—ã"

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–∏–ø –æ–±–º–µ–Ω–∞
        type_names = {
            "buy": "–ü–æ–∫—É–ø–∫–∞ —á–∞—Å–æ–≤",
            "sell": "–ü—Ä–æ–¥–∞–∂–∞ —á–∞—Å–æ–≤",
            "both": "–û–±–∞ —Ç–∏–ø–∞",
        }
        exchange_type = type_names.get(
            subscription.exchange_type, subscription.exchange_type
        )

        deeplink = f"subscription_{subscription_id}"
        deeplink_url = await create_start_link(bot=bot, payload=deeplink, encode=True)

        return {
            "subscription_name": subscription.name,
            "exchange_type": exchange_type,
            "criteria_text": criteria_text,
            "status": subscription.is_active,
            "deeplink": deeplink,
            "deeplink_url": deeplink_url,
        }

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ {subscription_id}: {e}")
        return {
            "subscription_name": "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏",
            "exchange_type": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            "criteria_text": "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤",
        }


async def subscription_create_type_getter(
    dialog_manager: DialogManager, **_kwargs
) -> Dict[str, Any]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏.

    Args:
        dialog_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∏–∞–ª–æ–≥–∞

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å —Ç–∏–ø–∞–º–∏ –æ–±–º–µ–Ω–æ–≤
    """
    exchange_types = [
        ("buy", "üìà –ü–æ–∫—É–ø–∫–∞ —á–∞—Å–æ–≤ (—è –ø–æ–∫—É–ø–∞—é)"),
        ("sell", "üìâ –ü—Ä–æ–¥–∞–∂–∞ —á–∞—Å–æ–≤ (—è –ø—Ä–æ–¥–∞—é)"),
        ("both", "üîÑ –û–±–∞ —Ç–∏–ø–∞"),
    ]

    sub_type = dialog_manager.dialog_data.get("type")

    return {
        "exchange_types": exchange_types,
        "exchange_type_selected": sub_type is not None,
    }


async def subscription_create_criteria_getter(
    dialog_manager: DialogManager, **_kwargs
) -> Dict[str, Any]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –ø–æ–¥–ø–∏—Å–∫–∏.

    Args:
        dialog_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∏–∞–ª–æ–≥–∞

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏
    """
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –æ–±–º–µ–Ω–æ–≤ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∏–ª–∏ –∏–∑ –≤–∏–¥–∂–µ—Ç–∞)
    sub_type = dialog_manager.dialog_data.get("type")

    type_names = {
        "buy": "üìà –ü–æ–∫—É–ø–∫–∞ —á–∞—Å–æ–≤",
        "sell": "üìâ –ü—Ä–æ–¥–∞–∂–∞ —á–∞—Å–æ–≤",
        "both": "üîÑ –û–±–∞ —Ç–∏–ø–∞",
    }

    criteria_options = [
        ("price", "üí∞ –ü–æ —Ü–µ–Ω–µ"),
        ("time", "‚è∞ –ü–æ –≤—Ä–µ–º–µ–Ω–∏"),
        ("days", "üìÖ –ü–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏"),
        ("seller", "üë§ –ü–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É"),
    ]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏
    criteria_widget: ManagedToggle = dialog_manager.find("criteria_toggles")
    selected_criteria = criteria_widget.get_checked() if criteria_widget else []

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –¥–ª—è –±–ª–æ–∫–∫–≤–æ—Ç–∞
    criteria_names = {
        "price": "üí∞ –ü–æ —Ü–µ–Ω–µ",
        "time": "‚è∞ –ü–æ –≤—Ä–µ–º–µ–Ω–∏",
        "days": "üìÖ –ü–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏",
        "seller": "üë§ –ü–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É",
    }

    if selected_criteria:
        current_criteria_display = "üéØ <b>–ö—Ä–∏—Ç–µ—Ä–∏–∏:</b>\n" + "\n".join([
            criteria_names.get(c, c) for c in selected_criteria
        ])
    else:
        current_criteria_display = "üéØ <b>–ö—Ä–∏—Ç–µ—Ä–∏–∏:</b> –Ω–µ –≤—ã–±—Ä–∞–Ω—ã"

    return {
        "selected_exchange_type": type_names.get(sub_type, "–ù–µ –≤—ã–±—Ä–∞–Ω–æ"),
        "criteria_options": criteria_options,
        "criteria_selected": len(selected_criteria) > 0,
        "current_criteria_display": current_criteria_display,
    }


async def subscription_create_price_getter(
    dialog_manager: DialogManager, **_kwargs
) -> Dict[str, Any]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–µ–Ω—ã.

    Args:
        dialog_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∏–∞–ª–æ–≥–∞

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Ü–µ–Ω—ã
    """
    sub_type = dialog_manager.dialog_data.get("type")

    type_names = {
        "buy": "üìà –ü–æ–∫—É–ø–∫–∞ —á–∞—Å–æ–≤",
        "sell": "üìâ –ü—Ä–æ–¥–∞–∂–∞ —á–∞—Å–æ–≤",
        "both": "üîÑ –û–±–∞ —Ç–∏–ø–∞",
    }

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏
    criteria_widget: ManagedToggle = dialog_manager.find("criteria_toggles")
    selected_criteria = criteria_widget.get_checked() if criteria_widget else []

    criteria_names = {
        "price": "üí∞ –ü–æ —Ü–µ–Ω–µ",
        "time": "‚è∞ –ü–æ –≤—Ä–µ–º–µ–Ω–∏",
        "days": "üìÖ –ü–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏",
        "seller": "üë§ –ü–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É",
    }

    selected_criteria_text = ", ".join([
        criteria_names.get(c, c) for c in selected_criteria
    ])

    # –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã
    price_data = dialog_manager.dialog_data.get("price_data", {})
    input_step = price_data.get("step", "min")  # "min" –∏–ª–∏ "max"

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ü–µ–Ω—ã
    price_settings = []
    if price_data.get("min_price"):
        price_settings.append(f"–æ—Ç {price_data['min_price']} —Ä.")
    if price_data.get("max_price"):
        price_settings.append(f"–¥–æ {price_data['max_price']} —Ä.")

    if price_settings:
        price_settings_display = "\nüí∞ <b>–¶–µ–Ω–∞:</b> " + " ".join(price_settings)
    else:
        price_settings_display = "\nüí∞ <b>–¶–µ–Ω–∞:</b> –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–µ–π—á–∞—Å"

    return {
        "exchange_type_display": type_names.get(sub_type, "–ù–µ –≤—ã–±—Ä–∞–Ω–æ"),
        "criteria_display": selected_criteria_text or "–≤—Å–µ –æ–±–º–µ–Ω—ã",
        "price_settings_display": price_settings_display,
        "selected_criteria": selected_criteria_text,
        "min_price": price_data.get("min_price"),
        "max_price": price_data.get("max_price"),
        "input_step_min": input_step == "min",
        "input_step_max": input_step == "max",
        "input_step_active": True,
        "price_completed": price_data.get("completed", False),
    }


async def subscription_create_time_getter(
    dialog_manager: DialogManager, **_kwargs
) -> Dict[str, Any]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏.

    Args:
        dialog_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∏–∞–ª–æ–≥–∞

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º–∏
    """
    sub_type = dialog_manager.dialog_data.get("type")

    type_names = {
        "buy": "üìà –ü–æ–∫—É–ø–∫–∞ —á–∞—Å–æ–≤",
        "sell": "üìâ –ü—Ä–æ–¥–∞–∂–∞ —á–∞—Å–æ–≤",
        "both": "üîÑ –û–±–∞ —Ç–∏–ø–∞",
    }

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    criteria_widget: ManagedToggle = dialog_manager.find("criteria_toggles")
    selected_criteria = criteria_widget.get_checked() if criteria_widget else []

    criteria_names = {
        "price": "üí∞ –ü–æ —Ü–µ–Ω–µ",
        "time": "‚è∞ –ü–æ –≤—Ä–µ–º–µ–Ω–∏",
        "days": "üìÖ –ü–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏",
        "seller": "üë§ –ü–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É",
    }

    criteria_display = (
        ", ".join([criteria_names.get(c, c) for c in selected_criteria]) or "–≤—Å–µ –æ–±–º–µ–Ω—ã"
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    settings_parts = []

    # –¶–µ–Ω–∞
    price_data = dialog_manager.dialog_data.get("price_data", {})
    if price_data.get("min_price") or price_data.get("max_price"):
        price_parts = []
        if price_data.get("min_price"):
            price_parts.append(f"–æ—Ç {price_data['min_price']} —Ä.")
        if price_data.get("max_price"):
            price_parts.append(f"–¥–æ {price_data['max_price']} —Ä.")
        settings_parts.append("üí∞ –¶–µ–Ω–∞: " + " ".join(price_parts))

    # –í—Ä–µ–º—è (—Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø)
    time_widget: ManagedRadio = dialog_manager.find("time_range")
    selected_time = time_widget.get_checked() if time_widget else None
    if selected_time:
        time_names = {
            "morning": "—É—Ç—Ä–æ (06:00-12:00)",
            "afternoon": "–¥–µ–Ω—å (12:00-18:00)",
            "evening": "–≤–µ—á–µ—Ä (18:00-24:00)",
            "night": "–Ω–æ—á—å (00:00-06:00)",
            "work_hours": "—Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã (08:00-20:00)",
        }
        settings_parts.append(
            f"‚è∞ <b>–í—Ä–µ–º—è:</b> {time_names.get(selected_time, selected_time)}"
        )
    else:
        settings_parts.append("‚è∞ <b>–í—Ä–µ–º—è:</b> –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–µ–π—á–∞—Å")

    current_settings_display = (
        "\n" + "\n".join(settings_parts) if settings_parts else ""
    )

    time_ranges = [
        ("morning", "üåÖ –£—Ç—Ä–æ (06:00-12:00)"),
        ("afternoon", "‚òÄÔ∏è –î–µ–Ω—å (12:00-18:00)"),
        ("evening", "üåÜ –í–µ—á–µ—Ä (18:00-24:00)"),
        ("night", "üåô –ù–æ—á—å (00:00-06:00)"),
        ("work_hours", "üïò –†–∞–±–æ—á–∏–µ —á–∞—Å—ã (08:00-20:00)"),
    ]

    return {
        "exchange_type_display": type_names.get(sub_type, "–ù–µ –≤—ã–±—Ä–∞–Ω–æ"),
        "criteria_display": criteria_display,
        "current_settings_display": current_settings_display,
        "selected_criteria": ", ".join([
            criteria_names.get(c, c) for c in selected_criteria
        ]),
        "time_ranges": time_ranges,
        "time_selected": selected_time is not None,
    }


async def subscription_create_date_getter(
    dialog_manager: DialogManager, **_kwargs
) -> Dict[str, Any]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏.

    Args:
        dialog_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∏–∞–ª–æ–≥–∞

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –¥–Ω—è–º–∏ –Ω–µ–¥–µ–ª–∏
    """
    sub_type = dialog_manager.dialog_data.get("type")

    type_names = {
        "buy": "üìà –ü–æ–∫—É–ø–∫–∞ —á–∞—Å–æ–≤",
        "sell": "üìâ –ü—Ä–æ–¥–∞–∂–∞ —á–∞—Å–æ–≤",
        "both": "üîÑ –û–±–∞ —Ç–∏–ø–∞",
    }

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏
    criteria_widget: ManagedToggle = dialog_manager.find("criteria_toggles")
    selected_criteria = criteria_widget.get_checked() if criteria_widget else []

    criteria_names = {
        "price": "üí∞ –ü–æ —Ü–µ–Ω–µ",
        "time": "‚è∞ –ü–æ –≤—Ä–µ–º–µ–Ω–∏",
        "days": "üìÖ –ü–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏",
        "seller": "üë§ –ü–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É",
    }

    criteria_display = (
        ", ".join([criteria_names.get(c, c) for c in selected_criteria]) or "–≤—Å–µ –æ–±–º–µ–Ω—ã"
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    settings_parts = []

    # –¶–µ–Ω–∞
    price_data = dialog_manager.dialog_data.get("price_data", {})
    if price_data.get("min_price") or price_data.get("max_price"):
        price_parts = []
        if price_data.get("min_price"):
            price_parts.append(f"–æ—Ç {price_data['min_price']} —Ä.")
        if price_data.get("max_price"):
            price_parts.append(f"–¥–æ {price_data['max_price']} —Ä.")
        settings_parts.append("üí∞ –¶–µ–Ω–∞: " + " ".join(price_parts))

    # –í—Ä–µ–º—è
    time_widget: ManagedRadio = dialog_manager.find("time_range")
    selected_time = time_widget.get_checked() if time_widget else None
    if selected_time:
        time_names = {
            "morning": "—É—Ç—Ä–æ (06:00-12:00)",
            "afternoon": "–¥–µ–Ω—å (12:00-18:00)",
            "evening": "–≤–µ—á–µ—Ä (18:00-24:00)",
            "night": "–Ω–æ—á—å (00:00-06:00)",
            "work_hours": "—Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã (08:00-20:00)",
            "all_day": "–∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ",
        }
        settings_parts.append(
            f"‚è∞ –í—Ä–µ–º—è: {time_names.get(selected_time, selected_time)}"
        )

    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏ (—Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø)
    days_widget: ManagedToggle = dialog_manager.find("days_of_week")
    selected_days = days_widget.get_checked() if days_widget else []
    if selected_days:
        day_names = {
            "1": "–ü–Ω",
            "2": "–í—Ç",
            "3": "–°—Ä",
            "4": "–ß—Ç",
            "5": "–ü—Ç",
            "6": "–°–±",
            "7": "–í—Å",
        }
        days_text = ", ".join([day_names.get(d, d) for d in selected_days])
        settings_parts.append(f"üìÖ <b>–î–Ω–∏:</b> {days_text}")
    else:
        settings_parts.append("üìÖ <b>–î–Ω–∏:</b> –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–µ–π—á–∞—Å")

    current_settings_display = (
        "\n" + "\n".join(settings_parts) if settings_parts else ""
    )

    weekdays = [
        ("1", "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"),
        ("2", "–í—Ç–æ—Ä–Ω–∏–∫"),
        ("3", "–°—Ä–µ–¥–∞"),
        ("4", "–ß–µ—Ç–≤–µ—Ä–≥"),
        ("5", "–ü—è—Ç–Ω–∏—Ü–∞"),
        ("6", "–°—É–±–±–æ—Ç–∞"),
        ("7", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"),
    ]

    return {
        "exchange_type_display": type_names.get(sub_type, "–ù–µ –≤—ã–±—Ä–∞–Ω–æ"),
        "criteria_display": criteria_display,
        "current_settings_display": current_settings_display,
        "selected_criteria": _get_criteria_summary(dialog_manager),
        "weekdays": weekdays,
        "days_selected": len(selected_days) > 0,
    }


async def subscription_create_confirmation_getter(
    dialog_manager: DialogManager, **_kwargs
) -> Dict[str, Any]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏.

    Args:
        dialog_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∏–∞–ª–æ–≥–∞

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–¥–ø–∏—Å–∫–µ
    """
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    auto_name = _generate_subscription_name(dialog_manager)
    dialog_manager.dialog_data["subscription_name"] = auto_name

    subscription_name = dialog_manager.dialog_data.get(
        "subscription_name", "–ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞"
    )

    sub_type = dialog_manager.dialog_data.get("type")
    type_names = {
        "buy": "üìà –ü–æ–∫—É–ø–∫–∞ —á–∞—Å–æ–≤",
        "sell": "üìâ –ü—Ä–æ–¥–∞–∂–∞ —á–∞—Å–æ–≤",
        "both": "üîÑ –û–±–∞ —Ç–∏–ø–∞",
    }
    exchange_type = type_names.get(sub_type, "–ù–µ –≤—ã–±—Ä–∞–Ω–æ")

    # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
    criteria_summary = _get_detailed_criteria_summary(dialog_manager)

    # –°–≤–æ–¥–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    notification_summary = _get_notification_summary(dialog_manager)

    return {
        "subscription_name": subscription_name,
        "exchange_type": exchange_type,
        "criteria_summary": criteria_summary,
        "notification_summary": notification_summary,
    }


def _generate_subscription_name(dialog_manager: DialogManager) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏.

    Args:
        dialog_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∏–∞–ª–æ–≥–∞

    Returns:
        –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    """
    parts = []

    sub_type = dialog_manager.dialog_data.get("type")
    type_names = {"buy": "–ü–æ–∫—É–ø–∫–∞", "sell": "–ü—Ä–æ–¥–∞–∂–∞", "both": "–í—Å–µ –æ–±–º–µ–Ω—ã"}
    parts.append(type_names.get(sub_type, "–û–±–º–µ–Ω—ã"))

    # –°–æ—Ç—Ä—É–¥–Ω–∏–∫ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ)
    selected_seller_name = dialog_manager.dialog_data.get("selected_seller_name")
    if selected_seller_name:
        seller_short = short_name(selected_seller_name)
        parts.append(f"–æ—Ç {seller_short}")

    # –¶–µ–Ω–∞
    price_data = dialog_manager.dialog_data.get("price_data", {})
    if price_data.get("max_price"):
        parts.append(f"–¥–æ {price_data['max_price']}—Ä")
    elif price_data.get("min_price"):
        parts.append(f"–æ—Ç {price_data['min_price']}—Ä")

    # –í—Ä–µ–º—è
    time_widget: ManagedRadio = dialog_manager.find("time_range")
    selected_time = time_widget.get_checked() if time_widget else None
    if selected_time:
        time_names = {
            "morning": "—É—Ç—Ä–æ–º",
            "afternoon": "–¥–Ω–µ–º",
            "evening": "–≤–µ—á–µ—Ä–æ–º",
            "work_hours": "–≤ —Ä–∞–±.—á–∞—Å—ã",
        }
        if selected_time in time_names:
            parts.append(time_names[selected_time])

    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
    days_widget: ManagedToggle = dialog_manager.find("days_of_week")
    selected_days = days_widget.get_checked() if days_widget else []
    if selected_days and len(selected_days) < 7:
        if set(selected_days) == {"6", "7"}:
            parts.append("–≤ –≤—ã—Ö–æ–¥–Ω—ã–µ")
        elif set(selected_days) == {"1", "2", "3", "4", "5"}:
            parts.append("–≤ –±—É–¥–Ω–∏")

    return " ".join(parts) if parts else "–ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞"


def _get_criteria_summary(dialog_manager: DialogManager) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤."""
    criteria_widget: ManagedToggle = dialog_manager.find("criteria_toggles")
    selected_criteria = criteria_widget.get_checked() if criteria_widget else []

    criteria_names = {
        "price": "üí∞ –¶–µ–Ω–∞",
        "time": "‚è∞ –í—Ä–µ–º—è",
        "days": "üìÖ –î–Ω–∏ –Ω–µ–¥–µ–ª–∏",
        "seller": "üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü",
    }

    criteria_parts = [criteria_names.get(c, c) for c in selected_criteria]

    # –î–æ–±–∞–≤–ª—è–µ–º —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    price_data = dialog_manager.dialog_data.get("price_data", {})
    if price_data.get("min_price"):
        criteria_parts.append(f"–æ—Ç {price_data['min_price']} —Ä.")
    if price_data.get("max_price"):
        criteria_parts.append(f"–¥–æ {price_data['max_price']} —Ä.")

    # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    selected_seller_name = dialog_manager.dialog_data.get("selected_seller_name")
    if selected_seller_name:
        seller_short = short_name(selected_seller_name)
        criteria_parts.append(f"–æ—Ç {seller_short}")

    return ", ".join(criteria_parts) if criteria_parts else "–í—Å–µ –æ–±–º–µ–Ω—ã"


def _get_subscription_summary(dialog_manager: DialogManager) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è."""
    sub_type = dialog_manager.dialog_data.get("type")
    type_short = {"buy": "–ø–æ–∫—É–ø–∫–∞", "sell": "–ø—Ä–æ–¥–∞–∂–∞", "both": "–≤—Å–µ –æ–±–º–µ–Ω—ã"}

    criteria_summary = _get_criteria_summary(dialog_manager)

    return f"{type_short.get(sub_type, '–æ–±–º–µ–Ω—ã')}: {criteria_summary}"


def _get_detailed_criteria_summary(dialog_manager: DialogManager) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å–≤–æ–¥–∫—É –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤."""
    criteria_parts = []

    # –¶–µ–Ω–∞
    price_data = dialog_manager.dialog_data.get("price_data", {})
    if price_data.get("min_price") or price_data.get("max_price"):
        price_parts = []
        if price_data.get("min_price"):
            price_parts.append(f"–æ—Ç {price_data['min_price']} —Ä.")
        if price_data.get("max_price"):
            price_parts.append(f"–¥–æ {price_data['max_price']} —Ä.")
        criteria_parts.append(f"‚Ä¢ –¶–µ–Ω–∞: {' '.join(price_parts)}")

    # –í—Ä–µ–º—è
    time_widget: ManagedRadio = dialog_manager.find("time_range")
    selected_time = time_widget.get_checked() if time_widget else None
    if selected_time:
        time_names = {
            "morning": "—É—Ç—Ä–æ (06:00-12:00)",
            "afternoon": "–¥–µ–Ω—å (12:00-18:00)",
            "evening": "–≤–µ—á–µ—Ä (18:00-24:00)",
            "night": "–Ω–æ—á—å (00:00-06:00)",
            "work_hours": "—Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã (08:00-20:00)",
            "all_day": "–∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ",
        }
        criteria_parts.append(
            f"‚Ä¢ –í—Ä–µ–º—è: {time_names.get(selected_time, selected_time)}"
        )

    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
    days_widget: ManagedToggle = dialog_manager.find("days_of_week")
    selected_days = days_widget.get_checked() if days_widget else []
    if selected_days:
        day_names = {
            "1": "–ü–Ω",
            "2": "–í—Ç",
            "3": "–°—Ä",
            "4": "–ß—Ç",
            "5": "–ü—Ç",
            "6": "–°–±",
            "7": "–í—Å",
        }
        days_text = ", ".join([day_names.get(d, d) for d in selected_days])
        criteria_parts.append(f"‚Ä¢ –î–Ω–∏: {days_text}")

    # –°–æ—Ç—Ä—É–¥–Ω–∏–∫
    selected_seller_name = dialog_manager.dialog_data.get("selected_seller_name")
    if selected_seller_name:
        seller_short = short_name(selected_seller_name)
        criteria_parts.append(f"‚Ä¢ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: {seller_short}")

    return "\n".join(criteria_parts) if criteria_parts else "‚Ä¢ –í—Å–µ –æ–±–º–µ–Ω—ã"


def _get_notification_summary(dialog_manager: DialogManager) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    # –í—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω—ã –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö/–æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±–º–µ–Ω–∞—Ö
    return "‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±–º–µ–Ω–∞—Ö"


async def subscription_create_seller_search_getter(
    dialog_manager: DialogManager, **_kwargs
) -> Dict[str, Any]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏.

    Args:
        dialog_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∏–∞–ª–æ–≥–∞

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    """
    sub_type = dialog_manager.dialog_data.get("type")

    type_names = {
        "buy": "üìà –ü–æ–∫—É–ø–∫–∞ —á–∞—Å–æ–≤",
        "sell": "üìâ –ü—Ä–æ–¥–∞–∂–∞ —á–∞—Å–æ–≤",
        "both": "üîÑ –û–±–∞ —Ç–∏–ø–∞",
    }

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    criteria_widget: ManagedToggle = dialog_manager.find("criteria_toggles")
    selected_criteria = criteria_widget.get_checked() if criteria_widget else []

    criteria_names = {
        "price": "üí∞ –ü–æ —Ü–µ–Ω–µ",
        "time": "‚è∞ –ü–æ –≤—Ä–µ–º–µ–Ω–∏",
        "days": "üìÖ –ü–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏",
        "seller": "üë§ –ü–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É",
    }

    criteria_display = (
        ", ".join([criteria_names.get(c, c) for c in selected_criteria]) or "–≤—Å–µ –æ–±–º–µ–Ω—ã"
    )

    return {
        "exchange_type_display": type_names.get(sub_type, "–ù–µ –≤—ã–±—Ä–∞–Ω–æ"),
        "criteria_display": criteria_display,
    }


async def subscription_create_seller_results_getter(
    dialog_manager: DialogManager, **_kwargs
) -> Dict[str, Any]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.

    Args:
        dialog_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∏–∞–ª–æ–≥–∞

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
    """
    search_results = dialog_manager.dialog_data.get("seller_search_results", [])
    search_query = dialog_manager.dialog_data.get("seller_search_query", "")
    total_found = dialog_manager.dialog_data.get("seller_search_total", 0)

    return {
        "search_results": search_results,
        "search_query": search_query,
        "total_found": total_found,
        "has_results": len(search_results) > 0,
    }
