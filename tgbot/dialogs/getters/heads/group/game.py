"""–ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è –∏–≥—Ä–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –≥—Ä—É–ø–ø—ã."""

from datetime import datetime
from typing import Any

from aiogram_dialog import DialogManager
from stp_database import Employee, MainRequestsRepo

from tgbot.misc.helpers import format_fullname, get_status_emoji, strftime_date
from tgbot.services.leveling import LevelingSystem

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ä—É—Å—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –º–µ—Å—è—Ü–µ–≤
RUSSIAN_MONTHS = {
    1: "—è–Ω–≤–∞—Ä—å",
    2: "—Ñ–µ–≤—Ä–∞–ª—å",
    3: "–º–∞—Ä—Ç",
    4: "–∞–ø—Ä–µ–ª—å",
    5: "–º–∞–π",
    6: "–∏—é–Ω—å",
    7: "–∏—é–ª—å",
    8: "–∞–≤–≥—É—Å—Ç",
    9: "—Å–µ–Ω—Ç—è–±—Ä—å",
    10: "–æ–∫—Ç—è–±—Ä—å",
    11: "–Ω–æ—è–±—Ä—å",
    12: "–¥–µ–∫–∞–±—Ä—å",
}


async def game_statistics_getter(
    user: Employee, stp_repo: MainRequestsRepo, **_kwargs
) -> dict[str, Any]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥—Ä—É–ø–ø—ã.

    Args:
        user: –≠–∫–∑–µ–º–ø–ª—è—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–æ–¥–µ–ª—å—é Employee (—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å)
        stp_repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π STP

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –≥—Ä—É–ø–ø—ã
    """
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≥—Ä—É–ø–ø—ã
    group_members = await stp_repo.employee.get_users(head=user.fullname)

    if not group_members:
        return {
            "statistics_text": "‚ùå –í —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø–µ –Ω–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
            "total_balance": 0,
            "avg_level": 0,
        }

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –∏ –≥–æ–¥
    now = datetime.now()
    current_month = now.month
    current_year = now.year
    month_name = f"{RUSSIAN_MONTHS[current_month]} {current_year}"

    # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –æ–¥–∏–Ω –ø—Ä–æ—Ö–æ–¥
    total_balance = 0
    total_level = 0
    month_balances = {}
    members_with_balance = []

    for member in group_members:
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
        balance = await stp_repo.transaction.get_user_balance(member.user_id)
        total_balance += balance
        members_with_balance.append((member, balance))

        # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –±–∞–ª–ª–æ–≤ –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —É—Ä–æ–≤–Ω—è
        achievements_sum = await stp_repo.transaction.get_user_achievements_sum(
            member.user_id
        )
        level = LevelingSystem.calculate_level(achievements_sum)
        total_level += level

        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        transactions = await stp_repo.transaction.get_user_transactions(
            user_id=member.user_id
        )
        member_month_sum = sum(
            t.amount
            for t in transactions
            if t.created_at.month == current_month and t.created_at.year == current_year
        )
        month_balances[member.user_id] = (member, member_month_sum)

    avg_level = total_level / len(group_members)

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è —Ç–æ–ø-3
    month_top = sorted(month_balances.values(), key=lambda x: x[1], reverse=True)[:3]
    all_time_top = sorted(members_with_balance, key=lambda x: x[1], reverse=True)[:3]

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–æ–ø-3 –∑–∞ –º–µ—Å—è—Ü
    month_top_text = []
    medals = ["ü•á", "ü•à", "ü•â"]

    for idx, (member, balance) in enumerate(month_top):
        name = format_fullname(
            member.fullname, True, True, member.username, member.user_id
        )
        month_top_text.append(f"{medals[idx]} {name} - {int(balance)} –±–∞–ª–ª–æ–≤")

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–æ–ø-3 –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è
    all_time_top_text = []
    for idx, (member, balance) in enumerate(all_time_top):
        name = format_fullname(
            member.fullname, True, True, member.username, member.user_id
        )
        all_time_top_text.append(f"{medals[idx]} {name} - {balance} –±–∞–ª–ª–æ–≤")

    statistics_text = f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–ø–ø—ã</b>

üíé –û–±—â–∏–µ –±–∞–ª–ª—ã –≥—Ä—É–ø–ø—ã: {total_balance} –±–∞–ª–ª–æ–≤
‚ö°Ô∏è –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –≥—Ä—É–ø–ø—ã: {int(avg_level)}

üèÜ –¢–û–ü-3 –∑–∞ {month_name}:
{chr(10).join(month_top_text) if month_top_text else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"}

üåü –¢–û–ü-3 –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è:
{chr(10).join(all_time_top_text) if all_time_top_text else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"}"""

    return {
        "statistics_text": statistics_text,
        "total_balance": total_balance,
        "avg_level": int(avg_level),
    }


async def game_achievements_getter(
    user: Employee, stp_repo: MainRequestsRepo, **_kwargs
) -> dict[str, Any]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –≥—Ä—É–ø–ø—ã.

    Args:
        user: –≠–∫–∑–µ–º–ø–ª—è—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–æ–¥–µ–ª—å—é Employee (—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å)
        stp_repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π STP

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏ –≥—Ä—É–ø–ø—ã
    """
    from html import escape

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≥—Ä—É–ø–ø—ã
    group_members = await stp_repo.employee.get_users(head=user.fullname)

    if not group_members:
        return {
            "achievements_text": "‚ùå –í —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø–µ –Ω–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
            "achievements": [],
            "total_achievements": 0,
        }

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏-–¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã
    all_achievements = []
    for member in group_members:
        transactions = await stp_repo.transaction.get_user_transactions(
            user_id=member.user_id, only_achievements=True
        )
        for transaction in transactions:
            all_achievements.append((member, transaction))

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
    all_achievements.sort(key=lambda x: x[1].created_at, reverse=True)

    # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
    # –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    achievement_ids = set(t.source_id for _, t in all_achievements[:50] if t.source_id)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º (–µ—Å–ª–∏ –µ—Å—Ç—å –º–µ—Ç–æ–¥ –¥–ª—è —ç—Ç–æ–≥–æ)
    # –ò–Ω–∞—á–µ –∫—ç—à–∏—Ä—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä–µ
    achievements_cache = {}
    for achievement_id in achievement_ids:
        achievement = await stp_repo.achievement.get_achievements(
            achievement_id=achievement_id
        )
        if achievement:
            achievements_cache[achievement_id] = achievement

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    formatted_achievements = []
    for member, transaction in all_achievements[:50]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 50 –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏
        if not transaction.source_id:
            continue

        achievement = achievements_cache.get(transaction.source_id)
        if not achievement:
            continue

        period = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        match achievement.period:
            case "d":
                period = "–†–∞–∑ –≤ –¥–µ–Ω—å"
            case "w":
                period = "–†–∞–∑ –≤ –Ω–µ–¥–µ–ª—é"
            case "m":
                period = "–†–∞–∑ –≤ –º–µ—Å—è—Ü"
            case "A":
                period = "–í—Ä—É—á–Ω—É—é"

        date_str = transaction.created_at.strftime(strftime_date)
        member_name = format_fullname(
            member.fullname, True, True, member.username, member.user_id
        )

        formatted_achievements.append((
            transaction.id,
            escape(achievement.name),
            transaction.amount,
            escape(achievement.description),
            achievement.position,
            period,
            date_str,
            member_name,
        ))

    return {
        "achievements": formatted_achievements,
        "total_achievements": len(all_achievements),
    }


async def game_products_getter(
    user: Employee, stp_repo: MainRequestsRepo, dialog_manager: DialogManager, **_kwargs
) -> dict[str, Any]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∫—É–ø–æ–∫ –≥—Ä—É–ø–ø—ã.

    Args:
        user: –≠–∫–∑–µ–º–ø–ª—è—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–æ–¥–µ–ª—å—é Employee (—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å)
        stp_repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π STP
        dialog_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∏–∞–ª–æ–≥–∞

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –ø–æ–∫—É–ø–∫–∞–º–∏ –≥—Ä—É–ø–ø—ã
    """
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≥—Ä—É–ø–ø—ã
    group_members = await stp_repo.employee.get_users(head=user.fullname)

    if not group_members:
        return {
            "products": [],
            "total_bought": 0,
            "total_shown": 0,
        }

    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä —Å—Ç–∞—Ç—É—Å–∞
    filter_widget = dialog_manager.find("game_inventory_filter")
    filter_type = filter_widget.get_checked() if filter_widget else "all"

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–∫—É–ø–∫–∏ –≥—Ä—É–ø–ø—ã
    all_products = []
    for member in group_members:
        user_products = await stp_repo.purchase.get_user_purchases_with_details(
            user_id=member.user_id
        )
        for product in user_products:
            all_products.append((member, product))

    total_bought = len(all_products)

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
    formatted_products = []
    for member, product in all_products:
        user_product = product.user_purchase
        product_info = product.product_info

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä
        if filter_type != "all" and user_product.status != filter_type:
            continue

        date_str = user_product.bought_at.strftime("%d.%m.%y")
        status_emoji = get_status_emoji(user_product.status)
        usage_info = f"({product.current_usages}/{product.max_usages})"
        member_name = format_fullname(member.fullname, True, True)
        button_text = f"{status_emoji} {usage_info} {product_info.name} - {member_name} ({date_str})"

        formatted_products.append((
            user_product.id,
            button_text,
            product_info.name,
            product_info.description,
            product_info.cost,
            user_product.status,
            product.current_usages,
            product.max_usages,
            member_name,
        ))

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –ø–æ–∫—É–ø–∫–∏ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞) - –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –¥–∞—Ç—ã –ø–æ–∫—É–ø–∫–∏ –ø–æ ID
    purchase_dates = {
        product.user_purchase.id: product.user_purchase.bought_at
        for _, product in all_products
    }
    formatted_products.sort(
        key=lambda x: purchase_dates.get(x[0], datetime.min),
        reverse=True,
    )

    return {
        "products": formatted_products,
        "total_bought": total_bought,
        "total_shown": len(formatted_products),
    }


async def game_balance_history_getter(
    user: Employee, stp_repo: MainRequestsRepo, **_kwargs
) -> dict[str, Any]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –≥—Ä—É–ø–ø—ã.

    Args:
        user: –≠–∫–∑–µ–º–ø–ª—è—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–æ–¥–µ–ª—å—é Employee (—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å)
        stp_repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π STP

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∏—Å—Ç–æ—Ä–∏–µ–π –±–∞–ª–∞–Ω—Å–∞ –≥—Ä—É–ø–ø—ã
    """
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≥—Ä—É–ø–ø—ã
    group_members = await stp_repo.employee.get_users(head=user.fullname)

    if not group_members:
        return {
            "history": [],
            "total_transactions": 0,
        }

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≥—Ä—É–ø–ø—ã
    all_transactions = []
    for member in group_members:
        transactions = await stp_repo.transaction.get_user_transactions(
            user_id=member.user_id
        )
        for transaction in transactions:
            all_transactions.append((member, transaction))

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
    all_transactions.sort(key=lambda x: x[1].created_at, reverse=True)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 100)
    formatted_history = []
    for member, transaction in all_transactions[:100]:
        date_str = transaction.created_at.strftime(strftime_date)
        member_name = format_fullname(member.fullname, True, True)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        transaction_type = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        if transaction.type == "achievement":
            transaction_type = "–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ"
        elif transaction.type == "purchase":
            transaction_type = "–ü–æ–∫—É–ø–∫–∞"
        elif transaction.type == "casino":
            transaction_type = "–ö–∞–∑–∏–Ω–æ"
        elif transaction.type == "manual":
            transaction_type = "–†—É—á–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ"

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É —Å–æ –∑–Ω–∞–∫–æ–º
        amount_str = (
            f"+{transaction.amount}"
            if transaction.amount > 0
            else str(transaction.amount)
        )

        formatted_history.append((
            transaction.id,
            member_name,
            amount_str,
            transaction_type,
            date_str,
            transaction.comment or "‚Äî",
        ))

    return {
        "history": formatted_history,
        "total_transactions": len(all_transactions),
    }


async def game_casino_getter(
    user: Employee, stp_repo: MainRequestsRepo, **_kwargs
) -> dict[str, Any]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º –∫ –∫–∞–∑–∏–Ω–æ –≥—Ä—É–ø–ø—ã.

    Args:
        user: –≠–∫–∑–µ–º–ø–ª—è—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–æ–¥–µ–ª—å—é Employee (—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å)
        stp_repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π STP

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–æ—Å—Ç—É–ø–µ –∫ –∫–∞–∑–∏–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–ª–µ–Ω–∞ –≥—Ä—É–ø–ø—ã
    """
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≥—Ä—É–ø–ø—ã
    group_members = await stp_repo.employee.get_users(head=user.fullname)

    if not group_members:
        return {
            "members": [],
            "total_members": 0,
            "casino_enabled_count": 0,
        }

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –§–ò–û
    sorted_members = sorted(group_members, key=lambda k: k.fullname)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    formatted_members = []
    casino_enabled_count = 0

    for member in sorted_members:
        if member.is_casino_allowed:
            casino_enabled_count += 1

        status_emoji = "üü¢" if member.is_casino_allowed else "üî¥"
        member_name = format_fullname(member.fullname, True, True)

        formatted_members.append((
            member.id,
            f"{status_emoji} {member_name}",
            member.is_casino_allowed,
        ))

    return {
        "members": formatted_members,
        "total_members": len(sorted_members),
        "casino_enabled_count": casino_enabled_count,
    }


async def game_rating_getter(
    user: Employee, stp_repo: MainRequestsRepo, **_kwargs
) -> dict[str, Any]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –≥—Ä—É–ø–ø—ã –ø–æ –±–∞–ª–∞–Ω—Å—É.

    Args:
        user: –≠–∫–∑–µ–º–ø–ª—è—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–æ–¥–µ–ª—å—é Employee (—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å)
        stp_repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π STP

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º –≥—Ä—É–ø–ø—ã –ø–æ –±–∞–ª–∞–Ω—Å—É
    """
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≥—Ä—É–ø–ø—ã
    group_members = await stp_repo.employee.get_users(head=user.fullname)

    if not group_members:
        return {
            "rating_text": "‚ùå –í —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø–µ –Ω–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
            "members": [],
        }

    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å—ã –¥–ª—è –≤—Å–µ—Ö —á–ª–µ–Ω–æ–≤ –≥—Ä—É–ø–ø—ã
    members_with_balance = []
    for member in group_members:
        balance = await stp_repo.transaction.get_user_balance(member.user_id)
        members_with_balance.append((member, balance))

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –±–∞–ª–∞–Ω—Å—É (—É–±—ã–≤–∞–Ω–∏–µ)
    sorted_members = sorted(members_with_balance, key=lambda x: x[1], reverse=True)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–π—Ç–∏–Ω–≥
    rating_lines = ["üéñÔ∏è <b>–†–µ–π—Ç–∏–Ω–≥ –≥—Ä—É–ø–ø—ã –ø–æ –±–∞–ª–∞–Ω—Å—É</b>\n"]

    medals = ["ü•á", "ü•à", "ü•â"]
    for idx, (member, balance) in enumerate(sorted_members, 1):
        if idx <= 3:
            prefix = medals[idx - 1]
        else:
            prefix = f"{idx}."

        member_name = format_fullname(
            member.fullname, True, True, member.username, member.user_id
        )
        rating_lines.append(f"{prefix} {member_name}")
        rating_lines.append(f"{balance} –±–∞–ª–ª–æ–≤")

    rating_text = "\n".join(rating_lines)

    return {
        "rating_text": rating_text,
        "members": [(m[0].id, m[0].fullname, m[1]) for m in sorted_members],
    }
