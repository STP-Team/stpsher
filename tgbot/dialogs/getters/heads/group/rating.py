"""–ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ –≥—Ä—É–ø–ø—ã."""

from typing import Any, Sequence

from aiogram_dialog import DialogManager
from aiogram_dialog.widgets.kbd import ManagedRadio
from sqlalchemy.orm import Mapped
from stp_database import Employee, MainRequestsRepo
from stp_database.models.KPI.spec_kpi import SpecDayKPI, SpecMonthKPI, SpecWeekKPI
from stp_database.repo.KPI.requests import KPIRequestsRepo

from tgbot.misc.helpers import format_fullname, strftime_date

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –Ω–æ—Ä–º–∞—Ç–∏–≤–æ–≤
NORMATIVES = {
    "csi": "–û—Ü–µ–Ω–∫–∞",
    "pok": "–û—Ç–∫–ª–∏–∫",
    "flr": "FLR",
    "sales": "–ü—Ä–æ–¥–∞–∂–∏",
}

PERIODS = {
    "day": "–î–µ–Ω—å",
    "week": "–ù–µ–¥–µ–ª—è",
    "month": "–ú–µ—Å—è—Ü",
}


async def get_normatives_data(**_kwargs) -> dict[str, Any]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–∞."""
    return {
        "normatives": [
            (normative_id, normative_name)
            for normative_id, normative_name in NORMATIVES.items()
        ]
    }


async def get_periods_data(**_kwargs) -> dict[str, Any]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞."""
    return {
        "periods": [
            (period_id, period_name) for period_id, period_name in PERIODS.items()
        ]
    }


def _get_medal_emoji(position: int) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –º–µ–¥–∞–ª–∏ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏."""
    if position == 1:
        return "ü•á"
    elif position == 2:
        return "ü•à"
    elif position == 3:
        return "ü•â"
    else:
        return f"{position}."


async def _get_kpi_data_by_period(
    kpi_repo: KPIRequestsRepo, fullnames: list[str], period: str
) -> Sequence[SpecDayKPI] | Sequence[SpecWeekKPI] | Sequence[SpecMonthKPI] | list[Any]:
    """–ü–æ–ª—É—á–∏—Ç—å KPI –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–µ—Ä–∏–æ–¥—É."""
    if period == "day":
        return await kpi_repo.spec_day_kpi.get_kpi(fullnames)
    elif period == "week":
        return await kpi_repo.spec_week_kpi.get_kpi(fullnames)
    elif period == "month":
        return await kpi_repo.spec_month_kpi.get_kpi(fullnames)
    return []


def _format_rating_value(value: float | int | None, normative: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–æ—Ä–º–∞—Ç–∏–≤–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    if value is None:
        return "‚Äî"

    if normative == "sales":
        return str(int(value))
    elif normative == "csi":
        return str(value)
    elif normative in ("pok", "flr"):
        return f"{value:.1f}%"
    return str(value)


def _extract_normative_value(
    kpi: SpecDayKPI | SpecWeekKPI | SpecMonthKPI, normative: str
) -> float | None | Mapped[float | None] | Any:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è.

    Args:
        kpi: –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å
        normative: –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–æ—Ä–º–∞—Ç–∏–≤–∞

    Returns:
        –ó–Ω–∞—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è
    """
    if normative == "csi":
        return kpi.csi
    elif normative == "pok":
        return kpi.pok
    elif normative == "flr":
        return kpi.flr
    elif normative == "sales":
        return float(kpi.sales_count) if kpi.sales_count else None
    return None


def _format_rating_text(
    top_employees: list[dict[str, Any]],
    normative_name: str,
    period_name: str,
    updated_at: str | None,
) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    lines = []
    lines.append("üéñÔ∏è <b>–†–µ–π—Ç–∏–Ω–≥ –≥—Ä—É–ø–ø—ã</b>\n")
    lines.append(f"üìä <b>–ù–æ—Ä–º–∞—Ç–∏–≤:</b> {normative_name}")
    lines.append(f"üìÖ <b>–ü–µ—Ä–∏–æ–¥:</b> {period_name}\n")

    for idx, item in enumerate(top_employees, 1):
        medal = _get_medal_emoji(idx)
        name = item["formatted_name"]
        value = item["formatted_value"]
        contacts = item["contacts_info"]

        lines.append(f"{medal} {name}: <b>{value}</b>")
        if contacts:
            lines.append(contacts)

    if updated_at:
        lines.append(f"\n<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_at}</i>")

    return "\n".join(lines)


async def get_rating_display_data(
    user: Employee,
    stp_repo: MainRequestsRepo,
    kpi_repo: KPIRequestsRepo,
    dialog_manager: DialogManager,
    **_kwargs,
) -> dict[str, Any]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã.

    Args:
        user: –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å, –∑–∞–ø—Ä–æ—Å–∏–≤—à–∏–π —Ä–µ–π—Ç–∏–Ω–≥
        stp_repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π STP
        kpi_repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π KPI
        dialog_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∏–∞–ª–æ–≥–∞

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞ –≥—Ä—É–ø–ø—ã
    """
    period_radio: ManagedRadio = dialog_manager.find("period_radio")
    normative_radio: ManagedRadio = dialog_manager.find("normative_radio")

    period = period_radio.get_checked() or "day"
    normative = normative_radio.get_checked() or "csi"

    base_data = {
        "normatives": [
            (normative_id, normative_name)
            for normative_id, normative_name in NORMATIVES.items()
        ],
        "periods": [
            (period_id, period_name) for period_id, period_name in PERIODS.items()
        ],
        "normative": normative,
        "normative_name": NORMATIVES.get(normative, ""),
        "period": period,
        "period_name": PERIODS.get(period, ""),
        "error": None,
        "top_employees": [],
        "updated_at": None,
    }

    if not user:
        return {
            **base_data,
            "rating_text": "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è",
        }

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
    team_members = await stp_repo.employee.get_users(head=user.fullname)
    if not team_members:
        return {
            **base_data,
            "rating_text": "‚ùå –í —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø–µ –Ω–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
        }

    # –ü–æ–ª—É—á–∞–µ–º –§–ò–û –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    fullnames = [member.fullname for member in team_members]

    # –ü–æ–ª—É—á–∞–µ–º KPI –¥–∞–Ω–Ω—ã–µ
    kpi_data = await _get_kpi_data_by_period(kpi_repo, fullnames, period)

    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ KPI –ø–æ –§–ò–û
    kpi_dict = {kpi.fullname: kpi for kpi in kpi_data}

    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏
    employees_with_ratings = []
    for member in team_members:
        kpi = kpi_dict.get(member.fullname)
        if kpi:
            value = _extract_normative_value(kpi, normative)
            if value is not None:
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                contacts_info = ""
                if kpi.contacts_count:
                    contacts_info = (
                        f"{kpi.contacts_count} " + "—á–∞—Ç–∞(–æ–≤)"
                        if user.division == "–ù–¶–ö"
                        else "–∑–≤–æ–Ω–∫–∞(–æ–≤)"
                    )

                employees_with_ratings.append({
                    "employee": member,
                    "kpi": kpi,
                    "value": value,
                    "formatted_value": _format_rating_value(value, normative),
                    "formatted_name": format_fullname(
                        member.fullname, True, True, member.username, member.user_id
                    ),
                    "contacts_info": contacts_info,
                })

    if not employees_with_ratings:
        return {
            **base_data,
            "rating_text": f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ <code>{NORMATIVES[normative]}</code> –∑–∞ <code>{PERIODS[period].lower()}</code>",
        }

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
    employees_with_ratings.sort(key=lambda x: x["value"], reverse=True)

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç–æ–ø-10
    top_employees = employees_with_ratings[:10]

    # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    updated_at = None
    if top_employees and top_employees[0]["kpi"].updated_at:
        updated_at = top_employees[0]["kpi"].updated_at.strftime(strftime_date)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞
    rating_text = _format_rating_text(
        top_employees, NORMATIVES[normative], PERIODS[period], updated_at
    )

    return {
        **base_data,
        "rating_text": rating_text,
    }
