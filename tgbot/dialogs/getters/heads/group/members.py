"""–ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–∞–≤–æ–º –≥—Ä—É–ø–ø—ã."""

from typing import Any

from aiogram_dialog import DialogManager
from stp_database import Employee, MainRequestsRepo
from stp_database.repo.KPI.requests import KPIRequestsRepo

from tgbot.dialogs.getters.common.game.kpi import (
    base_kpi_data,
    kpi_getter,
    kpi_requirements_getter,
    salary_getter,
)
from tgbot.dialogs.getters.common.schedules import user_schedule_getter
from tgbot.misc.dicts import roles
from tgbot.misc.helpers import format_fullname, get_role


async def group_members_getter(
    user: Employee, stp_repo: MainRequestsRepo, **_kwargs
) -> dict[str, Any]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —á–ª–µ–Ω–æ–≤ –≥—Ä—É–ø–ø—ã —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è.

    Args:
        user: –≠–∫–∑–µ–º–ø–ª—è—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–æ–¥–µ–ª—å—é Employee (—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å)
        stp_repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π STP

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å–æ —Å–ø–∏—Å–∫–æ–º —á–ª–µ–Ω–æ–≤ –≥—Ä—É–ø–ø—ã
    """
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–∞–Ω–Ω—ã–º —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º
    group_members = await stp_repo.employee.get_users(head=user.fullname)

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –§–ò–û
    sorted_members = sorted(group_members, key=lambda k: k.fullname)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    formatted_members = []
    for member in sorted_members:
        role_info = get_role(member.role)
        formatted_members.append((
            member.id,
            format_fullname(member.fullname, True, True),
            role_info["emoji"] if role_info else "",
        ))

    return {
        "members_list": formatted_members,
        "total_members": len(formatted_members),
    }


async def member_info_getter(
    stp_repo: MainRequestsRepo,
    dialog_manager: DialogManager,
    **_kwargs,
) -> dict[str, str]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —á–ª–µ–Ω–µ –≥—Ä—É–ø–ø—ã.

    Args:
        stp_repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π STP
        dialog_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∏–∞–ª–æ–≥–∞

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ
    """
    selected_user_id = dialog_manager.dialog_data.get("selected_member_id")

    if not selected_user_id:
        return {"user_info": "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω"}

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        searched_user = await stp_repo.employee.get_users(main_id=int(selected_user_id))
        if not searched_user:
            return {"user_info": "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}

        # –ü–æ–ª—É—á–∞–µ–º —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å
        user_head = None
        if searched_user.head:
            user_head = await stp_repo.employee.get_users(fullname=searched_user.head)

        user_info = f"""<b>{format_fullname(searched_user.fullname, False, True, searched_user.username, searched_user.user_id)}</b>

<b>üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {searched_user.position} {searched_user.division}"""

        if user_head:
            user_info += f"\n<b>üëë –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å:</b> {
                format_fullname(
                    user_head.fullname,
                    True,
                    True,
                    user_head.username,
                    user_head.user_id,
                )
            }"

        if searched_user.email:
            user_info += f"\n<b>üìß Email:</b> {searched_user.email}"

        user_info += (
            f"\n\nüõ°Ô∏è <b>–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞:</b> {get_role(searched_user.role)['name']}"
        )

        return {
            "user_info": user_info,
            "is_casino_allowed": searched_user.is_casino_allowed,
        }

    except Exception as e:
        return {"user_info": f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}"}


async def member_access_level_getter(
    stp_repo: MainRequestsRepo,
    dialog_manager: DialogManager,
    **_kwargs,
) -> dict[str, str]:
    """–ì–µ—Ç—Ç–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–æ–ª–µ–π –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —á–ª–µ–Ω—É –≥—Ä—É–ø–ø—ã.

    Args:
        stp_repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π STP
        dialog_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∏–∞–ª–æ–≥–∞

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–æ–ª–µ–π –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    """
    selected_user_id = dialog_manager.dialog_data.get("selected_member_id")
    selected_user = await stp_repo.employee.get_users(main_id=int(selected_user_id))

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–æ–ª–∏ –¥–ª—è Select –≤–∏–¥–∂–µ—Ç–∞ (—Ç–æ–ª—å–∫–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –∏ —Å—Ç–∞–∂–µ—Ä—ã –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π)
    formatted_roles = [
        (role_id, f"{role_data['emoji']} {role_data['name']}")
        for role_id, role_data in roles.items()
        if role_id in [1, 3]
    ]

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    selected_user_name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    current_role_name = ""

    if selected_user_id:
        try:
            if selected_user:
                selected_user_name = format_fullname(
                    selected_user.fullname,
                    short=False,
                    gender_emoji=True,
                    username=selected_user.username,
                    user_id=selected_user.user_id,
                )
                role_info = get_role(selected_user.role)
                if role_info:
                    current_role_name = f"{role_info['emoji']} {role_info['name']}"
        except Exception:
            pass

    return {
        "roles": formatted_roles,
        "selected_user_name": selected_user_name,
        "current_role_name": current_role_name,
    }


async def member_schedule_getter(
    stp_repo: MainRequestsRepo, dialog_manager: DialogManager, **_kwargs
) -> dict:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–ª–µ–Ω–∞ –≥—Ä—É–ø–ø—ã.

    Args:
        stp_repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π STP
        dialog_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∏–∞–ª–æ–≥–∞

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
    """
    selected_user_id = dialog_manager.dialog_data.get("selected_member_id")
    selected_user = await stp_repo.employee.get_users(main_id=int(selected_user_id))

    schedule_data = await user_schedule_getter(
        user=selected_user, stp_repo=stp_repo, dialog_manager=dialog_manager
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –Ω–∞—á–∞–ª–æ —Ç–µ–∫—Å—Ç–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    user_name = format_fullname(
        selected_user.fullname,
        short=False,
        gender_emoji=True,
    )

    if "schedule_text" in schedule_data:
        schedule_data["schedule_text"] = (
            f"<b>{user_name}</b>\n\n<blockquote>{schedule_data['schedule_text']}</blockquote>"
        )

    return schedule_data


async def member_kpi_getter(
    stp_repo: MainRequestsRepo,
    kpi_repo: KPIRequestsRepo,
    dialog_manager: DialogManager,
    **_kwargs,
) -> dict:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è KPI –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–ª–µ–Ω–∞ –≥—Ä—É–ø–ø—ã.

    Args:
        stp_repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π STP
        kpi_repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π KPI
        dialog_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∏–∞–ª–æ–≥–∞

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ KPI
    """
    selected_user_id = dialog_manager.dialog_data.get("selected_member_id")
    selected_user = await stp_repo.employee.get_users(main_id=int(selected_user_id))

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–º–∏–∏
    premium_data = await base_kpi_data(user=selected_user, kpi_repo=kpi_repo)
    premium = premium_data.get("premium")

    # –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –≥–µ—Ç—Ç–µ—Ä —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    kpi_data = await kpi_getter(user=selected_user, premium=premium)

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –Ω–∞—á–∞–ª–æ —Ç–µ–∫—Å—Ç–∞
    user_name = format_fullname(
        selected_user.fullname,
        short=False,
        gender_emoji=True,
    )

    if "kpi_text" in kpi_data:
        kpi_data["kpi_text"] = (
            f"<b>{user_name}</b>\n\n<blockquote>{kpi_data['kpi_text']}</blockquote>"
        )

    return kpi_data


async def member_kpi_requirements_getter(
    stp_repo: MainRequestsRepo,
    kpi_repo: KPIRequestsRepo,
    dialog_manager: DialogManager,
    **_kwargs,
) -> dict:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ—Ä–º–∞—Ç–∏–≤–æ–≤ KPI –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–ª–µ–Ω–∞ –≥—Ä—É–ø–ø—ã.

    Args:
        stp_repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π STP
        kpi_repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π KPI
        dialog_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∏–∞–ª–æ–≥–∞

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–æ—Ä–º–∞—Ç–∏–≤–æ–≤
    """
    selected_user_id = dialog_manager.dialog_data.get("selected_member_id")
    selected_user = await stp_repo.employee.get_users(main_id=int(selected_user_id))

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–º–∏–∏
    premium_data = await base_kpi_data(user=selected_user, kpi_repo=kpi_repo)
    premium = premium_data.get("premium")

    # –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –≥–µ—Ç—Ç–µ—Ä —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    requirements_data = await kpi_requirements_getter(
        user=selected_user, premium=premium
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –Ω–∞—á–∞–ª–æ —Ç–µ–∫—Å—Ç–∞
    user_name = format_fullname(
        selected_user.fullname,
        short=False,
        gender_emoji=True,
    )

    if "requirements_text" in requirements_data:
        requirements_data["requirements_text"] = (
            f"<b>{user_name}</b>\n\n<blockquote>{requirements_data['requirements_text']}</blockquote>"
        )

    return requirements_data


async def member_salary_getter(
    stp_repo: MainRequestsRepo,
    kpi_repo: KPIRequestsRepo,
    dialog_manager: DialogManager,
    **_kwargs,
) -> dict:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—Ä–ø–ª–∞—Ç—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–ª–µ–Ω–∞ –≥—Ä—É–ø–ø—ã.

    Args:
        stp_repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π STP
        kpi_repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π KPI
        dialog_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∏–∞–ª–æ–≥–∞

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞—Ä–ø–ª–∞—Ç—ã
    """
    selected_user_id = dialog_manager.dialog_data.get("selected_member_id")
    selected_user = await stp_repo.employee.get_users(main_id=int(selected_user_id))

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–º–∏–∏
    premium_data = await base_kpi_data(user=selected_user, kpi_repo=kpi_repo)
    premium = premium_data.get("premium")

    # –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –≥–µ—Ç—Ç–µ—Ä —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    salary_data = await salary_getter(user=selected_user, premium=premium)

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –Ω–∞—á–∞–ª–æ —Ç–µ–∫—Å—Ç–∞
    user_name = format_fullname(
        selected_user.fullname,
        short=False,
        gender_emoji=True,
    )

    if "salary_text" in salary_data:
        salary_data["salary_text"] = (
            f"<b>{user_name}</b>\n\n<blockquote>{salary_data['salary_text']}</blockquote>"
        )

    return salary_data


async def member_achievements_getter(
    stp_repo: MainRequestsRepo, dialog_manager: DialogManager, **_kwargs
) -> dict[str, Any]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–ª–µ–Ω–∞ –≥—Ä—É–ø–ø—ã.

    Args:
        stp_repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π STP
        dialog_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∏–∞–ª–æ–≥–∞

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∏—Å—Ç–æ—Ä–∏–µ–π –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    from html import escape

    selected_user_id = dialog_manager.dialog_data.get("selected_member_id")
    selected_user = await stp_repo.employee.get_users(main_id=int(selected_user_id))

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏-–¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    transactions = await stp_repo.transaction.get_user_transactions(
        user_id=selected_user.user_id, only_achievements=True
    )

    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–µ—Ä–∏–æ–¥–∞
    selected_period = dialog_manager.find(
        "member_achievement_period_filter"
    ).get_checked()

    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–µ—Ä–∏–æ–¥—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if selected_period != "all":
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø–µ—Ä–∏–æ–¥
        all_achievements = await stp_repo.achievement.get_achievements()
        achievement_periods = {ach.id: ach.period for ach in all_achievements}

        transactions = [
            t
            for t in transactions
            if t.source_id and achievement_periods.get(t.source_id) == selected_period
        ]

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    formatted_achievements = []
    for transaction in transactions:
        if not transaction.source_id:
            continue

        achievement = await stp_repo.achievement.get_achievements(
            achievement_id=transaction.source_id
        )
        if not achievement:
            continue

        period = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        match achievement.period:
            case "d":
                period = "–†–∞–∑ –≤ –¥–µ–Ω—å"
            case "w":
                period = "–†–∞–∑ –≤ –Ω–µ–¥–µ–ª—é"
            case "m":
                period = "–†–∞–∑ –≤ –º–µ—Å—è—Ü"
            case "A":
                period = "–í—Ä—É—á–Ω—É—é"

        date_str = transaction.created_at.strftime("%d.%m.%y %H:%M")

        formatted_achievements.append((
            transaction.id,
            escape(achievement.name),
            transaction.amount,
            escape(achievement.description),
            achievement.position,
            period,
            date_str,
        ))

    # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–æ–∫ –ø–µ—Ä–∏–æ–¥–æ–≤
    period_radio_data = [
        ("all", "–í—Å–µ"),
        ("d", "–î–µ–Ω—å"),
        ("w", "–ù–µ–¥–µ–ª—è"),
        ("m", "–ú–µ—Å—è—Ü"),
        ("A", "–†—É—á–Ω—ã–µ"),
    ]

    user_name = format_fullname(selected_user.fullname, short=False, gender_emoji=True)

    return {
        "achievements": formatted_achievements,
        "user_name": user_name,
        "total_achievements": len(formatted_achievements),
        "period_radio_data": period_radio_data,
        "selected_period": selected_period,
    }


async def member_inventory_getter(
    stp_repo: MainRequestsRepo, dialog_manager: DialogManager, **_kwargs
) -> dict[str, Any]:
    """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–ª–µ–Ω–∞ –≥—Ä—É–ø–ø—ã.

    Args:
        stp_repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π STP
        dialog_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∏–∞–ª–æ–≥–∞

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    from tgbot.misc.helpers import get_status_emoji

    selected_user_id = dialog_manager.dialog_data.get("selected_member_id")
    selected_user = await stp_repo.employee.get_users(main_id=int(selected_user_id))

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–∫—É–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_products = await stp_repo.purchase.get_user_purchases_with_details(
        user_id=selected_user.user_id
    )

    total_bought = len(user_products)

    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä —Å—Ç–∞—Ç—É—Å–∞
    filter_type = dialog_manager.find("member_inventory_filter").get_checked()

    formatted_products = []
    for product in user_products:
        user_product = product.user_purchase
        product_info = product.product_info

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä
        if filter_type != "all" and user_product.status != filter_type:
            continue

        date_str = user_product.bought_at.strftime("%d.%m.%y")
        status_emoji = get_status_emoji(user_product.status)
        usage_info = f"({product.current_usages}/{product.max_usages})"
        button_text = f"{status_emoji} {usage_info} {product_info.name} ({date_str})"

        formatted_products.append((
            user_product.id,
            button_text,
            product_info.name,
            product_info.description,
            product_info.cost,
            user_product.status,
            product.current_usages,
            product.max_usages,
        ))

    user_name = format_fullname(selected_user.fullname, short=False, gender_emoji=True)

    return {
        "products": formatted_products,
        "user_name": user_name,
        "total_bought": total_bought,
        "total_shown": len(formatted_products),
        "inventory_filter": filter_type,
    }
