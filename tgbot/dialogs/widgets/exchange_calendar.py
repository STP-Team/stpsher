"""–ö–∞—Å—Ç–æ–º–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –±–∏—Ä–∂–∏ –ø–æ–¥–º–µ–Ω —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Å–º–µ–Ω."""

from datetime import date

from aiogram_dialog import DialogManager
from aiogram_dialog.widgets.kbd import Calendar, CalendarConfig, CalendarScope
from aiogram_dialog.widgets.kbd.calendar_kbd import (
    CalendarDaysView,
    CalendarMonthView,
    CalendarScopeView,
)
from aiogram_dialog.widgets.text import Format, Text

from tgbot.dialogs.widgets.calendars import RussianMonthNominative, RussianWeekday


class ShiftDateText(Text):
    """–í–∏–¥–∂–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞—Ç—ã —Å —ç–º–æ–¥–∑–∏ —Å–º–µ–Ω—ã."""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–¥–∂–µ—Ç–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞—Ç—ã."""
        super().__init__()

    async def _render_text(self, data, dialog_manager: DialogManager) -> str:
        """–†–µ–Ω–¥–µ—Ä –¥–∞—Ç—ã —Å —ç–º–æ–¥–∑–∏ —Å–º–µ–Ω—ã –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å."""
        selected_date: date = data["date"]
        day = selected_date.day

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–º–µ–Ω–∞—Ö –∏–∑ dialog_data
        shift_dates = dialog_manager.dialog_data.get("shift_dates", {})

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–º–µ–Ω–∞ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
        date_key = f"{day:02d}"
        if date_key in shift_dates:
            return f"¬∑{day}¬∑"

        return str(day)


class TodayShiftDateText(Text):
    """–í–∏–¥–∂–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã —Å —ç–º–æ–¥–∑–∏ —Å–º–µ–Ω—ã."""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–¥–∂–µ—Ç–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã."""
        super().__init__()

    async def _render_text(self, data, dialog_manager: DialogManager) -> str:
        """–†–µ–Ω–¥–µ—Ä —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã —Å —ç–º–æ–¥–∑–∏ —Å–º–µ–Ω—ã –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å."""
        selected_date: date = data["date"]
        day = selected_date.day

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–º–µ–Ω–∞—Ö –∏–∑ dialog_data
        shift_dates = dialog_manager.dialog_data.get("shift_dates", {})

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–º–µ–Ω–∞ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
        date_key = f"{day:02d}"
        if date_key in shift_dates:
            return f"¬∑Ô∏éÔ∏é{day}¬∑"

        return f"{day}"


class ExchangeCalendar(Calendar):
    """–ö–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –±–∏—Ä–∂–∏ –ø–æ–¥–º–µ–Ω —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Å–º–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

    def __init__(
        self,
        id: str,
        on_click=None,
        config: CalendarConfig = None,
    ):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –±–∏—Ä–∂–∏ –ø–æ–¥–º–µ–Ω.

        Args:
            id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–∏–¥–∂–µ—Ç–∞
            on_click: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        """
        if config is None:
            config = CalendarConfig(
                firstweekday=0,  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
            )
        super().__init__(id=id, on_click=on_click, config=config)

    def _init_views(self) -> dict[CalendarScope, CalendarScopeView]:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è."""
        return {
            CalendarScope.DAYS: CalendarDaysView(
                self._item_callback_data,
                date_text=ShiftDateText(),
                today_text=TodayShiftDateText(),
                header_text="üìÖ "
                + RussianMonthNominative()
                + " "
                + Format("{date:%Y}"),
                weekday_text=RussianWeekday(),
                next_month_text=RussianMonthNominative() + " ‚è©",
                prev_month_text="‚è™ " + RussianMonthNominative(),
            ),
            CalendarScope.MONTHS: CalendarMonthView(
                self._item_callback_data,
                month_text=RussianMonthNominative(),
                header_text="üìÖ –í—ã–±–æ—Ä –º–µ—Å—è—Ü–∞ " + Format("{date:%Y}"),
                this_month_text="¬∑ " + RussianMonthNominative() + " ¬∑",
                next_year_text=Format("{date:%Y}") + " ‚è©",
                prev_year_text="‚è™ " + Format("{date:%Y}"),
            ),
        }
