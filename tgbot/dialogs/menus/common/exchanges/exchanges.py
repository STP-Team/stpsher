"""–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–∫–æ–Ω –¥–ª—è –±–∏—Ä–∂–∏ –ø–æ–¥–º–µ–Ω."""

from typing import Any

from aiogram import F
from aiogram_dialog import Dialog, DialogManager, Window
from aiogram_dialog.widgets.input import TextInput
from aiogram_dialog.widgets.kbd import (
    Button,
    ManagedRadio,
    ManagedToggle,
    Row,
    ScrollingGroup,
    Select,
    SwitchInlineQueryChosenChatButton,
    SwitchTo,
)
from aiogram_dialog.widgets.text import Const, Format

from tgbot.dialogs.events.common.schedules.exchanges import (
    on_cancel_sell,
    on_confirm_sell,
    on_date_selected,
    on_exchange_apply,
    on_exchange_buy_selected,
    on_exchange_cancel,
    on_exchange_sell_selected,
    on_hours_selected,
    on_payment_date_selected,
    on_payment_timing_selected,
    on_price_input,
    on_time_input,
)
from tgbot.dialogs.getters.common.exchanges.exchanges import (
    exchange_buy_detail_getter,
    exchange_buy_getter,
    exchange_sell_detail_getter,
    exchange_sell_getter,
    sell_confirmation_getter,
    sell_date_getter,
    sell_hours_getter,
    sell_payment_date_getter,
    sell_payment_timing_getter,
    sell_price_getter,
    sell_time_input_getter,
)
from tgbot.dialogs.menus.common.exchanges.settings import (
    buy_filters_day_window,
    buy_filters_shift_window,
    buy_settings_window,
    sell_settings_window,
)
from tgbot.dialogs.states.common.exchanges import Exchanges
from tgbot.dialogs.widgets import RussianCalendar
from tgbot.dialogs.widgets.buttons import HOME_BTN
from tgbot.dialogs.widgets.exchange_calendar import ExchangeCalendar

exchanges_window = Window(
    Const("üé≠ <b>–ë–∏—Ä–∂–∞ –ø–æ–¥–º–µ–Ω</b>"),
    Format("""
–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –æ–±–º–µ–Ω—è—Ç—å —Å–≤–æ–∏ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã, –ª–∏–±–æ –≤–∑—è—Ç—å —á—É–∂–∏–µ"""),
    Row(
        SwitchTo(Const("üìà –ö—É–ø–∏—Ç—å"), id="buy", state=Exchanges.buy),
        SwitchTo(Const("üìâ –ü—Ä–æ–¥–∞—Ç—å"), id="sell", state=Exchanges.sell),
    ),
    SwitchTo(Const("üó≥ –ú–æ–∏ —Å–¥–µ–ª–∫–∏"), id="my", state=Exchanges.my),
    SwitchTo(Const("üí∏ –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É"), id="create", state=Exchanges.create),
    SwitchTo(Const("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), id="stats", state=Exchanges.stats),
    Row(SwitchTo(Const("‚Ü©Ô∏è –ù–∞–∑–∞–¥"), id="back", state=Exchanges.menu), HOME_BTN),
    state=Exchanges.menu,
)

exchange_buy_window = Window(
    Const("üìà <b>–ë–∏—Ä–∂–∞: –ü–æ–∫—É–ø–∫–∞ —á–∞—Å–æ–≤</b>"),
    Format(
        """\n–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞ –±–∏—Ä–∂–µ: {exchanges_length}
        
<i>üîç –ù–∞–∂–º–∏ –Ω–∞ —Å–º–µ–Ω—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π</i>""",
        when="has_exchanges",
    ),
    Format("\nüì≠ <i>–ü–æ–∫–∞ –±–∏—Ä–∂–∞ –ø—É—Å—Ç–∞ :(</i>", when=~F["has_exchanges"]),
    ScrollingGroup(
        Select(
            Format("{item[time]}, {item[date]} | {item[price]} —Ä."),
            id="exchange_select",
            items="available_exchanges",
            item_id_getter=lambda item: item["id"],
            on_click=on_exchange_buy_selected,
        ),
        width=1,
        height=10,
        hide_on_single_page=True,
        id="exchange_scrolling",
        when="has_exchanges",
    ),
    Button(Const("üîÑ –û–±–Ω–æ–≤–∏—Ç—å"), id="refresh_exchange_buy"),
    SwitchTo(
        Const("üí° –§–∏–ª—å—Ç—Ä—ã –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞"),
        id="exchanges_buy_settings",
        state=Exchanges.buy_settings,
    ),
    Row(SwitchTo(Const("‚Ü©Ô∏è –ù–∞–∑–∞–¥"), id="back", state=Exchanges.menu), HOME_BTN),
    getter=exchange_buy_getter,
    state=Exchanges.buy,
)


exchange_sell_window = Window(
    Const("üìâ <b>–ë–∏—Ä–∂–∞: –ü—Ä–æ–¥–∞–∂–∞ —á–∞—Å–æ–≤</b>"),
    Format("""
–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –≤—ã—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ—é —Å–º–µ–Ω—É –Ω–∞ –ø—Ä–æ–¥–∞–∂—É, –∞ —Ç–∞–∫ –∂–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Å–≤–æ–∏—Ö —Ç–µ–∫—É—â–∏—Ö –ø–æ–¥–º–µ–Ω –Ω–∞ –±–∏—Ä–∂–µ"""),
    Format("\nüìã <b>–¢–≤–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:</b>", when="has_user_exchanges"),
    Format("üîç <i>–ù–∞–∂–º–∏ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</i>\n", when="has_user_exchanges"),
    Format(
        "\nüì≠ <i>–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π</i>", when=~F["has_user_exchanges"]
    ),
    Select(
        Format("{item[time]}, {item[date]}"),
        id="user_exchange_select",
        items="user_exchanges",
        item_id_getter=lambda item: item["id"],
        on_click=on_exchange_sell_selected,
        when="has_user_exchanges",
    ),
    Button(Const("üîÑ –û–±–Ω–æ–≤–∏—Ç—å"), id="refresh_exchange_sell"),
    SwitchTo(
        Const("üí° –§–∏–ª—å—Ç—Ä—ã –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞"),
        id="exchanges_sell_settings",
        state=Exchanges.sell_settings,
    ),
    Row(SwitchTo(Const("‚Ü©Ô∏è –ù–∞–∑–∞–¥"), id="back", state=Exchanges.menu), HOME_BTN),
    getter=exchange_sell_getter,
    state=Exchanges.sell,
)


exchange_my_window = Window(
    Const("ü§ù <b>–ë–∏—Ä–∂–∞: –ú–æ–∏ –ø–æ–¥–º–µ–Ω—ã</b>"),
    Format("""
<tg-spoiler>–ó–¥–µ—Å—å –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç, –Ω–æ –æ—á–µ–Ω—å —Å–∫–æ—Ä–æ —á—Ç–æ-—Ç–æ –±—É–¥–µ—Ç ü™Ñ</tg-spoiler>"""),
    Button(Const("üîÑ –û–±–Ω–æ–≤–∏—Ç—å"), id="refresh_exchange_buy"),
    Row(SwitchTo(Const("‚Ü©Ô∏è –ù–∞–∑–∞–¥"), id="back", state=Exchanges.menu), HOME_BTN),
    state=Exchanges.my,
)

# –û–∫–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–æ–¥–∞–∂–∏ —Å–º–µ–Ω—ã

sell_date_select_window = Window(
    Const("üìÖ <b>–®–∞–≥ 1: –í—ã–±–æ—Ä –¥–∞—Ç—ã —Å–º–µ–Ω—ã</b>"),
    Format("–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É —Å–º–µ–Ω—ã, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –ø—Ä–æ–¥–∞—Ç—å:"),
    Format("<i>üë®üèª‚Äçüíªüë©üèª‚Äçüíª ‚Äî –¥–Ω–∏ –∫–æ–≥–¥–∞ —É —Ç–µ–±—è –µ—Å—Ç—å —Å–º–µ–Ω–∞</i>"),
    ExchangeCalendar(
        id="sell_date_calendar",
        on_click=on_date_selected,
    ),
    Row(Button(Const("‚ùå –û—Ç–º–µ–Ω–∞"), id="cancel", on_click=on_cancel_sell), HOME_BTN),
    getter=sell_date_getter,
    state=Exchanges.sell_date_select,
)

sell_hours_select_window = Window(
    Const("‚è∞ <b>–®–∞–≥ 2: –¢–∏–ø —Å–º–µ–Ω—ã</b>"),
    Format("–î–∞—Ç–∞ —Å–º–µ–Ω—ã: {selected_date}"),
    Format("–¢–≤–æ—è —Å–º–µ–Ω–∞: {user_schedule}"),
    Format("{duty_warning}", when="duty_warning"),
    Format("\n–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Å–º–µ–Ω—ã –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:"),
    Select(
        Format("{item[1]}"),
        id="hours_type",
        items="shift_options",
        item_id_getter=lambda item: item[0],
        on_click=on_hours_selected,
    ),
    Row(
        SwitchTo(Const("‚Ü©Ô∏è –ù–∞–∑–∞–¥"), id="back", state=Exchanges.sell_date_select),
        Button(Const("‚ùå –û—Ç–º–µ–Ω–∞"), id="cancel", on_click=on_cancel_sell),
    ),
    getter=sell_hours_getter,
    state=Exchanges.sell_hours_select,
)

sell_time_input_window = Window(
    Const("üïê <b>–®–∞–≥ 3: –í—Ä–µ–º—è –ø—Ä–æ–¥–∞–∂–∏</b>"),
    Format("–î–∞—Ç–∞ —Å–º–µ–Ω—ã: {selected_date}"),
    Format("–¢–≤–æ—è —Å–º–µ–Ω–∞: {user_schedule}"),
    Format("{duty_warning}", when="duty_warning"),
    Format("\n–í–≤–µ–¥–∏ –≤—Ä–µ–º—è –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –ø—Ä–æ–¥–∞—Ç—å:"),
    Format("<i>–§–æ—Ä–º–∞—Ç: 09:00-13:00 –∏–ª–∏ 14:00-18:00. –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: –ü–µ—Ä–º—å (–ú–°–ö+2)</i>"),
    TextInput(
        id="time_input",
        on_success=on_time_input,
    ),
    Row(
        SwitchTo(Const("‚Ü©Ô∏è –ù–∞–∑–∞–¥"), id="back", state=Exchanges.sell_hours_select),
        Button(Const("‚ùå –û—Ç–º–µ–Ω–∞"), id="cancel", on_click=on_cancel_sell),
    ),
    getter=sell_time_input_getter,
    state=Exchanges.sell_time_input,
)

sell_price_input_window = Window(
    Const("üí∞ <b>–®–∞–≥ 4: –¶–µ–Ω–∞</b>"),
    Format("–î–∞—Ç–∞ —Å–º–µ–Ω—ã: {selected_date}"),
    Format("–¢–∏–ø —Å–º–µ–Ω—ã: {shift_type}"),
    Format("–í—Ä–µ–º—è: {shift_time}", when="shift_time"),
    Format("\n–í–≤–µ–¥–∏ —Ü–µ–Ω—É –∑–∞ {shift_type} (–≤ —Ä—É–±–ª—è—Ö):"),
    Format("<i>–ù–∞–ø—Ä–∏–º–µ—Ä: 1000 –∏–ª–∏ 1500.50</i>"),
    TextInput(
        id="price_input",
        on_success=on_price_input,
    ),
    Row(
        SwitchTo(
            Const("‚Ü©Ô∏è –ù–∞–∑–∞–¥"), id="back_to_previous", state=Exchanges.sell_hours_select
        ),
        Button(Const("‚ùå –û—Ç–º–µ–Ω–∞"), id="cancel", on_click=on_cancel_sell),
    ),
    getter=sell_price_getter,
    state=Exchanges.sell_price_input,
)

sell_payment_timing_window = Window(
    Const("üí≥ <b>–®–∞–≥ 5: –£—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã</b>"),
    Format("–î–∞—Ç–∞ —Å–º–µ–Ω—ã: {selected_date}"),
    Format("–¢–∏–ø —Å–º–µ–Ω—ã: {shift_type}"),
    Format("–¶–µ–Ω–∞: {price} —Ä."),
    Format("\n–ö–æ–≥–¥–∞ –ø–æ—Å—Ç—É–ø–∏—Ç –æ–ø–ª–∞—Ç–∞:"),
    Select(
        Format("{item[1]}"),
        id="payment_timing",
        items=[
            ("immediate", "üí∏ –°—Ä–∞–∑—É –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ"),
            ("on_date", "üìÖ –î–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –¥–∞—Ç—ã"),
        ],
        item_id_getter=lambda item: item[0],
        on_click=on_payment_timing_selected,
    ),
    Row(
        SwitchTo(Const("‚Ü©Ô∏è –ù–∞–∑–∞–¥"), id="back", state=Exchanges.sell_price_input),
        Button(Const("‚ùå –û—Ç–º–µ–Ω–∞"), id="cancel", on_click=on_cancel_sell),
    ),
    getter=sell_payment_timing_getter,
    state=Exchanges.sell_payment_timing,
)

sell_payment_date_window = Window(
    Const("üìÖ <b>–®–∞–≥ 6: –î–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞</b>"),
    Format("–î–∞—Ç–∞ —Å–º–µ–Ω—ã: {shift_date}"),
    Format("\n–í—ã–±–µ—Ä–∏ –∫—Ä–∞–π–Ω—é—é –¥–∞—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:"),
    Format("<i>–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –ø–æ–∑–∂–µ –¥–∞—Ç—ã —Å–º–µ–Ω—ã</i>"),
    RussianCalendar(
        id="payment_date_calendar",
        on_click=on_payment_date_selected,
    ),
    Row(
        SwitchTo(Const("‚Ü©Ô∏è –ù–∞–∑–∞–¥"), id="back", state=Exchanges.sell_payment_timing),
        Button(Const("‚ùå –û—Ç–º–µ–Ω–∞"), id="cancel", on_click=on_cancel_sell),
    ),
    getter=sell_payment_date_getter,
    state=Exchanges.sell_payment_date,
)

sell_confirmation_window = Window(
    Const("‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ</b>"),
    Format("""
–ü—Ä–æ–≤–µ—Ä—å –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π:

üìÖ <b>–î–∞—Ç–∞ —Å–º–µ–Ω—ã:</b> {shift_date}
‚è∞ <b>–¢–∏–ø —Å–º–µ–Ω—ã:</b> {shift_type}
üïò <b>–í—Ä–µ–º—è:</b> {shift_time}
üí∞ <b>–¶–µ–Ω–∞:</b> {price} —Ä.
üí≥ <b>–û–ø–ª–∞—Ç–∞:</b> {payment_info}

–í—Å—ë –≤–µ—Ä–Ω–æ?"""),
    Row(
        Button(Const("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å"), id="confirm", on_click=on_confirm_sell),
        Button(Const("‚ùå –û—Ç–º–µ–Ω–∞"), id="cancel", on_click=on_cancel_sell),
    ),
    SwitchTo(Const("‚Ü©Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å"), id="back", state=Exchanges.sell_payment_timing),
    getter=sell_confirmation_getter,
    state=Exchanges.sell_confirmation,
)

# –û–∫–Ω–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±–º–µ–Ω–æ–≤

exchange_buy_detail_window = Window(
    Const("üîç <b>–î–µ—Ç–∞–ª–∏ —Å–¥–µ–ª–∫–∏</b>"),
    Format("""
üìÖ <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:</b> {shift_date} {shift_time} –ü–†–ú
üí∞ <b>–¶–µ–Ω–∞:</b> {price} —Ä.

üë§ <b>–ü—Ä–æ–¥–∞–≤–µ—Ü:</b> {seller_name}
üí≥ <b>–û–ø–ª–∞—Ç–∞:</b> {payment_info}"""),
    Button(Const("‚úÖ –ö—É–ø–∏—Ç—å"), id="apply", on_click=on_exchange_apply),
    SwitchInlineQueryChosenChatButton(
        Const("üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–¥–µ–ª–∫–æ–π"),
        query=Format("{deeplink}"),
        allow_user_chats=True,
        allow_group_chats=True,
        allow_channel_chats=False,
        allow_bot_chats=False,
        id="exchange_deeplink",
    ),
    Row(SwitchTo(Const("‚Ü©Ô∏è –ù–∞–∑–∞–¥"), id="back", state=Exchanges.buy), HOME_BTN),
    getter=exchange_buy_detail_getter,
    state=Exchanges.buy_detail,
)

exchange_sell_detail_window = Window(
    Const("üîç <b>–î–µ—Ç–∞–ª–∏ —Ç–≤–æ–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è</b>"),
    Format("""
üìÖ <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:</b> {shift_date} {shift_time} –ü–†–ú
üí∞ <b>–û–ø–ª–∞—Ç–∞:</b> {price} —Ä. {payment_info}

üìÖ <b>–°–æ–∑–¥–∞–Ω–æ:</b> {created_at}"""),
    Row(
        Button(
            Const("‚úãüèª –û—Ç–º–µ–Ω–∏—Ç—å"),
            id="cancel_exchange",
            on_click=on_exchange_cancel,
        ),
        Button(Const("üîÑ –û–±–Ω–æ–≤–∏—Ç—å"), id="refresh_exchange_detail"),
    ),
    SwitchInlineQueryChosenChatButton(
        Const("üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–¥–µ–ª–∫–æ–π"),
        query=Format("{deeplink}"),
        allow_user_chats=True,
        allow_group_chats=True,
        allow_channel_chats=False,
        allow_bot_chats=False,
        id="exchange_deeplink",
    ),
    SwitchTo(Const("‚Ü©Ô∏è –ù–∞–∑–∞–¥"), id="back", state=Exchanges.sell),
    getter=exchange_sell_detail_getter,
    state=Exchanges.sell_detail,
)


async def on_start(_on_start: Any, dialog_manager: DialogManager, **_kwargs):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–∏–∞–ª–æ–≥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ.

    Args:
        _on_start: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞ –¥–∏–∞–ª–æ–≥–∞
        dialog_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∏–∞–ª–æ–≥–∞
    """
    day_filter_checkbox: ManagedRadio = dialog_manager.find("day_filter")
    await day_filter_checkbox.set_checked("all")

    shift_filter_checkbox: ManagedRadio = dialog_manager.find("shift_filter")
    await shift_filter_checkbox.set_checked("all")

    date_sort_toggle: ManagedToggle = dialog_manager.find("date_sort")
    await date_sort_toggle.set_checked("nearest")

    price_sort_toggle: ManagedToggle = dialog_manager.find("price_sort")
    await price_sort_toggle.set_checked("cheap")


exchanges_dialog = Dialog(
    exchanges_window,
    exchange_buy_window,
    exchange_sell_window,
    exchange_my_window,
    # –û–∫–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ —Å–º–µ–Ω—ã
    sell_date_select_window,
    sell_hours_select_window,
    sell_time_input_window,
    sell_price_input_window,
    sell_payment_timing_window,
    sell_payment_date_window,
    sell_confirmation_window,
    exchange_buy_detail_window,
    exchange_sell_detail_window,
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∫—É–ø–æ–∫
    buy_settings_window,
    buy_filters_day_window,
    buy_filters_shift_window,
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–¥–∞–∂
    sell_settings_window,
    on_start=on_start,
)
