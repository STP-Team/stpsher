"""–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤."""

from typing import Any

from aiogram import F
from aiogram_dialog import Dialog, DialogManager
from aiogram_dialog.widgets.kbd import (
    Button,
    ManagedRadio,
    Radio,
    Row,
    SwitchTo,
)
from aiogram_dialog.widgets.text import Const, Format
from aiogram_dialog.window import Window

from tgbot.dialogs.events.common.schedules import (
    close_schedules_dialog,
    do_nothing,
    next_day,
    next_month,
    prev_day,
    prev_month,
    today,
)
from tgbot.dialogs.getters.common.schedules import (
    duty_schedule_getter,
    group_schedule_getter,
    head_schedule_getter,
    user_schedule_getter,
)
from tgbot.dialogs.states.common.schedule import Schedules

menu_window = Window(
    Format("""<b>üìÖ –ú–µ–Ω—é –≥—Ä–∞—Ñ–∏–∫–æ–≤</b>

–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥–µ—à—å –≤—Å–µ, —á—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏"""),
    Row(
        SwitchTo(
            Const("üëî –ú–æ–π –≥—Ä–∞—Ñ–∏–∫"),
            id="schedule_my",
            state=Schedules.my,
        ),
        SwitchTo(
            Const("‚ù§Ô∏è –ú–æ—è –≥—Ä—É–ø–ø–∞"),
            id="schedule_group",
            state=Schedules.group,
        ),
    ),
    Row(
        SwitchTo(
            Const("üëÆ‚Äç‚ôÇÔ∏è –î–µ–∂—É—Ä–Ω—ã–µ"),
            id="schedule_duties",
            state=Schedules.duties,
        ),
        SwitchTo(
            Const("üëë –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏"),
            id="schedule_heads",
            state=Schedules.heads,
        ),
    ),
    Button(Const("‚Ü©Ô∏è –ù–∞–∑–∞–¥"), id="home", on_click=close_schedules_dialog),
    state=Schedules.menu,
)

my_window = Window(
    Format("{schedule_text}"),
    Row(
        Button(
            Const("<"),
            id="prev_month",
            on_click=prev_month,
        ),
        Button(
            Format("{month_display}"),
            id="current_month",
            on_click=do_nothing,
        ),
        Button(
            Const(">"),
            id="next_month",
            on_click=next_month,
        ),
    ),
    Row(
        Radio(
            Format("üîò {item[1]}"),
            Format("‚ö™Ô∏è {item[1]}"),
            id="schedule_mode",
            item_id_getter=lambda item: item[0],
            items="mode_options",
        ),
    ),
    Row(
        SwitchTo(Const("‚Ü©Ô∏è –ù–∞–∑–∞–¥"), id="to_schedules", state=Schedules.menu),
        Button(Const("üè† –î–æ–º–æ–π"), id="home", on_click=close_schedules_dialog),
    ),
    getter=user_schedule_getter,
    state=Schedules.my,
)


duties_window = Window(
    Format("{duties_text}"),
    Row(
        Button(
            Const("<"),
            id="prev_day",
            on_click=prev_day,
        ),
        Button(
            Format("üìÖ {date_display}"),
            id="current_date",
            on_click=do_nothing,
        ),
        Button(
            Const(">"),
            id="next_day",
            on_click=next_day,
        ),
    ),
    Button(
        Const("üìç –°–µ–≥–æ–¥–Ω—è"),
        id="today",
        on_click=today,
        when=~F["is_today"],
    ),
    Row(
        SwitchTo(Const("‚Ü©Ô∏è –ù–∞–∑–∞–¥"), id="to_schedules", state=Schedules.menu),
        Button(Const("üè† –î–æ–º–æ–π"), id="home", on_click=close_schedules_dialog),
    ),
    getter=duty_schedule_getter,
    state=Schedules.duties,
)

group_window = Window(
    Format("{group_text}"),
    Row(
        Button(
            Const("<"),
            id="prev_day",
            on_click=prev_day,
        ),
        Button(
            Format("üìÖ {date_display}"),
            id="current_date",
            on_click=do_nothing,
        ),
        Button(
            Const(">"),
            id="next_day",
            on_click=next_day,
        ),
    ),
    Button(
        Const("üìç –°–µ–≥–æ–¥–Ω—è"),
        id="today",
        on_click=today,
        when=~F["is_today"],
    ),
    Row(
        SwitchTo(Const("‚Ü©Ô∏è –ù–∞–∑–∞–¥"), id="back", state=Schedules.menu),
        Button(Const("üè† –î–æ–º–æ–π"), id="home", on_click=close_schedules_dialog),
    ),
    getter=group_schedule_getter,
    state=Schedules.group,
)

heads_window = Window(
    Format("{heads_text}"),
    Row(
        Button(
            Const("<"),
            id="prev_day",
            on_click=prev_day,
        ),
        Button(
            Format("üìÖ {date_display}"),
            id="current_date",
            on_click=do_nothing,
        ),
        Button(
            Const(">"),
            id="next_day",
            on_click=next_day,
        ),
    ),
    Button(
        Const("üìç –°–µ–≥–æ–¥–Ω—è"),
        id="today",
        on_click=today,
        when=~F["is_today"],
    ),
    Row(
        SwitchTo(Const("‚Ü©Ô∏è –ù–∞–∑–∞–¥"), id="back", state=Schedules.menu),
        Button(Const("üè† –î–æ–º–æ–π"), id="home", on_click=close_schedules_dialog),
    ),
    getter=head_schedule_getter,
    state=Schedules.heads,
)


async def on_start(_on_start: Any, dialog_manager: DialogManager, **_kwargs):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–∏–∞–ª–æ–≥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ.

    Args:
        _on_start: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞ –¥–∏–∞–ª–æ–≥–∞
        dialog_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∏–∞–ª–æ–≥–∞
    """
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–∞ "–ö—Ä–∞—Ç–∫–æ"
    schedule_mode: ManagedRadio = dialog_manager.find("schedule_mode")
    await schedule_mode.set_checked("compact")


schedules_dialog = Dialog(
    menu_window, my_window, group_window, duties_window, heads_window, on_start=on_start
)
