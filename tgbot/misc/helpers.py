"""–§—É–Ω–∫—Ü–∏–∏-–ø–æ–º–æ—â–Ω–∏–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–¥–∞."""

import random
import string

import pytz

from sqlalchemy.orm import Mapped

from tgbot.misc.dicts import roles

tz = pytz.timezone("Asia/Yekaterinburg")


def generate_auth_code(length=6):
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–¥–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.

    Args:
        length: –î–ª–∏–Ω–∞ –∫–æ–¥–∞

    Returns:
        –ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    """
    chars = string.ascii_letters + string.digits  # A-Z, a-z, 0-9
    return "".join(random.choice(chars) for _ in range(length))


def get_role(role_id: int = None, role_name: str = None, return_id: bool = False):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–ª–∏.

    Args:
        role_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä–æ–ª–∏
        role_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏
        return_id: –ù—É–∂–Ω–æ –ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä

    Returns:
        –ù–∞–∑–≤–∞–Ω–∏–µ –∏ —ç–º–æ–¥–∑–∏ —Ä–æ–ª–∏ –∏–ª–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä–æ–ª–∏
    """
    if role_id is not None:
        return role_id if return_id else roles.get(role_id)

    if role_name is not None:
        for r_id, data in roles.items():
            if data["name"] == role_name:
                return r_id if return_id else data

    return None


def get_status_emoji(status: str) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–µ–¥–º–µ—Ç–∞.

    Args:
        status: –°—Ç–∞—Ç—É—Å –ø—Ä–µ–¥–º–µ—Ç–∞

    Returns:
        –≠–º–æ–¥–∑–∏, –æ—Ç–æ–±—Ä–∞–∂–∞—é—â–∏–π —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–¥–º–µ—Ç–∞
    """
    status_emojis = {
        "stored": "üì¶",
        "review": "‚è≥",
        "used_up": "üîí",
    }
    return status_emojis.get(status, "‚ùì")


def get_gender_emoji(name: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–ª –ø–æ –∏–º–µ–Ω–∏.

    Args:
        name: –ü–æ–ª–Ω—ã–µ –§–ò–û

    Returns:
        –≠–º–æ–¥–∑–∏ –≥–µ–Ω–¥–µ—Ä–∞
    """
    parts = name.split()
    if len(parts) >= 3:
        patronymic = parts[2]
        if patronymic.endswith("–Ω–∞"):
            return "üë©‚Äçüíº"
        elif patronymic.endswith(("–∏—á", "–æ–≤–∏—á", "–µ–≤–∏—á")):
            return "üë®‚Äçüíº"
    return "üë®‚Äçüíº"


def short_name(full_name: str) -> str:
    """–î–æ—Å—Ç–∞–µ—Ç —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è –∏–∑ –§–ò–û.

    Args:
        full_name: –ü–æ–ª–Ω—ã–µ –§–ò–û

    Returns:
        –§–∞–º–∏–ª–∏—è –∏ –∏–º—è
    """
    clean_name = full_name.split("(")[0].strip()
    parts = clean_name.split()

    if len(parts) >= 2:
        return " ".join(parts[:2])
    return clean_name


def format_fullname(
    fullname: str | Mapped[str],
    short: bool = True,
    gender_emoji: bool = False,
    username: str | Mapped[str] = None,
    user_id: int | Mapped[int] = None,
) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        fullname: –ü–æ–ª–Ω—ã–µ –§–ò–û
        short: –ù—É–∂–Ω–æ –ª–∏ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –¥–æ –§–ò
        gender_emoji: –ù—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å —ç–º–æ–¥–∑–∏ –≥–µ–Ω–¥–µ—Ä—ã –∫ –§–ò–û
        username: –Æ–∑–µ—Ä–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
        user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram

    Returns:
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    """
    if short:
        formatted_fullname = short_name(fullname)
    else:
        formatted_fullname = fullname

    if username is not None:
        formatted_fullname = f"<a href='t.me/{username}'>{formatted_fullname}</a>"
    elif username is None and user_id is not None:
        formatted_fullname = (
            f"<a href='tg://user?id={user_id}'>{formatted_fullname}</a>"
        )

    if gender_emoji:
        emoji = get_gender_emoji(fullname)
        formatted_fullname = f"{emoji} {formatted_fullname}"

    return formatted_fullname
